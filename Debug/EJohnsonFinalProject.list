
EJohnsonFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007220  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001270  080073d0  080073d0  000083d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008640  08008640  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  08008640  08008640  00009640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008648  08008648  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008648  08008648  00009648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800864c  0800864c  0000964c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008650  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00025b78  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025bf0  20025bf0  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014809  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000376f  00000000  00000000  0001e8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  00022020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000106d  00000000  00000000  00023588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002790c  00000000  00000000  000245f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019447  00000000  00000000  0004bf01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e30d4  00000000  00000000  00065348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014841c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006030  00000000  00000000  00148460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0014e490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080073b8 	.word	0x080073b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080073b8 	.word	0x080073b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#endif // COMPILE_TOUCH_FUNCTIONS


/* GENERAL */

void ApplicationInit(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 fa56 	bl	8002a34 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fb86 	bl	8000c98 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fb39 	bl	8000c04 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fc50 	bl	8000e3c <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 ffc6 	bl	800152c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <ApplicationInit+0x38>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 f809 	bl	80005bc <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS

	#if USE_INTERRUPT_FOR_BUTTON == 1
	buttonInitInterrupt();
 80005aa:	f000 f8f3 	bl	8000794 <buttonInitInterrupt>
	#endif

	#if USE_INTERRUPT_FOR_TIMER == 1
	timerInit();
 80005ae:	f000 f8f7 	bl	80007a0 <timerInit>
	#endif
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000098 	.word	0x20000098

080005bc <LCDTouchScreenInterruptGPIOInit>:


// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005d4:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005d6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005da:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4619      	mov	r1, r3
 8000604:	4807      	ldr	r0, [pc, #28]	@ (8000624 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000606:	f002 fd19 	bl	800303c <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800060a:	2028      	movs	r0, #40	@ 0x28
 800060c:	f002 fcc7 	bl	8002f9e <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000612:	4a06      	ldr	r2, [pc, #24]	@ (800062c <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000614:	601a      	str	r2, [r3, #0]

}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000
 8000628:	200000a0 	.word	0x200000a0
 800062c:	0600000f 	.word	0x0600000f

08000630 <EXTI15_10_IRQHandler>:

#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler(){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universal interrupt guard
 8000636:	2028      	movs	r0, #40	@ 0x28
 8000638:	f002 fcbf 	bl	8002fba <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 800063c:	2300      	movs	r3, #0
 800063e:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000640:	4b4c      	ldr	r3, [pc, #304]	@ (8000774 <EXTI15_10_IRQHandler+0x144>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000646:	e006      	b.n	8000656 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000648:	204c      	movs	r0, #76	@ 0x4c
 800064a:	f001 ff62 	bl	8002512 <STMPE811_Read>
 800064e:	4603      	mov	r3, r0
 8000650:	461a      	mov	r2, r3
 8000652:	4b48      	ldr	r3, [pc, #288]	@ (8000774 <EXTI15_10_IRQHandler+0x144>)
 8000654:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000656:	4b47      	ldr	r3, [pc, #284]	@ (8000774 <EXTI15_10_IRQHandler+0x144>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f4      	beq.n	8000648 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800065e:	200a      	movs	r0, #10
 8000660:	f000 ff7a 	bl	8001558 <ReadRegisterFromTouchModule>
 8000664:	4603      	mov	r3, r0
 8000666:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000668:	2100      	movs	r1, #0
 800066a:	200a      	movs	r0, #10
 800066c:	f000 ff82 	bl	8001574 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000670:	200b      	movs	r0, #11
 8000672:	f000 ff71 	bl	8001558 <ReadRegisterFromTouchModule>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b3f      	ldr	r3, [pc, #252]	@ (8000778 <EXTI15_10_IRQHandler+0x148>)
 800067c:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800067e:	4b3e      	ldr	r3, [pc, #248]	@ (8000778 <EXTI15_10_IRQHandler+0x148>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	4619      	mov	r1, r3
 800068c:	200b      	movs	r0, #11
 800068e:	f000 ff71 	bl	8001574 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000692:	2040      	movs	r0, #64	@ 0x40
 8000694:	f000 ff60 	bl	8001558 <ReadRegisterFromTouchModule>
 8000698:	4603      	mov	r3, r0
 800069a:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 800069c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	da01      	bge.n	80006a8 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 80006a4:	2301      	movs	r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80006a8:	2101      	movs	r1, #1
 80006aa:	204b      	movs	r0, #75	@ 0x4b
 80006ac:	f001 ff42 	bl	8002534 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 80006b0:	2100      	movs	r1, #0
 80006b2:	204b      	movs	r0, #75	@ 0x4b
 80006b4:	f001 ff3e 	bl	8002534 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	4619      	mov	r1, r3
 80006bc:	200a      	movs	r0, #10
 80006be:	f000 ff59 	bl	8001574 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 80006c2:	2103      	movs	r1, #3
 80006c4:	482d      	ldr	r0, [pc, #180]	@ (800077c <EXTI15_10_IRQHandler+0x14c>)
 80006c6:	f002 fca1 	bl	800300c <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80006ca:	2028      	movs	r0, #40	@ 0x28
 80006cc:	f002 fc8f 	bl	8002fee <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006d0:	2028      	movs	r0, #40	@ 0x28
 80006d2:	f002 fc64 	bl	8002f9e <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80006d6:	797b      	ldrb	r3, [r7, #5]
 80006d8:	4619      	mov	r1, r3
 80006da:	200b      	movs	r0, #11
 80006dc:	f000 ff4a 	bl	8001574 <WriteDataToTouchModule>

	/* - ACTION TO EXECUTE DUE TO INTERRUPT - */

	switch(screenCount){
 80006e0:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <EXTI15_10_IRQHandler+0x150>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <EXTI15_10_IRQHandler+0xbe>
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d006      	beq.n	80006fa <EXTI15_10_IRQHandler+0xca>
		break;

	// Consider third screen if we include menu/replay button

	default:
		break;
 80006ec:	e03d      	b.n	800076a <EXTI15_10_IRQHandler+0x13a>
		screenCount = 1;
 80006ee:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <EXTI15_10_IRQHandler+0x150>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
		screen2();
 80006f4:	f000 f905 	bl	8000902 <screen2>
		break;
 80006f8:	e037      	b.n	800076a <EXTI15_10_IRQHandler+0x13a>
		if(isTouchDetected) // Touch has been detected
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d030      	beq.n	8000762 <EXTI15_10_IRQHandler+0x132>
			printf("\nPressed");
 8000700:	4820      	ldr	r0, [pc, #128]	@ (8000784 <EXTI15_10_IRQHandler+0x154>)
 8000702:	f005 ff8d 	bl	8006620 <iprintf>
			DetermineTouchPosition(&StaticTouchData);
 8000706:	4820      	ldr	r0, [pc, #128]	@ (8000788 <EXTI15_10_IRQHandler+0x158>)
 8000708:	f000 ff1b 	bl	8001542 <DetermineTouchPosition>
			printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 800070c:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <EXTI15_10_IRQHandler+0x158>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <EXTI15_10_IRQHandler+0x158>)
 8000714:	885b      	ldrh	r3, [r3, #2]
 8000716:	461a      	mov	r2, r3
 8000718:	481c      	ldr	r0, [pc, #112]	@ (800078c <EXTI15_10_IRQHandler+0x15c>)
 800071a:	f005 ff81 	bl	8006620 <iprintf>
			if(TM_STMPE811_TouchInRectangle(&StaticTouchData, 0, 0, 125, 320)){
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <EXTI15_10_IRQHandler+0x158>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	2b7c      	cmp	r3, #124	@ 0x7c
 8000724:	d80a      	bhi.n	800073c <EXTI15_10_IRQHandler+0x10c>
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <EXTI15_10_IRQHandler+0x158>)
 8000728:	885b      	ldrh	r3, [r3, #2]
 800072a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800072e:	d205      	bcs.n	800073c <EXTI15_10_IRQHandler+0x10c>
				LCD_Clear(0, LCD_COLOR_RED);
 8000730:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000734:	2000      	movs	r0, #0
 8000736:	f000 fb81 	bl	8000e3c <LCD_Clear>
		break;
 800073a:	e015      	b.n	8000768 <EXTI15_10_IRQHandler+0x138>
			else if(TM_STMPE811_TouchInRectangle(&StaticTouchData, 125, 0, 125, 320)){
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <EXTI15_10_IRQHandler+0x158>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	2b7c      	cmp	r3, #124	@ 0x7c
 8000742:	d911      	bls.n	8000768 <EXTI15_10_IRQHandler+0x138>
 8000744:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <EXTI15_10_IRQHandler+0x158>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	2bf9      	cmp	r3, #249	@ 0xf9
 800074a:	d80d      	bhi.n	8000768 <EXTI15_10_IRQHandler+0x138>
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <EXTI15_10_IRQHandler+0x158>)
 800074e:	885b      	ldrh	r3, [r3, #2]
 8000750:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000754:	d208      	bcs.n	8000768 <EXTI15_10_IRQHandler+0x138>
				LCD_Clear(0, LCD_COLOR_GREEN);
 8000756:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fb6e 	bl	8000e3c <LCD_Clear>
		break;
 8000760:	e002      	b.n	8000768 <EXTI15_10_IRQHandler+0x138>
			printf("\nNot pressed \n");
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <EXTI15_10_IRQHandler+0x160>)
 8000764:	f005 ffc4 	bl	80066f0 <puts>
		break;
 8000768:	bf00      	nop
	}
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000ac 	.word	0x200000ac
 8000778:	200000a8 	.word	0x200000a8
 800077c:	200000a0 	.word	0x200000a0
 8000780:	20000094 	.word	0x20000094
 8000784:	080073f4 	.word	0x080073f4
 8000788:	20000098 	.word	0x20000098
 800078c:	08007400 	.word	0x08007400
 8000790:	08007414 	.word	0x08007414

08000794 <buttonInitInterrupt>:
	}
}
#endif

#if USE_INTERRUPT_FOR_BUTTON == 1
void buttonInitInterrupt(){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	Button_InterruptInit();
 8000798:	f000 f808 	bl	80007ac <Button_InterruptInit>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <timerInit>:
#endif

/* TIMER */

void timerInit(){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	Timer_Init();
 80007a4:	f000 ff68 	bl	8001678 <Timer_Init>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <Button_InterruptInit>:
	HAL_GPIO_Init(BUTTON_PORT, &ButtonConfig);
}
#endif

#if USE_INTERRUPT_FOR_BUTTON == 1
void Button_InterruptInit(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef ButtonConfig = {};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

	ButtonConfig.Pin = BUTTON_PIN;
 80007c0:	2301      	movs	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
	ButtonConfig.Mode = GPIO_MODE_IT_RISING;
 80007c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007c8:	60bb      	str	r3, [r7, #8]
	ButtonConfig.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007ca:	2301      	movs	r3, #1
 80007cc:	613b      	str	r3, [r7, #16]
	ButtonConfig.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]

	Button_ClockEnable();
 80007d2:	f000 f813 	bl	80007fc <Button_ClockEnable>
	HAL_GPIO_Init(BUTTON_PORT, &ButtonConfig);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4807      	ldr	r0, [pc, #28]	@ (80007f8 <Button_InterruptInit+0x4c>)
 80007dc:	f002 fc2e 	bl	800303c <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2102      	movs	r1, #2
 80007e4:	2006      	movs	r0, #6
 80007e6:	f002 fbbe 	bl	8002f66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007ea:	2006      	movs	r0, #6
 80007ec:	f002 fbd7 	bl	8002f9e <HAL_NVIC_EnableIRQ>
}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40020000 	.word	0x40020000

080007fc <Button_ClockEnable>:
#endif

void Button_ClockEnable(){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <Button_ClockEnable+0x30>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a08      	ldr	r2, [pc, #32]	@ (800082c <Button_ClockEnable+0x30>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <Button_ClockEnable+0x30>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <screen1>:
uint8_t currentXpos = STARTING_XPOS;
uint8_t currentYpos = STARTING_YPOS;

// SCREENS

void screen1(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af02      	add	r7, sp, #8
	resetScreen();
 8000836:	f000 f879 	bl	800092c <resetScreen>

	// Show all blocks
	LCD_Draw_OBlock(90,250);
 800083a:	21fa      	movs	r1, #250	@ 0xfa
 800083c:	205a      	movs	r0, #90	@ 0x5a
 800083e:	f000 fb8c 	bl	8000f5a <LCD_Draw_OBlock>
	LCD_Draw_IBlock(105,110,0);
 8000842:	2200      	movs	r2, #0
 8000844:	216e      	movs	r1, #110	@ 0x6e
 8000846:	2069      	movs	r0, #105	@ 0x69
 8000848:	f000 fb9c 	bl	8000f84 <LCD_Draw_IBlock>
	LCD_Draw_SBlock(170,200,0);
 800084c:	2200      	movs	r2, #0
 800084e:	21c8      	movs	r1, #200	@ 0xc8
 8000850:	20aa      	movs	r0, #170	@ 0xaa
 8000852:	f000 fbc0 	bl	8000fd6 <LCD_Draw_SBlock>
	LCD_Draw_ZBlock(10,200,0);
 8000856:	2200      	movs	r2, #0
 8000858:	21c8      	movs	r1, #200	@ 0xc8
 800085a:	200a      	movs	r0, #10
 800085c:	f000 fbfe 	bl	800105c <LCD_Draw_ZBlock>
	LCD_Draw_LBlock(20,10,0);
 8000860:	2200      	movs	r2, #0
 8000862:	210a      	movs	r1, #10
 8000864:	2014      	movs	r0, #20
 8000866:	f000 fc3d 	bl	80010e4 <LCD_Draw_LBlock>
	LCD_Draw_JBlock(190,10,0);
 800086a:	2200      	movs	r2, #0
 800086c:	210a      	movs	r1, #10
 800086e:	20be      	movs	r0, #190	@ 0xbe
 8000870:	f000 fcb2 	bl	80011d8 <LCD_Draw_JBlock>
	LCD_Draw_TBlock(75,35,0);
 8000874:	2200      	movs	r2, #0
 8000876:	2123      	movs	r1, #35	@ 0x23
 8000878:	204b      	movs	r0, #75	@ 0x4b
 800087a:	f000 fd25 	bl	80012c8 <LCD_Draw_TBlock>

	// "Tetris"
	LCD_DisplayChar(80,40,'T');
 800087e:	2254      	movs	r2, #84	@ 0x54
 8000880:	2128      	movs	r1, #40	@ 0x28
 8000882:	2050      	movs	r0, #80	@ 0x50
 8000884:	f000 fe2a 	bl	80014dc <LCD_DisplayChar>
	LCD_DisplayChar(95,40,'E');
 8000888:	2245      	movs	r2, #69	@ 0x45
 800088a:	2128      	movs	r1, #40	@ 0x28
 800088c:	205f      	movs	r0, #95	@ 0x5f
 800088e:	f000 fe25 	bl	80014dc <LCD_DisplayChar>
	LCD_DisplayChar(110,40,'T');
 8000892:	2254      	movs	r2, #84	@ 0x54
 8000894:	2128      	movs	r1, #40	@ 0x28
 8000896:	206e      	movs	r0, #110	@ 0x6e
 8000898:	f000 fe20 	bl	80014dc <LCD_DisplayChar>
	LCD_DisplayChar(125,40,'R');
 800089c:	2252      	movs	r2, #82	@ 0x52
 800089e:	2128      	movs	r1, #40	@ 0x28
 80008a0:	207d      	movs	r0, #125	@ 0x7d
 80008a2:	f000 fe1b 	bl	80014dc <LCD_DisplayChar>
	LCD_DisplayChar(135,40,'I');
 80008a6:	2249      	movs	r2, #73	@ 0x49
 80008a8:	2128      	movs	r1, #40	@ 0x28
 80008aa:	2087      	movs	r0, #135	@ 0x87
 80008ac:	f000 fe16 	bl	80014dc <LCD_DisplayChar>
	LCD_DisplayChar(145,40,'S');
 80008b0:	2253      	movs	r2, #83	@ 0x53
 80008b2:	2128      	movs	r1, #40	@ 0x28
 80008b4:	2091      	movs	r0, #145	@ 0x91
 80008b6:	f000 fe11 	bl	80014dc <LCD_DisplayChar>

	// Start button
	LCD_DisplayChar(95,200,'S');
 80008ba:	2253      	movs	r2, #83	@ 0x53
 80008bc:	21c8      	movs	r1, #200	@ 0xc8
 80008be:	205f      	movs	r0, #95	@ 0x5f
 80008c0:	f000 fe0c 	bl	80014dc <LCD_DisplayChar>
	LCD_DisplayChar(105,200,'t');
 80008c4:	2274      	movs	r2, #116	@ 0x74
 80008c6:	21c8      	movs	r1, #200	@ 0xc8
 80008c8:	2069      	movs	r0, #105	@ 0x69
 80008ca:	f000 fe07 	bl	80014dc <LCD_DisplayChar>
	LCD_DisplayChar(115,200,'a');
 80008ce:	2261      	movs	r2, #97	@ 0x61
 80008d0:	21c8      	movs	r1, #200	@ 0xc8
 80008d2:	2073      	movs	r0, #115	@ 0x73
 80008d4:	f000 fe02 	bl	80014dc <LCD_DisplayChar>
	LCD_DisplayChar(125,200,'r');
 80008d8:	2272      	movs	r2, #114	@ 0x72
 80008da:	21c8      	movs	r1, #200	@ 0xc8
 80008dc:	207d      	movs	r0, #125	@ 0x7d
 80008de:	f000 fdfd 	bl	80014dc <LCD_DisplayChar>
	LCD_DisplayChar(132,200,'t');
 80008e2:	2274      	movs	r2, #116	@ 0x74
 80008e4:	21c8      	movs	r1, #200	@ 0xc8
 80008e6:	2084      	movs	r0, #132	@ 0x84
 80008e8:	f000 fdf8 	bl	80014dc <LCD_DisplayChar>
	LCD_Draw_Rectangle_Empty(70,160,100,100,LCD_COLOR_BLACK);
 80008ec:	2300      	movs	r3, #0
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2364      	movs	r3, #100	@ 0x64
 80008f2:	2264      	movs	r2, #100	@ 0x64
 80008f4:	21a0      	movs	r1, #160	@ 0xa0
 80008f6:	2046      	movs	r0, #70	@ 0x46
 80008f8:	f000 fad6 	bl	8000ea8 <LCD_Draw_Rectangle_Empty>
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <screen2>:

void screen2(void){
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af02      	add	r7, sp, #8
	//10 tall x 6 wide
	//30*10 = 300
	//30*6 = 180
	resetScreen();
 8000908:	f000 f810 	bl	800092c <resetScreen>

	// Border
	LCD_Draw_Rectangle_Empty(30,10,180,300,LCD_COLOR_BLACK);
 800090c:	2300      	movs	r3, #0
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000914:	22b4      	movs	r2, #180	@ 0xb4
 8000916:	210a      	movs	r1, #10
 8000918:	201e      	movs	r0, #30
 800091a:	f000 fac5 	bl	8000ea8 <LCD_Draw_Rectangle_Empty>

	// RNG (generate first block) (maybe unnecessary)
	generateBlock();
 800091e:	f000 f813 	bl	8000948 <generateBlock>

	// Timer
	Timer_StartInterrupt();
 8000922:	f000 fef7 	bl	8001714 <Timer_StartInterrupt>
	*/

	// Figure out block stacking & collision

	// Get time
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <resetScreen>:
	// Display time
	//String function working will be nice for this
	LCD_DisplayChar(80,40,'3');
}

void resetScreen(){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000930:	2000      	movs	r0, #0
 8000932:	f000 fd45 	bl	80013c0 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000936:	4803      	ldr	r0, [pc, #12]	@ (8000944 <resetScreen+0x18>)
 8000938:	f000 fd52 	bl	80013e0 <LCD_SetFont>
	clearScreen();
 800093c:	f000 f9a2 	bl	8000c84 <clearScreen>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000004 	.word	0x20000004

08000948 <generateBlock>:

// BLOCK LOGIC

void generateBlock(){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	RNG_Init();
 800094c:	f000 fe4a 	bl	80015e4 <RNG_Init>

	currentBlock = RNG_Generate() % 7;
 8000950:	f000 fe5e 	bl	8001610 <RNG_Generate>
 8000954:	4602      	mov	r2, r0
 8000956:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <generateBlock+0x38>)
 8000958:	fba3 1302 	umull	r1, r3, r3, r2
 800095c:	1ad1      	subs	r1, r2, r3
 800095e:	0849      	lsrs	r1, r1, #1
 8000960:	440b      	add	r3, r1
 8000962:	0899      	lsrs	r1, r3, #2
 8000964:	460b      	mov	r3, r1
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	1a5b      	subs	r3, r3, r1
 800096a:	1ad1      	subs	r1, r2, r3
 800096c:	b2ca      	uxtb	r2, r1
 800096e:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <generateBlock+0x3c>)
 8000970:	701a      	strb	r2, [r3, #0]
	drawBlock();
 8000972:	f000 f809 	bl	8000988 <drawBlock>

	RNG_DeInit();
 8000976:	f000 fe5f 	bl	8001638 <RNG_DeInit>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	24924925 	.word	0x24924925
 8000984:	200000b0 	.word	0x200000b0

08000988 <drawBlock>:

void drawBlock(){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	switch(currentBlock){
 800098c:	4b35      	ldr	r3, [pc, #212]	@ (8000a64 <drawBlock+0xdc>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b06      	cmp	r3, #6
 8000992:	d863      	bhi.n	8000a5c <drawBlock+0xd4>
 8000994:	a201      	add	r2, pc, #4	@ (adr r2, 800099c <drawBlock+0x14>)
 8000996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099a:	bf00      	nop
 800099c:	080009b9 	.word	0x080009b9
 80009a0:	080009cd 	.word	0x080009cd
 80009a4:	080009e5 	.word	0x080009e5
 80009a8:	080009fd 	.word	0x080009fd
 80009ac:	08000a15 	.word	0x08000a15
 80009b0:	08000a2d 	.word	0x08000a2d
 80009b4:	08000a45 	.word	0x08000a45
	case 0:
		LCD_Draw_OBlock(currentXpos,currentYpos);
 80009b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <drawBlock+0xe0>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <drawBlock+0xe4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4619      	mov	r1, r3
 80009c4:	4610      	mov	r0, r2
 80009c6:	f000 fac8 	bl	8000f5a <LCD_Draw_OBlock>
		break;
 80009ca:	e048      	b.n	8000a5e <drawBlock+0xd6>
	case 1:
		LCD_Draw_IBlock(currentXpos,currentYpos,currentOrientation);
 80009cc:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <drawBlock+0xe0>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <drawBlock+0xe4>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <drawBlock+0xe8>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	f000 fad1 	bl	8000f84 <LCD_Draw_IBlock>
		break;
 80009e2:	e03c      	b.n	8000a5e <drawBlock+0xd6>
	case 2:
		LCD_Draw_SBlock(currentXpos,currentYpos,currentOrientation);
 80009e4:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <drawBlock+0xe0>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <drawBlock+0xe4>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4619      	mov	r1, r3
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <drawBlock+0xe8>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	f000 faee 	bl	8000fd6 <LCD_Draw_SBlock>
		break;
 80009fa:	e030      	b.n	8000a5e <drawBlock+0xd6>
	case 3:
		LCD_Draw_ZBlock(currentXpos,currentYpos,currentOrientation);
 80009fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <drawBlock+0xe0>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <drawBlock+0xe4>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <drawBlock+0xe8>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	f000 fb25 	bl	800105c <LCD_Draw_ZBlock>
		break;
 8000a12:	e024      	b.n	8000a5e <drawBlock+0xd6>
	case 4:
		LCD_Draw_LBlock(currentXpos,currentYpos,currentOrientation);
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <drawBlock+0xe0>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <drawBlock+0xe4>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <drawBlock+0xe8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	f000 fb5d 	bl	80010e4 <LCD_Draw_LBlock>
		break;
 8000a2a:	e018      	b.n	8000a5e <drawBlock+0xd6>
	case 5:
		LCD_Draw_JBlock(currentXpos,currentYpos,currentOrientation);
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <drawBlock+0xe0>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <drawBlock+0xe4>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4619      	mov	r1, r3
 8000a38:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <drawBlock+0xe8>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	f000 fbcb 	bl	80011d8 <LCD_Draw_JBlock>
		break;
 8000a42:	e00c      	b.n	8000a5e <drawBlock+0xd6>
	case 6:
		LCD_Draw_TBlock(currentXpos,currentYpos,currentOrientation);
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <drawBlock+0xe0>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <drawBlock+0xe4>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <drawBlock+0xe8>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	f000 fc37 	bl	80012c8 <LCD_Draw_TBlock>
		break;
 8000a5a:	e000      	b.n	8000a5e <drawBlock+0xd6>
	default:
		break;
 8000a5c:	bf00      	nop
	}
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000b0 	.word	0x200000b0
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000001 	.word	0x20000001
 8000a70:	200000b1 	.word	0x200000b1

08000a74 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	@ 0x30
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
 8000a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	4a59      	ldr	r2, [pc, #356]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000a84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8a:	4b57      	ldr	r3, [pc, #348]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	4b53      	ldr	r3, [pc, #332]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a52      	ldr	r2, [pc, #328]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b50      	ldr	r3, [pc, #320]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a4b      	ldr	r2, [pc, #300]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b49      	ldr	r3, [pc, #292]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b45      	ldr	r3, [pc, #276]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a44      	ldr	r2, [pc, #272]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b42      	ldr	r3, [pc, #264]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	4b3e      	ldr	r3, [pc, #248]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a3d      	ldr	r2, [pc, #244]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b3b      	ldr	r3, [pc, #236]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a36      	ldr	r2, [pc, #216]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000b10:	f043 0320 	orr.w	r3, r3, #32
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0320 	and.w	r3, r3, #32
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b30      	ldr	r3, [pc, #192]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <LCD_GPIO_Init+0x174>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000b3e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000b42:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000b50:	230e      	movs	r3, #14
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4824      	ldr	r0, [pc, #144]	@ (8000bec <LCD_GPIO_Init+0x178>)
 8000b5c:	f002 fa6e 	bl	800303c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000b60:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000b64:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4820      	ldr	r0, [pc, #128]	@ (8000bf0 <LCD_GPIO_Init+0x17c>)
 8000b6e:	f002 fa65 	bl	800303c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000b72:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481d      	ldr	r0, [pc, #116]	@ (8000bf4 <LCD_GPIO_Init+0x180>)
 8000b80:	f002 fa5c 	bl	800303c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000b84:	2348      	movs	r3, #72	@ 0x48
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481a      	ldr	r0, [pc, #104]	@ (8000bf8 <LCD_GPIO_Init+0x184>)
 8000b90:	f002 fa54 	bl	800303c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000b94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4816      	ldr	r0, [pc, #88]	@ (8000bfc <LCD_GPIO_Init+0x188>)
 8000ba2:	f002 fa4b 	bl	800303c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000ba6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000baa:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4813      	ldr	r0, [pc, #76]	@ (8000c00 <LCD_GPIO_Init+0x18c>)
 8000bb4:	f002 fa42 	bl	800303c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000bbc:	2309      	movs	r3, #9
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480a      	ldr	r0, [pc, #40]	@ (8000bf0 <LCD_GPIO_Init+0x17c>)
 8000bc8:	f002 fa38 	bl	800303c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000bcc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4809      	ldr	r0, [pc, #36]	@ (8000c00 <LCD_GPIO_Init+0x18c>)
 8000bda:	f002 fa2f 	bl	800303c <HAL_GPIO_Init>
}
 8000bde:	bf00      	nop
 8000be0:	3730      	adds	r7, #48	@ 0x30
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	40020c00 	.word	0x40020c00
 8000bfc:	40021400 	.word	0x40021400
 8000c00:	40021800 	.word	0x40021800

08000c04 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b090      	sub	sp, #64	@ 0x40
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000c12:	23f0      	movs	r3, #240	@ 0xf0
 8000c14:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000c1a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c1e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000c24:	23ff      	movs	r3, #255	@ 0xff
 8000c26:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c30:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c32:	2305      	movs	r3, #5
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <LTCD_Layer_Init+0x78>)
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000c40:	23f0      	movs	r3, #240	@ 0xf0
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000c44:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c48:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000c5c:	79fa      	ldrb	r2, [r7, #7]
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <LTCD_Layer_Init+0x7c>)
 8000c66:	f003 fdd3 	bl	8004810 <HAL_LTDC_ConfigLayer>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000c70:	f000 fc56 	bl	8001520 <LCD_Error_Handler>
	}
}
 8000c74:	bf00      	nop
 8000c76:	3740      	adds	r7, #64	@ 0x40
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000190 	.word	0x20000190
 8000c80:	200000b4 	.word	0x200000b4

08000c84 <clearScreen>:

void clearScreen(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  LCD_Clear(0,LCD_COLOR_WHITE);
 8000c88:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 f8d5 	bl	8000e3c <LCD_Clear>
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <LTCD__Init>:

void LTCD__Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d48 <LTCD__Init+0xb0>)
 8000c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8000d4c <LTCD__Init+0xb4>)
 8000ca0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ca2:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <LTCD__Init+0xb0>)
 8000ca4:	2209      	movs	r2, #9
 8000ca6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	@ (8000d48 <LTCD__Init+0xb0>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000cae:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <LTCD__Init+0xb0>)
 8000cb0:	221d      	movs	r2, #29
 8000cb2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <LTCD__Init+0xb0>)
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <LTCD__Init+0xb0>)
 8000cbc:	f240 120d 	movw	r2, #269	@ 0x10d
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <LTCD__Init+0xb0>)
 8000cc4:	f240 1243 	movw	r2, #323	@ 0x143
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <LTCD__Init+0xb0>)
 8000ccc:	f240 1217 	movw	r2, #279	@ 0x117
 8000cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <LTCD__Init+0xb0>)
 8000cd4:	f240 1247 	movw	r2, #327	@ 0x147
 8000cd8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <LTCD__Init+0xb0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <LTCD__Init+0xb0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000cea:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <LTCD__Init+0xb0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <LTCD__Init+0xb8>)
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <LTCD__Init+0xb8>)
 8000cfa:	22c0      	movs	r2, #192	@ 0xc0
 8000cfc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <LTCD__Init+0xb8>)
 8000d00:	2204      	movs	r2, #4
 8000d02:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <LTCD__Init+0xb8>)
 8000d06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d0a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d0c:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <LTCD__Init+0xb8>)
 8000d0e:	f004 fbd9 	bl	80054c4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d12:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <LTCD__Init+0xb0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <LTCD__Init+0xb0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <LTCD__Init+0xb0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <LTCD__Init+0xb0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000d2a:	f7ff fea3 	bl	8000a74 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d2e:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <LTCD__Init+0xb0>)
 8000d30:	f003 fc9e 	bl	8004670 <HAL_LTDC_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000d3a:	f000 fbf1 	bl	8001520 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000d3e:	f000 fd15 	bl	800176c <ili9341_Init>
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200000b4 	.word	0x200000b4
 8000d4c:	40016800 	.word	0x40016800
 8000d50:	2000015c 	.word	0x2000015c

08000d54 <LCD_Draw_Pixel>:
/*
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	80bb      	strh	r3, [r7, #4]
 8000d62:	4613      	mov	r3, r2
 8000d64:	807b      	strh	r3, [r7, #2]
	if(x < 0 || x > 239 || y < 0 || y > 319){
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	2bef      	cmp	r3, #239	@ 0xef
 8000d6a:	d810      	bhi.n	8000d8e <LCD_Draw_Pixel+0x3a>
 8000d6c:	88bb      	ldrh	r3, [r7, #4]
 8000d6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000d72:	d20c      	bcs.n	8000d8e <LCD_Draw_Pixel+0x3a>
		return;
	}
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000d74:	88ba      	ldrh	r2, [r7, #4]
 8000d76:	4613      	mov	r3, r2
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	1a9b      	subs	r3, r3, r2
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	461a      	mov	r2, r3
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4413      	add	r3, r2
 8000d84:	4905      	ldr	r1, [pc, #20]	@ (8000d9c <LCD_Draw_Pixel+0x48>)
 8000d86:	887a      	ldrh	r2, [r7, #2]
 8000d88:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000d8c:	e000      	b.n	8000d90 <LCD_Draw_Pixel+0x3c>
		return;
 8000d8e:	bf00      	nop
}
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000190 	.word	0x20000190

08000da0 <LCD_Draw_Vertical_Line>:
            }
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color){
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4604      	mov	r4, r0
 8000da8:	4608      	mov	r0, r1
 8000daa:	4611      	mov	r1, r2
 8000dac:	461a      	mov	r2, r3
 8000dae:	4623      	mov	r3, r4
 8000db0:	80fb      	strh	r3, [r7, #6]
 8000db2:	4603      	mov	r3, r0
 8000db4:	80bb      	strh	r3, [r7, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	807b      	strh	r3, [r7, #2]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++){
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	81fb      	strh	r3, [r7, #14]
 8000dc2:	e00b      	b.n	8000ddc <LCD_Draw_Vertical_Line+0x3c>
		LCD_Draw_Pixel(x, i+y, color);
 8000dc4:	89fa      	ldrh	r2, [r7, #14]
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b299      	uxth	r1, r3
 8000dcc:	883a      	ldrh	r2, [r7, #0]
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ffbf 	bl	8000d54 <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++){
 8000dd6:	89fb      	ldrh	r3, [r7, #14]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	81fb      	strh	r3, [r7, #14]
 8000ddc:	89fa      	ldrh	r2, [r7, #14]
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d3ef      	bcc.n	8000dc4 <LCD_Draw_Vertical_Line+0x24>
	}
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}

08000dee <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color){
 8000dee:	b590      	push	{r4, r7, lr}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4604      	mov	r4, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4611      	mov	r1, r2
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	80fb      	strh	r3, [r7, #6]
 8000e00:	4603      	mov	r3, r0
 8000e02:	80bb      	strh	r3, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	81fb      	strh	r3, [r7, #14]
 8000e10:	e00b      	b.n	8000e2a <LCD_Draw_Horizontal_Line+0x3c>
		LCD_Draw_Pixel(i+x, y, color);
 8000e12:	89fa      	ldrh	r2, [r7, #14]
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	4413      	add	r3, r2
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	883a      	ldrh	r2, [r7, #0]
 8000e1c:	88b9      	ldrh	r1, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff98 	bl	8000d54 <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++){
 8000e24:	89fb      	ldrh	r3, [r7, #14]
 8000e26:	3301      	adds	r3, #1
 8000e28:	81fb      	strh	r3, [r7, #14]
 8000e2a:	89fa      	ldrh	r2, [r7, #14]
 8000e2c:	887b      	ldrh	r3, [r7, #2]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3ef      	bcc.n	8000e12 <LCD_Draw_Horizontal_Line+0x24>
	}
}
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}

08000e3c <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color){
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	460a      	mov	r2, r1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	80bb      	strh	r3, [r7, #4]
	if(LayerIndex == 0){
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10f      	bne.n	8000e72 <LCD_Clear+0x36>
		for(uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	e007      	b.n	8000e68 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000e58:	4912      	ldr	r1, [pc, #72]	@ (8000ea4 <LCD_Clear+0x68>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	88ba      	ldrh	r2, [r7, #4]
 8000e5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3301      	adds	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000e6e:	d3f3      	bcc.n	8000e58 <LCD_Clear+0x1c>
			frameBuffer[i] = Color;
		}
	}
	// What differentiates different layers?
	// Can you tag each pixel with a certain layer?
}
 8000e70:	e011      	b.n	8000e96 <LCD_Clear+0x5a>
	else if(LayerIndex == 1){
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d10e      	bne.n	8000e96 <LCD_Clear+0x5a>
		for(uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	e007      	b.n	8000e8e <LCD_Clear+0x52>
			frameBuffer[i] = Color;
 8000e7e:	4909      	ldr	r1, [pc, #36]	@ (8000ea4 <LCD_Clear+0x68>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	88ba      	ldrh	r2, [r7, #4]
 8000e84:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000e94:	d3f3      	bcc.n	8000e7e <LCD_Clear+0x42>
}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000190 	.word	0x20000190

08000ea8 <LCD_Draw_Rectangle_Empty>:

void LCD_Draw_Rectangle_Empty(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80bb      	strh	r3, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	803b      	strh	r3, [r7, #0]
	LCD_Draw_Vertical_Line(Xpos,Ypos,height,color);
 8000ec6:	8b3b      	ldrh	r3, [r7, #24]
 8000ec8:	883a      	ldrh	r2, [r7, #0]
 8000eca:	88b9      	ldrh	r1, [r7, #4]
 8000ecc:	88f8      	ldrh	r0, [r7, #6]
 8000ece:	f7ff ff67 	bl	8000da0 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(Xpos+len,Ypos,height,color);
 8000ed2:	88fa      	ldrh	r2, [r7, #6]
 8000ed4:	887b      	ldrh	r3, [r7, #2]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b298      	uxth	r0, r3
 8000eda:	8b3b      	ldrh	r3, [r7, #24]
 8000edc:	883a      	ldrh	r2, [r7, #0]
 8000ede:	88b9      	ldrh	r1, [r7, #4]
 8000ee0:	f7ff ff5e 	bl	8000da0 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos,len,color);
 8000ee4:	8b3b      	ldrh	r3, [r7, #24]
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	88b9      	ldrh	r1, [r7, #4]
 8000eea:	88f8      	ldrh	r0, [r7, #6]
 8000eec:	f7ff ff7f 	bl	8000dee <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos+height,len,color);
 8000ef0:	88ba      	ldrh	r2, [r7, #4]
 8000ef2:	883b      	ldrh	r3, [r7, #0]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b299      	uxth	r1, r3
 8000ef8:	8b3b      	ldrh	r3, [r7, #24]
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	88f8      	ldrh	r0, [r7, #6]
 8000efe:	f7ff ff76 	bl	8000dee <LCD_Draw_Horizontal_Line>
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd90      	pop	{r4, r7, pc}

08000f0a <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 8000f0a:	b590      	push	{r4, r7, lr}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4604      	mov	r4, r0
 8000f12:	4608      	mov	r0, r1
 8000f14:	4611      	mov	r1, r2
 8000f16:	461a      	mov	r2, r3
 8000f18:	4623      	mov	r3, r4
 8000f1a:	80fb      	strh	r3, [r7, #6]
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	80bb      	strh	r3, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	803b      	strh	r3, [r7, #0]
	for(int i = 0; i < len; i++){
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	e00c      	b.n	8000f48 <LCD_Draw_Rectangle_Fill+0x3e>
		//Draw a bunch of vertical lines from left to right
		LCD_Draw_Vertical_Line(Xpos+i,Ypos,height,color);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	4413      	add	r3, r2
 8000f36:	b298      	uxth	r0, r3
 8000f38:	8c3b      	ldrh	r3, [r7, #32]
 8000f3a:	883a      	ldrh	r2, [r7, #0]
 8000f3c:	88b9      	ldrh	r1, [r7, #4]
 8000f3e:	f7ff ff2f 	bl	8000da0 <LCD_Draw_Vertical_Line>
	for(int i = 0; i < len; i++){
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3301      	adds	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	887b      	ldrh	r3, [r7, #2]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbee      	blt.n	8000f2e <LCD_Draw_Rectangle_Fill+0x24>
	}
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}

08000f5a <LCD_Draw_OBlock>:

void LCD_Draw_OBlock(uint16_t Xpos, uint16_t Ypos){
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af02      	add	r7, sp, #8
 8000f60:	4603      	mov	r3, r0
 8000f62:	460a      	mov	r2, r1
 8000f64:	80fb      	strh	r3, [r7, #6]
 8000f66:	4613      	mov	r3, r2
 8000f68:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH*2,LCD_COLOR_YELLOW);
 8000f6a:	88b9      	ldrh	r1, [r7, #4]
 8000f6c:	88f8      	ldrh	r0, [r7, #6]
 8000f6e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	233c      	movs	r3, #60	@ 0x3c
 8000f76:	223c      	movs	r2, #60	@ 0x3c
 8000f78:	f7ff ffc7 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <LCD_Draw_IBlock>:
void LCD_Draw_IBlock(uint16_t Xpos, uint16_t Ypos, uint8_t orientation){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	80bb      	strh	r3, [r7, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	70fb      	strb	r3, [r7, #3]
	switch(orientation % 2){
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <LCD_Draw_IBlock+0x22>
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d00a      	beq.n	8000fba <LCD_Draw_IBlock+0x36>
		break;
	case 1:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*4,BLOCK_LENGTH,LCD_COLOR_CYAN);
		break;
	default:
		break;
 8000fa4:	e013      	b.n	8000fce <LCD_Draw_IBlock+0x4a>
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*4,LCD_COLOR_CYAN);
 8000fa6:	88b9      	ldrh	r1, [r7, #4]
 8000fa8:	88f8      	ldrh	r0, [r7, #6]
 8000faa:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2378      	movs	r3, #120	@ 0x78
 8000fb2:	221e      	movs	r2, #30
 8000fb4:	f7ff ffa9 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 8000fb8:	e009      	b.n	8000fce <LCD_Draw_IBlock+0x4a>
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*4,BLOCK_LENGTH,LCD_COLOR_CYAN);
 8000fba:	88b9      	ldrh	r1, [r7, #4]
 8000fbc:	88f8      	ldrh	r0, [r7, #6]
 8000fbe:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	231e      	movs	r3, #30
 8000fc6:	2278      	movs	r2, #120	@ 0x78
 8000fc8:	f7ff ff9f 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 8000fcc:	bf00      	nop
	}
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <LCD_Draw_SBlock>:
void LCD_Draw_SBlock(uint16_t Xpos, uint16_t Ypos, uint8_t orientation){
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af02      	add	r7, sp, #8
 8000fdc:	4603      	mov	r3, r0
 8000fde:	80fb      	strh	r3, [r7, #6]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	80bb      	strh	r3, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	70fb      	strb	r3, [r7, #3]
	switch(orientation % 2){
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <LCD_Draw_SBlock+0x22>
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d017      	beq.n	8001026 <LCD_Draw_SBlock+0x50>
	case 1:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*2,LCD_COLOR_RED);
		LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH*2,LCD_COLOR_RED);
		break;
	default:
		break;
 8000ff6:	e02d      	b.n	8001054 <LCD_Draw_SBlock+0x7e>
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_RED);
 8000ff8:	88b9      	ldrh	r1, [r7, #4]
 8000ffa:	88f8      	ldrh	r0, [r7, #6]
 8000ffc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	231e      	movs	r3, #30
 8001004:	223c      	movs	r2, #60	@ 0x3c
 8001006:	f7ff ff80 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_RED);
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	3b1e      	subs	r3, #30
 800100e:	b298      	uxth	r0, r3
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	331e      	adds	r3, #30
 8001014:	b299      	uxth	r1, r3
 8001016:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	231e      	movs	r3, #30
 800101e:	223c      	movs	r2, #60	@ 0x3c
 8001020:	f7ff ff73 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 8001024:	e016      	b.n	8001054 <LCD_Draw_SBlock+0x7e>
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*2,LCD_COLOR_RED);
 8001026:	88b9      	ldrh	r1, [r7, #4]
 8001028:	88f8      	ldrh	r0, [r7, #6]
 800102a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	233c      	movs	r3, #60	@ 0x3c
 8001032:	221e      	movs	r2, #30
 8001034:	f7ff ff69 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH*2,LCD_COLOR_RED);
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	331e      	adds	r3, #30
 800103c:	b298      	uxth	r0, r3
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	331e      	adds	r3, #30
 8001042:	b299      	uxth	r1, r3
 8001044:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	233c      	movs	r3, #60	@ 0x3c
 800104c:	221e      	movs	r2, #30
 800104e:	f7ff ff5c 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 8001052:	bf00      	nop
	}
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <LCD_Draw_ZBlock>:
void LCD_Draw_ZBlock(uint16_t Xpos, uint16_t Ypos, uint8_t orientation){
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af02      	add	r7, sp, #8
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
 8001066:	460b      	mov	r3, r1
 8001068:	80bb      	strh	r3, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	70fb      	strb	r3, [r7, #3]
	switch(orientation % 2){
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <LCD_Draw_ZBlock+0x22>
 8001078:	2b01      	cmp	r3, #1
 800107a:	d017      	beq.n	80010ac <LCD_Draw_ZBlock+0x50>
	case 1:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*2,LCD_COLOR_GREEN);
		LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH*2,LCD_COLOR_GREEN);
		break;
	default:
		break;
 800107c:	e02d      	b.n	80010da <LCD_Draw_ZBlock+0x7e>
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_GREEN);
 800107e:	88b9      	ldrh	r1, [r7, #4]
 8001080:	88f8      	ldrh	r0, [r7, #6]
 8001082:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	231e      	movs	r3, #30
 800108a:	223c      	movs	r2, #60	@ 0x3c
 800108c:	f7ff ff3d 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_GREEN);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	331e      	adds	r3, #30
 8001094:	b298      	uxth	r0, r3
 8001096:	88bb      	ldrh	r3, [r7, #4]
 8001098:	331e      	adds	r3, #30
 800109a:	b299      	uxth	r1, r3
 800109c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	231e      	movs	r3, #30
 80010a4:	223c      	movs	r2, #60	@ 0x3c
 80010a6:	f7ff ff30 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 80010aa:	e016      	b.n	80010da <LCD_Draw_ZBlock+0x7e>
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*2,LCD_COLOR_GREEN);
 80010ac:	88b9      	ldrh	r1, [r7, #4]
 80010ae:	88f8      	ldrh	r0, [r7, #6]
 80010b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	233c      	movs	r3, #60	@ 0x3c
 80010b8:	221e      	movs	r2, #30
 80010ba:	f7ff ff26 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH*2,LCD_COLOR_GREEN);
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	3b1e      	subs	r3, #30
 80010c2:	b298      	uxth	r0, r3
 80010c4:	88bb      	ldrh	r3, [r7, #4]
 80010c6:	331e      	adds	r3, #30
 80010c8:	b299      	uxth	r1, r3
 80010ca:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	233c      	movs	r3, #60	@ 0x3c
 80010d2:	221e      	movs	r2, #30
 80010d4:	f7ff ff19 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 80010d8:	bf00      	nop
	}
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <LCD_Draw_LBlock>:
void LCD_Draw_LBlock(uint16_t Xpos, uint16_t Ypos, uint8_t orientation){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	460b      	mov	r3, r1
 80010f0:	80bb      	strh	r3, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	70fb      	strb	r3, [r7, #3]
	switch(orientation % 4){
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d865      	bhi.n	80011cc <LCD_Draw_LBlock+0xe8>
 8001100:	a201      	add	r2, pc, #4	@ (adr r2, 8001108 <LCD_Draw_LBlock+0x24>)
 8001102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001106:	bf00      	nop
 8001108:	08001119 	.word	0x08001119
 800110c:	08001147 	.word	0x08001147
 8001110:	08001171 	.word	0x08001171
 8001114:	0800119f 	.word	0x0800119f
	case 0:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_ORANGE);
 8001118:	88b9      	ldrh	r1, [r7, #4]
 800111a:	88f8      	ldrh	r0, [r7, #6]
 800111c:	f64f 53ce 	movw	r3, #64974	@ 0xfdce
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	235a      	movs	r3, #90	@ 0x5a
 8001124:	221e      	movs	r2, #30
 8001126:	f7ff fef0 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+(BLOCK_LENGTH*2),BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_ORANGE);
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	331e      	adds	r3, #30
 800112e:	b298      	uxth	r0, r3
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	333c      	adds	r3, #60	@ 0x3c
 8001134:	b299      	uxth	r1, r3
 8001136:	f64f 53ce 	movw	r3, #64974	@ 0xfdce
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	231e      	movs	r3, #30
 800113e:	221e      	movs	r2, #30
 8001140:	f7ff fee3 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 8001144:	e043      	b.n	80011ce <LCD_Draw_LBlock+0xea>
	case 1:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*3,BLOCK_LENGTH,LCD_COLOR_ORANGE);
 8001146:	88b9      	ldrh	r1, [r7, #4]
 8001148:	88f8      	ldrh	r0, [r7, #6]
 800114a:	f64f 53ce 	movw	r3, #64974	@ 0xfdce
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	231e      	movs	r3, #30
 8001152:	225a      	movs	r2, #90	@ 0x5a
 8001154:	f7ff fed9 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_ORANGE);
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	331e      	adds	r3, #30
 800115c:	b299      	uxth	r1, r3
 800115e:	88f8      	ldrh	r0, [r7, #6]
 8001160:	f64f 53ce 	movw	r3, #64974	@ 0xfdce
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	231e      	movs	r3, #30
 8001168:	221e      	movs	r2, #30
 800116a:	f7ff fece 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 800116e:	e02e      	b.n	80011ce <LCD_Draw_LBlock+0xea>
	case 2:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_ORANGE);
 8001170:	88b9      	ldrh	r1, [r7, #4]
 8001172:	88f8      	ldrh	r0, [r7, #6]
 8001174:	f64f 53ce 	movw	r3, #64974	@ 0xfdce
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	231e      	movs	r3, #30
 800117c:	223c      	movs	r2, #60	@ 0x3c
 800117e:	f7ff fec4 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH*2,LCD_COLOR_ORANGE);
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	331e      	adds	r3, #30
 8001186:	b298      	uxth	r0, r3
 8001188:	88bb      	ldrh	r3, [r7, #4]
 800118a:	331e      	adds	r3, #30
 800118c:	b299      	uxth	r1, r3
 800118e:	f64f 53ce 	movw	r3, #64974	@ 0xfdce
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	233c      	movs	r3, #60	@ 0x3c
 8001196:	221e      	movs	r2, #30
 8001198:	f7ff feb7 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 800119c:	e017      	b.n	80011ce <LCD_Draw_LBlock+0xea>
	case 3:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*3,BLOCK_LENGTH,LCD_COLOR_ORANGE);
 800119e:	88b9      	ldrh	r1, [r7, #4]
 80011a0:	88f8      	ldrh	r0, [r7, #6]
 80011a2:	f64f 53ce 	movw	r3, #64974	@ 0xfdce
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	231e      	movs	r3, #30
 80011aa:	225a      	movs	r2, #90	@ 0x5a
 80011ac:	f7ff fead 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos+(BLOCK_LENGTH*2),Ypos-BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_ORANGE);
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	333c      	adds	r3, #60	@ 0x3c
 80011b4:	b298      	uxth	r0, r3
 80011b6:	88bb      	ldrh	r3, [r7, #4]
 80011b8:	3b1e      	subs	r3, #30
 80011ba:	b299      	uxth	r1, r3
 80011bc:	f64f 53ce 	movw	r3, #64974	@ 0xfdce
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	231e      	movs	r3, #30
 80011c4:	221e      	movs	r2, #30
 80011c6:	f7ff fea0 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 80011ca:	e000      	b.n	80011ce <LCD_Draw_LBlock+0xea>
	default:
		break;
 80011cc:	bf00      	nop
	}
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop

080011d8 <LCD_Draw_JBlock>:
void LCD_Draw_JBlock(uint16_t Xpos, uint16_t Ypos, uint8_t orientation){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af02      	add	r7, sp, #8
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
 80011e2:	460b      	mov	r3, r1
 80011e4:	80bb      	strh	r3, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	70fb      	strb	r3, [r7, #3]
	switch(orientation % 4){
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d863      	bhi.n	80012bc <LCD_Draw_JBlock+0xe4>
 80011f4:	a201      	add	r2, pc, #4	@ (adr r2, 80011fc <LCD_Draw_JBlock+0x24>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	0800120d 	.word	0x0800120d
 8001200:	0800123b 	.word	0x0800123b
 8001204:	08001265 	.word	0x08001265
 8001208:	0800128f 	.word	0x0800128f
	case 0:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_PINK);
 800120c:	88b9      	ldrh	r1, [r7, #4]
 800120e:	88f8      	ldrh	r0, [r7, #6]
 8001210:	f64f 43b5 	movw	r3, #64693	@ 0xfcb5
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	235a      	movs	r3, #90	@ 0x5a
 8001218:	221e      	movs	r2, #30
 800121a:	f7ff fe76 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+(BLOCK_LENGTH*2),BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_PINK);
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	3b1e      	subs	r3, #30
 8001222:	b298      	uxth	r0, r3
 8001224:	88bb      	ldrh	r3, [r7, #4]
 8001226:	333c      	adds	r3, #60	@ 0x3c
 8001228:	b299      	uxth	r1, r3
 800122a:	f64f 43b5 	movw	r3, #64693	@ 0xfcb5
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	231e      	movs	r3, #30
 8001232:	221e      	movs	r2, #30
 8001234:	f7ff fe69 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 8001238:	e041      	b.n	80012be <LCD_Draw_JBlock+0xe6>
	case 1:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*3,BLOCK_LENGTH,LCD_COLOR_PINK);
 800123a:	88b9      	ldrh	r1, [r7, #4]
 800123c:	88f8      	ldrh	r0, [r7, #6]
 800123e:	f64f 43b5 	movw	r3, #64693	@ 0xfcb5
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	231e      	movs	r3, #30
 8001246:	225a      	movs	r2, #90	@ 0x5a
 8001248:	f7ff fe5f 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos,Ypos-BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_PINK);
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	3b1e      	subs	r3, #30
 8001250:	b299      	uxth	r1, r3
 8001252:	88f8      	ldrh	r0, [r7, #6]
 8001254:	f64f 43b5 	movw	r3, #64693	@ 0xfcb5
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	231e      	movs	r3, #30
 800125c:	221e      	movs	r2, #30
 800125e:	f7ff fe54 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 8001262:	e02c      	b.n	80012be <LCD_Draw_JBlock+0xe6>
	case 2:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_PINK);
 8001264:	88b9      	ldrh	r1, [r7, #4]
 8001266:	88f8      	ldrh	r0, [r7, #6]
 8001268:	f64f 43b5 	movw	r3, #64693	@ 0xfcb5
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	235a      	movs	r3, #90	@ 0x5a
 8001270:	221e      	movs	r2, #30
 8001272:	f7ff fe4a 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_PINK);
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	331e      	adds	r3, #30
 800127a:	b298      	uxth	r0, r3
 800127c:	88b9      	ldrh	r1, [r7, #4]
 800127e:	f64f 43b5 	movw	r3, #64693	@ 0xfcb5
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	231e      	movs	r3, #30
 8001286:	221e      	movs	r2, #30
 8001288:	f7ff fe3f 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 800128c:	e017      	b.n	80012be <LCD_Draw_JBlock+0xe6>
	case 3:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*3,BLOCK_LENGTH,LCD_COLOR_PINK);
 800128e:	88b9      	ldrh	r1, [r7, #4]
 8001290:	88f8      	ldrh	r0, [r7, #6]
 8001292:	f64f 43b5 	movw	r3, #64693	@ 0xfcb5
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	231e      	movs	r3, #30
 800129a:	225a      	movs	r2, #90	@ 0x5a
 800129c:	f7ff fe35 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos+(BLOCK_LENGTH+2),Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_PINK);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	3320      	adds	r3, #32
 80012a4:	b298      	uxth	r0, r3
 80012a6:	88bb      	ldrh	r3, [r7, #4]
 80012a8:	331e      	adds	r3, #30
 80012aa:	b299      	uxth	r1, r3
 80012ac:	f64f 43b5 	movw	r3, #64693	@ 0xfcb5
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	231e      	movs	r3, #30
 80012b4:	221e      	movs	r2, #30
 80012b6:	f7ff fe28 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 80012ba:	e000      	b.n	80012be <LCD_Draw_JBlock+0xe6>
	default:
		break;
 80012bc:	bf00      	nop
	}
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop

080012c8 <LCD_Draw_TBlock>:
void LCD_Draw_TBlock(uint16_t Xpos, uint16_t Ypos, uint8_t orientation){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
 80012d2:	460b      	mov	r3, r1
 80012d4:	80bb      	strh	r3, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	70fb      	strb	r3, [r7, #3]
	switch(orientation % 4){
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d867      	bhi.n	80013b4 <LCD_Draw_TBlock+0xec>
 80012e4:	a201      	add	r2, pc, #4	@ (adr r2, 80012ec <LCD_Draw_TBlock+0x24>)
 80012e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ea:	bf00      	nop
 80012ec:	080012fd 	.word	0x080012fd
 80012f0:	0800132b 	.word	0x0800132b
 80012f4:	08001359 	.word	0x08001359
 80012f8:	08001387 	.word	0x08001387
	case 0:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*3,BLOCK_LENGTH,LCD_COLOR_PURPLE);
 80012fc:	88b9      	ldrh	r1, [r7, #4]
 80012fe:	88f8      	ldrh	r0, [r7, #6]
 8001300:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	231e      	movs	r3, #30
 8001308:	225a      	movs	r2, #90	@ 0x5a
 800130a:	f7ff fdfe 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_PURPLE);
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	331e      	adds	r3, #30
 8001312:	b298      	uxth	r0, r3
 8001314:	88bb      	ldrh	r3, [r7, #4]
 8001316:	331e      	adds	r3, #30
 8001318:	b299      	uxth	r1, r3
 800131a:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	231e      	movs	r3, #30
 8001322:	221e      	movs	r2, #30
 8001324:	f7ff fdf1 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 8001328:	e045      	b.n	80013b6 <LCD_Draw_TBlock+0xee>
	case 1:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_PURPLE);
 800132a:	88b9      	ldrh	r1, [r7, #4]
 800132c:	88f8      	ldrh	r0, [r7, #6]
 800132e:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	235a      	movs	r3, #90	@ 0x5a
 8001336:	221e      	movs	r2, #30
 8001338:	f7ff fde7 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_PURPLE);
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	3b1e      	subs	r3, #30
 8001340:	b298      	uxth	r0, r3
 8001342:	88bb      	ldrh	r3, [r7, #4]
 8001344:	331e      	adds	r3, #30
 8001346:	b299      	uxth	r1, r3
 8001348:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	231e      	movs	r3, #30
 8001350:	221e      	movs	r2, #30
 8001352:	f7ff fdda 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 8001356:	e02e      	b.n	80013b6 <LCD_Draw_TBlock+0xee>
	case 2:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*3,BLOCK_LENGTH,LCD_COLOR_PURPLE);
 8001358:	88b9      	ldrh	r1, [r7, #4]
 800135a:	88f8      	ldrh	r0, [r7, #6]
 800135c:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	231e      	movs	r3, #30
 8001364:	225a      	movs	r2, #90	@ 0x5a
 8001366:	f7ff fdd0 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos-BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_PURPLE);
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	331e      	adds	r3, #30
 800136e:	b298      	uxth	r0, r3
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	3b1e      	subs	r3, #30
 8001374:	b299      	uxth	r1, r3
 8001376:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	231e      	movs	r3, #30
 800137e:	221e      	movs	r2, #30
 8001380:	f7ff fdc3 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 8001384:	e017      	b.n	80013b6 <LCD_Draw_TBlock+0xee>
	case 3:
		LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_PURPLE);
 8001386:	88b9      	ldrh	r1, [r7, #4]
 8001388:	88f8      	ldrh	r0, [r7, #6]
 800138a:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	235a      	movs	r3, #90	@ 0x5a
 8001392:	221e      	movs	r2, #30
 8001394:	f7ff fdb9 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_PURPLE);
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	331e      	adds	r3, #30
 800139c:	b298      	uxth	r0, r3
 800139e:	88bb      	ldrh	r3, [r7, #4]
 80013a0:	331e      	adds	r3, #30
 80013a2:	b299      	uxth	r1, r3
 80013a4:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	231e      	movs	r3, #30
 80013ac:	221e      	movs	r2, #30
 80013ae:	f7ff fdac 	bl	8000f0a <LCD_Draw_Rectangle_Fill>
		break;
 80013b2:	e000      	b.n	80013b6 <LCD_Draw_TBlock+0xee>
	default:
		break;
 80013b4:	bf00      	nop
	}
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop

080013c0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80013ca:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <LCD_SetTextColor+0x1c>)
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	8013      	strh	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	20000002 	.word	0x20000002

080013e0 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <LCD_SetFont+0x1c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	2000018c 	.word	0x2000018c

08001400 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	603a      	str	r2, [r7, #0]
 800140a:	80fb      	strh	r3, [r7, #6]
 800140c:	460b      	mov	r3, r1
 800140e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e04c      	b.n	80014b8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	e03f      	b.n	80014a4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	4413      	add	r3, r2
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	4619      	mov	r1, r3
 8001430:	4b27      	ldr	r3, [pc, #156]	@ (80014d0 <LCD_Draw_Char+0xd0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	889b      	ldrh	r3, [r3, #4]
 8001436:	4a27      	ldr	r2, [pc, #156]	@ (80014d4 <LCD_Draw_Char+0xd4>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	b29b      	uxth	r3, r3
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	2280      	movs	r2, #128	@ 0x80
 8001444:	409a      	lsls	r2, r3
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	fa42 f303 	asr.w	r3, r2, r3
 800144c:	400b      	ands	r3, r1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d104      	bne.n	800145c <LCD_Draw_Char+0x5c>
 8001452:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <LCD_Draw_Char+0xd0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	889b      	ldrh	r3, [r3, #4]
 8001458:	2b0c      	cmp	r3, #12
 800145a:	d920      	bls.n	800149e <LCD_Draw_Char+0x9e>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	4413      	add	r3, r2
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	fa42 f303 	asr.w	r3, r2, r3
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d104      	bne.n	8001480 <LCD_Draw_Char+0x80>
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <LCD_Draw_Char+0xd0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	889b      	ldrh	r3, [r3, #4]
 800147c:	2b0c      	cmp	r3, #12
 800147e:	d80e      	bhi.n	800149e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overwrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	b29a      	uxth	r2, r3
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	4413      	add	r3, r2
 8001488:	b298      	uxth	r0, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	b29a      	uxth	r2, r3
 800148e:	88bb      	ldrh	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	b29b      	uxth	r3, r3
 8001494:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <LCD_Draw_Char+0xd8>)
 8001496:	8812      	ldrh	r2, [r2, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff fc5b 	bl	8000d54 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3301      	adds	r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <LCD_Draw_Char+0xd0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	889b      	ldrh	r3, [r3, #4]
 80014aa:	461a      	mov	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d3b8      	bcc.n	8001424 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <LCD_Draw_Char+0xd0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	88db      	ldrh	r3, [r3, #6]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d3ab      	bcc.n	800141e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000018c 	.word	0x2000018c
 80014d4:	aaaaaaab 	.word	0xaaaaaaab
 80014d8:	20000002 	.word	0x20000002

080014dc <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
 80014e6:	460b      	mov	r3, r1
 80014e8:	80bb      	strh	r3, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	3b20      	subs	r3, #32
 80014f2:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <LCD_DisplayChar+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	4907      	ldr	r1, [pc, #28]	@ (800151c <LCD_DisplayChar+0x40>)
 80014fe:	6809      	ldr	r1, [r1, #0]
 8001500:	88c9      	ldrh	r1, [r1, #6]
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	441a      	add	r2, r3
 800150a:	88b9      	ldrh	r1, [r7, #4]
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff76 	bl	8001400 <LCD_Draw_Char>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000018c 	.word	0x2000018c

08001520 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <LCD_Error_Handler+0x8>

0800152c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001530:	f000 ff28 	bl	8002384 <STMPE811_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b02      	cmp	r3, #2
 8001538:	d001      	beq.n	800153e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialization
 800153a:	bf00      	nop
 800153c:	e7fd      	b.n	800153a <InitializeLCDTouch+0xe>
  }
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}

08001542 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f001 f804 	bl	8002558 <STMPE811_DetermineTouchPosition>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f000 ffd4 	bl	8002512 <STMPE811_Read>
 800156a:	4603      	mov	r3, r0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	4613      	mov	r3, r2
 8001582:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8001584:	79ba      	ldrb	r2, [r7, #6]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f000 ffd2 	bl	8002534 <STMPE811_Write>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <RNG_ClockControl>:

RNG_HandleTypeDef hrng;

// FUNCTIONS

void RNG_ClockControl(uint8_t enOrDis){
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	if(enOrDis == ENABLE){
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10e      	bne.n	80015c6 <RNG_ClockControl+0x2e>
		__HAL_RCC_RNG_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <RNG_ClockControl+0x48>)
 80015ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b0:	4a0b      	ldr	r2, [pc, #44]	@ (80015e0 <RNG_ClockControl+0x48>)
 80015b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80015b8:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <RNG_ClockControl+0x48>)
 80015ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
	}
	else{
		__HAL_RCC_RNG_CLK_DISABLE();
	}
}
 80015c4:	e005      	b.n	80015d2 <RNG_ClockControl+0x3a>
		__HAL_RCC_RNG_CLK_DISABLE();
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <RNG_ClockControl+0x48>)
 80015c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ca:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <RNG_ClockControl+0x48>)
 80015cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80015d0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <RNG_Init>:

void RNG_Init(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	hrng.Instance = RNG;
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <RNG_Init+0x24>)
 80015ea:	4a08      	ldr	r2, [pc, #32]	@ (800160c <RNG_Init+0x28>)
 80015ec:	601a      	str	r2, [r3, #0]

	RNG_ClockControl(ENABLE);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff ffd2 	bl	8001598 <RNG_ClockControl>
	RNG_Error_Handler(HAL_RNG_Init(&hrng));
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <RNG_Init+0x24>)
 80015f6:	f004 f925 	bl	8005844 <HAL_RNG_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 f82b 	bl	8001658 <RNG_Error_Handler>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20025990 	.word	0x20025990
 800160c:	50060800 	.word	0x50060800

08001610 <RNG_Generate>:

uint32_t RNG_Generate(){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	uint32_t num;
	RNG_Error_Handler(HAL_RNG_GenerateRandomNumber(&hrng, &num));
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	@ (8001634 <RNG_Generate+0x24>)
 800161c:	f004 f966 	bl	80058ec <HAL_RNG_GenerateRandomNumber>
 8001620:	4603      	mov	r3, r0
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f818 	bl	8001658 <RNG_Error_Handler>
	return num;
 8001628:	687b      	ldr	r3, [r7, #4]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20025990 	.word	0x20025990

08001638 <RNG_DeInit>:

void RNG_DeInit(){
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	RNG_Error_Handler(HAL_RNG_DeInit(&hrng));
 800163c:	4805      	ldr	r0, [pc, #20]	@ (8001654 <RNG_DeInit+0x1c>)
 800163e:	f004 f92b 	bl	8005898 <HAL_RNG_DeInit>
 8001642:	4603      	mov	r3, r0
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f807 	bl	8001658 <RNG_Error_Handler>
	RNG_ClockControl(DISABLE);
 800164a:	2000      	movs	r0, #0
 800164c:	f7ff ffa4 	bl	8001598 <RNG_ClockControl>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20025990 	.word	0x20025990

08001658 <RNG_Error_Handler>:

void RNG_Error_Handler(HAL_StatusTypeDef input){
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
	if(input != HAL_OK){
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <RNG_Error_Handler+0x14>
		for(;;);
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <RNG_Error_Handler+0x10>
	}
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <Timer_Init>:
TIM_HandleTypeDef htim7;


// FUNCTIONS

void Timer_Init(){
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	htim7.Instance = TIM7;
 800167c:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <Timer_Init+0x48>)
 800167e:	4a11      	ldr	r2, [pc, #68]	@ (80016c4 <Timer_Init+0x4c>)
 8001680:	601a      	str	r2, [r3, #0]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <Timer_Init+0x48>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
	htim7.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <Timer_Init+0x48>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
	htim7.Init.Period = PERIOD;
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <Timer_Init+0x48>)
 8001690:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001694:	60da      	str	r2, [r3, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <Timer_Init+0x48>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
	htim7.Init.Prescaler = PRESCALER;
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <Timer_Init+0x48>)
 800169e:	f241 3287 	movw	r2, #4999	@ 0x1387
 80016a2:	605a      	str	r2, [r3, #4]

	Timer_ClockControl(ENABLE);
 80016a4:	2001      	movs	r0, #1
 80016a6:	f000 f80f 	bl	80016c8 <Timer_ClockControl>
	Timer_Error_Handler(HAL_TIM_Base_Init(&htim7));
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <Timer_Init+0x48>)
 80016ac:	f004 fc54 	bl	8005f58 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f84a 	bl	800174c <Timer_Error_Handler>
	Timer_Reset();
 80016b8:	f000 f83a 	bl	8001730 <Timer_Reset>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200259a0 	.word	0x200259a0
 80016c4:	40001400 	.word	0x40001400

080016c8 <Timer_ClockControl>:

void Timer_ClockControl(uint8_t enOrDis){
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	if(enOrDis == ENABLE){
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d10e      	bne.n	80016f6 <Timer_ClockControl+0x2e>
		__HAL_RCC_TIM7_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <Timer_ClockControl+0x48>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <Timer_ClockControl+0x48>)
 80016e2:	f043 0320 	orr.w	r3, r3, #32
 80016e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <Timer_ClockControl+0x48>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
	}
	else{
		__HAL_RCC_TIM7_CLK_DISABLE();
	}
}
 80016f4:	e005      	b.n	8001702 <Timer_ClockControl+0x3a>
		__HAL_RCC_TIM7_CLK_DISABLE();
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <Timer_ClockControl+0x48>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <Timer_ClockControl+0x48>)
 80016fc:	f023 0320 	bic.w	r3, r3, #32
 8001700:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <Timer_StartInterrupt>:
	HAL_TIM_Base_Stop(&htim7);
}
#endif

#if USE_INTERRUPT_FOR_TIMER == 1
void Timer_StartInterrupt(){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	Timer_Error_Handler(HAL_TIM_Base_Start_IT(&htim7));
 8001718:	4804      	ldr	r0, [pc, #16]	@ (800172c <Timer_StartInterrupt+0x18>)
 800171a:	f004 fc6d 	bl	8005ff8 <HAL_TIM_Base_Start_IT>
 800171e:	4603      	mov	r3, r0
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f813 	bl	800174c <Timer_Error_Handler>
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200259a0 	.word	0x200259a0

08001730 <Timer_Reset>:
void Timer_StopInterrupt(){
	Timer_Error_Handler(HAL_TIM_Base_Stop_IT(&htim7));
}
#endif

void Timer_Reset(){
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <Timer_Reset+0x18>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200259a0 	.word	0x200259a0

0800174c <Timer_Error_Handler>:

uint32_t Timer_GetARR(){
	return __HAL_TIM_GET_AUTORELOAD(&htim7);
}

void Timer_Error_Handler(HAL_StatusTypeDef input){
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
	if(input != HAL_OK){
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <Timer_Error_Handler+0x14>
		for(;;);
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <Timer_Error_Handler+0x10>
	}
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001770:	f000 f9fe 	bl	8001b70 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001774:	20ca      	movs	r0, #202	@ 0xca
 8001776:	f000 f943 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800177a:	20c3      	movs	r0, #195	@ 0xc3
 800177c:	f000 f94d 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001780:	2008      	movs	r0, #8
 8001782:	f000 f94a 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001786:	2050      	movs	r0, #80	@ 0x50
 8001788:	f000 f947 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800178c:	20cf      	movs	r0, #207	@ 0xcf
 800178e:	f000 f937 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001792:	2000      	movs	r0, #0
 8001794:	f000 f941 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001798:	20c1      	movs	r0, #193	@ 0xc1
 800179a:	f000 f93e 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800179e:	2030      	movs	r0, #48	@ 0x30
 80017a0:	f000 f93b 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80017a4:	20ed      	movs	r0, #237	@ 0xed
 80017a6:	f000 f92b 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80017aa:	2064      	movs	r0, #100	@ 0x64
 80017ac:	f000 f935 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f000 f932 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80017b6:	2012      	movs	r0, #18
 80017b8:	f000 f92f 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80017bc:	2081      	movs	r0, #129	@ 0x81
 80017be:	f000 f92c 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80017c2:	20e8      	movs	r0, #232	@ 0xe8
 80017c4:	f000 f91c 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80017c8:	2085      	movs	r0, #133	@ 0x85
 80017ca:	f000 f926 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f000 f923 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80017d4:	2078      	movs	r0, #120	@ 0x78
 80017d6:	f000 f920 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80017da:	20cb      	movs	r0, #203	@ 0xcb
 80017dc:	f000 f910 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80017e0:	2039      	movs	r0, #57	@ 0x39
 80017e2:	f000 f91a 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80017e6:	202c      	movs	r0, #44	@ 0x2c
 80017e8:	f000 f917 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017ec:	2000      	movs	r0, #0
 80017ee:	f000 f914 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80017f2:	2034      	movs	r0, #52	@ 0x34
 80017f4:	f000 f911 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80017f8:	2002      	movs	r0, #2
 80017fa:	f000 f90e 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80017fe:	20f7      	movs	r0, #247	@ 0xf7
 8001800:	f000 f8fe 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001804:	2020      	movs	r0, #32
 8001806:	f000 f908 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800180a:	20ea      	movs	r0, #234	@ 0xea
 800180c:	f000 f8f8 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001810:	2000      	movs	r0, #0
 8001812:	f000 f902 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f8ff 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800181c:	20b1      	movs	r0, #177	@ 0xb1
 800181e:	f000 f8ef 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f8f9 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001828:	201b      	movs	r0, #27
 800182a:	f000 f8f6 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800182e:	20b6      	movs	r0, #182	@ 0xb6
 8001830:	f000 f8e6 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001834:	200a      	movs	r0, #10
 8001836:	f000 f8f0 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800183a:	20a2      	movs	r0, #162	@ 0xa2
 800183c:	f000 f8ed 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001840:	20c0      	movs	r0, #192	@ 0xc0
 8001842:	f000 f8dd 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001846:	2010      	movs	r0, #16
 8001848:	f000 f8e7 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800184c:	20c1      	movs	r0, #193	@ 0xc1
 800184e:	f000 f8d7 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001852:	2010      	movs	r0, #16
 8001854:	f000 f8e1 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001858:	20c5      	movs	r0, #197	@ 0xc5
 800185a:	f000 f8d1 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800185e:	2045      	movs	r0, #69	@ 0x45
 8001860:	f000 f8db 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001864:	2015      	movs	r0, #21
 8001866:	f000 f8d8 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800186a:	20c7      	movs	r0, #199	@ 0xc7
 800186c:	f000 f8c8 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001870:	2090      	movs	r0, #144	@ 0x90
 8001872:	f000 f8d2 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001876:	2036      	movs	r0, #54	@ 0x36
 8001878:	f000 f8c2 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800187c:	20c8      	movs	r0, #200	@ 0xc8
 800187e:	f000 f8cc 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001882:	20f2      	movs	r0, #242	@ 0xf2
 8001884:	f000 f8bc 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001888:	2000      	movs	r0, #0
 800188a:	f000 f8c6 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800188e:	20b0      	movs	r0, #176	@ 0xb0
 8001890:	f000 f8b6 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001894:	20c2      	movs	r0, #194	@ 0xc2
 8001896:	f000 f8c0 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800189a:	20b6      	movs	r0, #182	@ 0xb6
 800189c:	f000 f8b0 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80018a0:	200a      	movs	r0, #10
 80018a2:	f000 f8ba 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80018a6:	20a7      	movs	r0, #167	@ 0xa7
 80018a8:	f000 f8b7 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80018ac:	2027      	movs	r0, #39	@ 0x27
 80018ae:	f000 f8b4 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80018b2:	2004      	movs	r0, #4
 80018b4:	f000 f8b1 	bl	8001a1a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80018b8:	202a      	movs	r0, #42	@ 0x2a
 80018ba:	f000 f8a1 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f8ab 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f000 f8a8 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f8a5 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80018d0:	20ef      	movs	r0, #239	@ 0xef
 80018d2:	f000 f8a2 	bl	8001a1a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80018d6:	202b      	movs	r0, #43	@ 0x2b
 80018d8:	f000 f892 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018dc:	2000      	movs	r0, #0
 80018de:	f000 f89c 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f899 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80018e8:	2001      	movs	r0, #1
 80018ea:	f000 f896 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80018ee:	203f      	movs	r0, #63	@ 0x3f
 80018f0:	f000 f893 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80018f4:	20f6      	movs	r0, #246	@ 0xf6
 80018f6:	f000 f883 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f000 f88d 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001900:	2000      	movs	r0, #0
 8001902:	f000 f88a 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001906:	2006      	movs	r0, #6
 8001908:	f000 f887 	bl	8001a1a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800190c:	202c      	movs	r0, #44	@ 0x2c
 800190e:	f000 f877 	bl	8001a00 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001912:	20c8      	movs	r0, #200	@ 0xc8
 8001914:	f000 f9e8 	bl	8001ce8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001918:	2026      	movs	r0, #38	@ 0x26
 800191a:	f000 f871 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800191e:	2001      	movs	r0, #1
 8001920:	f000 f87b 	bl	8001a1a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001924:	20e0      	movs	r0, #224	@ 0xe0
 8001926:	f000 f86b 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800192a:	200f      	movs	r0, #15
 800192c:	f000 f875 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001930:	2029      	movs	r0, #41	@ 0x29
 8001932:	f000 f872 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001936:	2024      	movs	r0, #36	@ 0x24
 8001938:	f000 f86f 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800193c:	200c      	movs	r0, #12
 800193e:	f000 f86c 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001942:	200e      	movs	r0, #14
 8001944:	f000 f869 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001948:	2009      	movs	r0, #9
 800194a:	f000 f866 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800194e:	204e      	movs	r0, #78	@ 0x4e
 8001950:	f000 f863 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001954:	2078      	movs	r0, #120	@ 0x78
 8001956:	f000 f860 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800195a:	203c      	movs	r0, #60	@ 0x3c
 800195c:	f000 f85d 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001960:	2009      	movs	r0, #9
 8001962:	f000 f85a 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001966:	2013      	movs	r0, #19
 8001968:	f000 f857 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800196c:	2005      	movs	r0, #5
 800196e:	f000 f854 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001972:	2017      	movs	r0, #23
 8001974:	f000 f851 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001978:	2011      	movs	r0, #17
 800197a:	f000 f84e 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f84b 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001984:	20e1      	movs	r0, #225	@ 0xe1
 8001986:	f000 f83b 	bl	8001a00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f845 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001990:	2016      	movs	r0, #22
 8001992:	f000 f842 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001996:	201b      	movs	r0, #27
 8001998:	f000 f83f 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800199c:	2004      	movs	r0, #4
 800199e:	f000 f83c 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80019a2:	2011      	movs	r0, #17
 80019a4:	f000 f839 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80019a8:	2007      	movs	r0, #7
 80019aa:	f000 f836 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80019ae:	2031      	movs	r0, #49	@ 0x31
 80019b0:	f000 f833 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80019b4:	2033      	movs	r0, #51	@ 0x33
 80019b6:	f000 f830 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80019ba:	2042      	movs	r0, #66	@ 0x42
 80019bc:	f000 f82d 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80019c0:	2005      	movs	r0, #5
 80019c2:	f000 f82a 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80019c6:	200c      	movs	r0, #12
 80019c8:	f000 f827 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80019cc:	200a      	movs	r0, #10
 80019ce:	f000 f824 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80019d2:	2028      	movs	r0, #40	@ 0x28
 80019d4:	f000 f821 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80019d8:	202f      	movs	r0, #47	@ 0x2f
 80019da:	f000 f81e 	bl	8001a1a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80019de:	200f      	movs	r0, #15
 80019e0:	f000 f81b 	bl	8001a1a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80019e4:	2011      	movs	r0, #17
 80019e6:	f000 f80b 	bl	8001a00 <ili9341_Write_Reg>
  LCD_Delay(200);
 80019ea:	20c8      	movs	r0, #200	@ 0xc8
 80019ec:	f000 f97c 	bl	8001ce8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80019f0:	2029      	movs	r0, #41	@ 0x29
 80019f2:	f000 f805 	bl	8001a00 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80019f6:	202c      	movs	r0, #44	@ 0x2c
 80019f8:	f000 f802 	bl	8001a00 <ili9341_Write_Reg>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f949 	bl	8001ca4 <LCD_IO_WriteReg>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f91a 	bl	8001c60 <LCD_IO_WriteData>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001a38:	4819      	ldr	r0, [pc, #100]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a3a:	f004 f9a2 	bl	8005d82 <HAL_SPI_GetState>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d12b      	bne.n	8001a9c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a46:	4a17      	ldr	r2, [pc, #92]	@ (8001aa4 <SPI_Init+0x70>)
 8001a48:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a4c:	2218      	movs	r2, #24
 8001a4e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001a68:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a80:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001a82:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a8a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a8e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001a90:	4803      	ldr	r0, [pc, #12]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a92:	f000 f833 	bl	8001afc <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001a96:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <SPI_Init+0x6c>)
 8001a98:	f003 ff7e 	bl	8005998 <HAL_SPI_Init>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200259e8 	.word	0x200259e8
 8001aa4:	40015000 	.word	0x40015000

08001aa8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <SPI_Write+0x34>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	1db9      	adds	r1, r7, #6
 8001abc:	2201      	movs	r2, #1
 8001abe:	4808      	ldr	r0, [pc, #32]	@ (8001ae0 <SPI_Write+0x38>)
 8001ac0:	f004 f81b 	bl	8005afa <HAL_SPI_Transmit>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001ace:	f000 f809 	bl	8001ae4 <SPI_Error>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	200259e8 	.word	0x200259e8

08001ae4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001ae8:	4803      	ldr	r0, [pc, #12]	@ (8001af8 <SPI_Error+0x14>)
 8001aea:	f003 ffde 	bl	8005aaa <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001aee:	f7ff ffa1 	bl	8001a34 <SPI_Init>
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200259e8 	.word	0x200259e8

08001afc <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <SPI_MspInit+0x6c>)
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0c:	4a16      	ldr	r2, [pc, #88]	@ (8001b68 <SPI_MspInit+0x6c>)
 8001b0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b12:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <SPI_MspInit+0x6c>)
 8001b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <SPI_MspInit+0x6c>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	4a0f      	ldr	r2, [pc, #60]	@ (8001b68 <SPI_MspInit+0x6c>)
 8001b2a:	f043 0320 	orr.w	r3, r3, #32
 8001b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b30:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <SPI_MspInit+0x6c>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001b3c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001b4e:	2305      	movs	r3, #5
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4804      	ldr	r0, [pc, #16]	@ (8001b6c <SPI_MspInit+0x70>)
 8001b5a:	f001 fa6f 	bl	800303c <HAL_GPIO_Init>
}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	@ 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40021400 	.word	0x40021400

08001b70 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001b76:	4b36      	ldr	r3, [pc, #216]	@ (8001c50 <LCD_IO_Init+0xe0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d164      	bne.n	8001c48 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001b7e:	4b34      	ldr	r3, [pc, #208]	@ (8001c50 <LCD_IO_Init+0xe0>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	4b32      	ldr	r3, [pc, #200]	@ (8001c54 <LCD_IO_Init+0xe4>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8c:	4a31      	ldr	r2, [pc, #196]	@ (8001c54 <LCD_IO_Init+0xe4>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b94:	4b2f      	ldr	r3, [pc, #188]	@ (8001c54 <LCD_IO_Init+0xe4>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ba4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001bb2:	f107 030c 	add.w	r3, r7, #12
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4827      	ldr	r0, [pc, #156]	@ (8001c58 <LCD_IO_Init+0xe8>)
 8001bba:	f001 fa3f 	bl	800303c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <LCD_IO_Init+0xe4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a23      	ldr	r2, [pc, #140]	@ (8001c54 <LCD_IO_Init+0xe4>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <LCD_IO_Init+0xe4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4819      	ldr	r0, [pc, #100]	@ (8001c58 <LCD_IO_Init+0xe8>)
 8001bf4:	f001 fa22 	bl	800303c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <LCD_IO_Init+0xe4>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	4a14      	ldr	r2, [pc, #80]	@ (8001c54 <LCD_IO_Init+0xe4>)
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <LCD_IO_Init+0xe4>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001c14:	2304      	movs	r3, #4
 8001c16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480c      	ldr	r0, [pc, #48]	@ (8001c5c <LCD_IO_Init+0xec>)
 8001c2c:	f001 fa06 	bl	800303c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001c30:	2200      	movs	r2, #0
 8001c32:	2104      	movs	r1, #4
 8001c34:	4809      	ldr	r0, [pc, #36]	@ (8001c5c <LCD_IO_Init+0xec>)
 8001c36:	f001 fcb9 	bl	80035ac <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	4807      	ldr	r0, [pc, #28]	@ (8001c5c <LCD_IO_Init+0xec>)
 8001c40:	f001 fcb4 	bl	80035ac <HAL_GPIO_WritePin>

    SPI_Init();
 8001c44:	f7ff fef6 	bl	8001a34 <SPI_Init>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20025a40 	.word	0x20025a40
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020c00 	.word	0x40020c00
 8001c5c:	40020800 	.word	0x40020800

08001c60 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c70:	480a      	ldr	r0, [pc, #40]	@ (8001c9c <LCD_IO_WriteData+0x3c>)
 8001c72:	f001 fc9b 	bl	80035ac <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001c76:	2200      	movs	r2, #0
 8001c78:	2104      	movs	r1, #4
 8001c7a:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <LCD_IO_WriteData+0x40>)
 8001c7c:	f001 fc96 	bl	80035ac <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff10 	bl	8001aa8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	4804      	ldr	r0, [pc, #16]	@ (8001ca0 <LCD_IO_WriteData+0x40>)
 8001c8e:	f001 fc8d 	bl	80035ac <HAL_GPIO_WritePin>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40020800 	.word	0x40020800

08001ca4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cb4:	480a      	ldr	r0, [pc, #40]	@ (8001ce0 <LCD_IO_WriteReg+0x3c>)
 8001cb6:	f001 fc79 	bl	80035ac <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	4809      	ldr	r0, [pc, #36]	@ (8001ce4 <LCD_IO_WriteReg+0x40>)
 8001cc0:	f001 fc74 	bl	80035ac <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff feed 	bl	8001aa8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2104      	movs	r1, #4
 8001cd2:	4804      	ldr	r0, [pc, #16]	@ (8001ce4 <LCD_IO_WriteReg+0x40>)
 8001cd4:	f001 fc6a 	bl	80035ac <HAL_GPIO_WritePin>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	40020800 	.word	0x40020800

08001ce8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fff7 	bl	8002ce4 <HAL_Delay>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d02:	f000 ff7d 	bl	8002c00 <HAL_Init>

	// The default system configuration function is "suspect" so we need to make our own clock configuration
	// Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
	SystemClockOverride();
 8001d06:	f000 f80b 	bl	8001d20 <SystemClockOverride>
	ApplicationInit();
 8001d0a:	f7fe fc39 	bl	8000580 <ApplicationInit>

	HAL_Delay(5000);
 8001d0e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001d12:	f000 ffe7 	bl	8002ce4 <HAL_Delay>
	while(1){
		//
	}
#endif

	screen1();
 8001d16:	f7fe fd8b 	bl	8000830 <screen1>

	while(1){
 8001d1a:	bf00      	nop
 8001d1c:	e7fd      	b.n	8001d1a <main+0x1c>
	...

08001d20 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b092      	sub	sp, #72	@ 0x48
 8001d24:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <SystemClockOverride+0x7c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <SystemClockOverride+0x7c>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d36:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <SystemClockOverride+0x7c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d42:	2301      	movs	r3, #1
 8001d44:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d4a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d50:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d56:	2308      	movs	r3, #8
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d5a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d60:	2302      	movs	r3, #2
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d64:	2307      	movs	r3, #7
 8001d66:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 ff26 	bl	8004bbc <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001d70:	230f      	movs	r3, #15
 8001d72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d74:	2302      	movs	r3, #2
 8001d76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d80:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d86:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001d88:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d8c:	2105      	movs	r1, #5
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 f98c 	bl	80050ac <HAL_RCC_ClockConfig>
}
 8001d94:	bf00      	nop
 8001d96:	3748      	adds	r7, #72	@ 0x48
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800

08001da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001da4:	b672      	cpsid	i
}
 8001da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <Error_Handler+0x8>

08001dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	4a0f      	ldr	r2, [pc, #60]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a08      	ldr	r2, [pc, #32]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dea:	2007      	movs	r0, #7
 8001dec:	f001 f8b0 	bl	8002f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800

08001dfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	@ 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a29      	ldr	r2, [pc, #164]	@ (8001ec0 <HAL_I2C_MspInit+0xc4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d14b      	bne.n	8001eb6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a27      	ldr	r2, [pc, #156]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a20      	ldr	r2, [pc, #128]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001e56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5c:	2312      	movs	r3, #18
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	4815      	ldr	r0, [pc, #84]	@ (8001ec8 <HAL_I2C_MspInit+0xcc>)
 8001e74:	f001 f8e2 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001e78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7e:	2312      	movs	r3, #18
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <HAL_I2C_MspInit+0xd0>)
 8001e96:	f001 f8d1 	bl	800303c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a08      	ldr	r2, [pc, #32]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001ea4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	@ 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40005c00 	.word	0x40005c00
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020000 	.word	0x40020000

08001ed0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b09a      	sub	sp, #104	@ 0x68
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eec:	2230      	movs	r2, #48	@ 0x30
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 fcdd 	bl	80068b0 <memset>
  if(hltdc->Instance==LTDC)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a81      	ldr	r2, [pc, #516]	@ (8002100 <HAL_LTDC_MspInit+0x230>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f040 80fa 	bne.w	80020f6 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f02:	2308      	movs	r3, #8
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001f06:	2332      	movs	r3, #50	@ 0x32
 8001f08:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fad4 	bl	80054c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001f22:	f7ff ff3d 	bl	8001da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
 8001f2a:	4b76      	ldr	r3, [pc, #472]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	4a75      	ldr	r2, [pc, #468]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f36:	4b73      	ldr	r3, [pc, #460]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f3e:	623b      	str	r3, [r7, #32]
 8001f40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	4b6f      	ldr	r3, [pc, #444]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f4c:	f043 0320 	orr.w	r3, r3, #32
 8001f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f52:	4b6c      	ldr	r3, [pc, #432]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	4b68      	ldr	r3, [pc, #416]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a67      	ldr	r2, [pc, #412]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b65      	ldr	r3, [pc, #404]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	4b61      	ldr	r3, [pc, #388]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a60      	ldr	r2, [pc, #384]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b5e      	ldr	r3, [pc, #376]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	4a59      	ldr	r2, [pc, #356]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa6:	4b57      	ldr	r3, [pc, #348]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b53      	ldr	r3, [pc, #332]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a52      	ldr	r2, [pc, #328]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b50      	ldr	r3, [pc, #320]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b4c      	ldr	r3, [pc, #304]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a4b      	ldr	r2, [pc, #300]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b49      	ldr	r3, [pc, #292]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ffc:	230e      	movs	r3, #14
 8001ffe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002000:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002004:	4619      	mov	r1, r3
 8002006:	4840      	ldr	r0, [pc, #256]	@ (8002108 <HAL_LTDC_MspInit+0x238>)
 8002008:	f001 f818 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800200c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002010:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800201e:	230e      	movs	r3, #14
 8002020:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002026:	4619      	mov	r1, r3
 8002028:	4838      	ldr	r0, [pc, #224]	@ (800210c <HAL_LTDC_MspInit+0x23c>)
 800202a:	f001 f807 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800202e:	2303      	movs	r3, #3
 8002030:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800203e:	2309      	movs	r3, #9
 8002040:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002046:	4619      	mov	r1, r3
 8002048:	4831      	ldr	r0, [pc, #196]	@ (8002110 <HAL_LTDC_MspInit+0x240>)
 800204a:	f000 fff7 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800204e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002052:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002060:	230e      	movs	r3, #14
 8002062:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002068:	4619      	mov	r1, r3
 800206a:	4829      	ldr	r0, [pc, #164]	@ (8002110 <HAL_LTDC_MspInit+0x240>)
 800206c:	f000 ffe6 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002070:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002074:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002082:	230e      	movs	r3, #14
 8002084:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002086:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800208a:	4619      	mov	r1, r3
 800208c:	4821      	ldr	r0, [pc, #132]	@ (8002114 <HAL_LTDC_MspInit+0x244>)
 800208e:	f000 ffd5 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002092:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002096:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a4:	230e      	movs	r3, #14
 80020a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ac:	4619      	mov	r1, r3
 80020ae:	481a      	ldr	r0, [pc, #104]	@ (8002118 <HAL_LTDC_MspInit+0x248>)
 80020b0:	f000 ffc4 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80020b4:	2348      	movs	r3, #72	@ 0x48
 80020b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020c4:	230e      	movs	r3, #14
 80020c6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020cc:	4619      	mov	r1, r3
 80020ce:	4813      	ldr	r0, [pc, #76]	@ (800211c <HAL_LTDC_MspInit+0x24c>)
 80020d0:	f000 ffb4 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80020d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020d8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020e6:	2309      	movs	r3, #9
 80020e8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ee:	4619      	mov	r1, r3
 80020f0:	4808      	ldr	r0, [pc, #32]	@ (8002114 <HAL_LTDC_MspInit+0x244>)
 80020f2:	f000 ffa3 	bl	800303c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80020f6:	bf00      	nop
 80020f8:	3768      	adds	r7, #104	@ 0x68
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40016800 	.word	0x40016800
 8002104:	40023800 	.word	0x40023800
 8002108:	40021400 	.word	0x40021400
 800210c:	40020000 	.word	0x40020000
 8002110:	40020400 	.word	0x40020400
 8002114:	40021800 	.word	0x40021800
 8002118:	40020800 	.word	0x40020800
 800211c:	40020c00 	.word	0x40020c00

08002120 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <HAL_RNG_MspInit+0x3c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10d      	bne.n	800214e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_RNG_MspInit+0x40>)
 8002138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <HAL_RNG_MspInit+0x40>)
 800213c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002140:	6353      	str	r3, [r2, #52]	@ 0x34
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <HAL_RNG_MspInit+0x40>)
 8002144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	50060800 	.word	0x50060800
 8002160:	40023800 	.word	0x40023800

08002164 <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a07      	ldr	r2, [pc, #28]	@ (8002190 <HAL_RNG_MspDeInit+0x2c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d105      	bne.n	8002182 <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8002176:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <HAL_RNG_MspDeInit+0x30>)
 8002178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217a:	4a06      	ldr	r2, [pc, #24]	@ (8002194 <HAL_RNG_MspDeInit+0x30>)
 800217c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002180:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	50060800 	.word	0x50060800
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	@ (800221c <HAL_SPI_MspInit+0x84>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12c      	bne.n	8002214 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021e0:	f043 0320 	orr.w	r3, r3, #32
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <HAL_SPI_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80021f2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002204:	2305      	movs	r3, #5
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4805      	ldr	r0, [pc, #20]	@ (8002224 <HAL_SPI_MspInit+0x8c>)
 8002210:	f000 ff14 	bl	800303c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002214:	bf00      	nop
 8002216:	3728      	adds	r7, #40	@ 0x28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40015000 	.word	0x40015000
 8002220:	40023800 	.word	0x40023800
 8002224:	40021400 	.word	0x40021400

08002228 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a08      	ldr	r2, [pc, #32]	@ (8002258 <HAL_SPI_MspDeInit+0x30>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10a      	bne.n	8002250 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <HAL_SPI_MspDeInit+0x34>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a07      	ldr	r2, [pc, #28]	@ (800225c <HAL_SPI_MspDeInit+0x34>)
 8002240:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002246:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800224a:	4805      	ldr	r0, [pc, #20]	@ (8002260 <HAL_SPI_MspDeInit+0x38>)
 800224c:	f001 f8a2 	bl	8003394 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40015000 	.word	0x40015000
 800225c:	40023800 	.word	0x40023800
 8002260:	40021400 	.word	0x40021400

08002264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0e      	ldr	r2, [pc, #56]	@ (80022ac <HAL_TIM_Base_MspInit+0x48>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d115      	bne.n	80022a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <HAL_TIM_Base_MspInit+0x4c>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	4a0c      	ldr	r2, [pc, #48]	@ (80022b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002280:	f043 0320 	orr.w	r3, r3, #32
 8002284:	6413      	str	r3, [r2, #64]	@ 0x40
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	2037      	movs	r0, #55	@ 0x37
 8002298:	f000 fe65 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800229c:	2037      	movs	r0, #55	@ 0x37
 800229e:	f000 fe7e 	bl	8002f9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40001400 	.word	0x40001400
 80022b0:	40023800 	.word	0x40023800

080022b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <NMI_Handler+0x4>

080022bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <MemManage_Handler+0x4>

080022cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <BusFault_Handler+0x4>

080022d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <UsageFault_Handler+0x4>

080022dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230a:	f000 fccb 	bl	8002ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}

08002312 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002316:	2001      	movs	r0, #1
 8002318:	f001 f962 	bl	80035e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  //addSchedulerEvent(ROTATE_BLOCK_EVENT);
  LCD_Clear(0, LCD_COLOR_RED);
 800231c:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fd8b 	bl	8000e3c <LCD_Clear>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002330:	4804      	ldr	r0, [pc, #16]	@ (8002344 <TIM7_IRQHandler+0x18>)
 8002332:	f003 fed1 	bl	80060d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  LCD_Clear(0, LCD_COLOR_GREEN);
 8002336:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800233a:	2000      	movs	r0, #0
 800233c:	f7fe fd7e 	bl	8000e3c <LCD_Clear>
  /* USER CODE END TIM7_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200259a0 	.word	0x200259a0

08002348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0b      	blt.n	8002372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	4907      	ldr	r1, [pc, #28]	@ (8002380 <__NVIC_EnableIRQ+0x38>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2001      	movs	r0, #1
 800236a:	fa00 f202 	lsl.w	r2, r0, r2
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100

08002384 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 800238a:	f000 f9dd 	bl	8002748 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800238e:	f000 f99d 	bl	80026cc <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002392:	2202      	movs	r2, #2
 8002394:	2103      	movs	r1, #3
 8002396:	2082      	movs	r0, #130	@ 0x82
 8002398:	f000 fa2a 	bl	80027f0 <I2C3_Write>
    HAL_Delay(5);
 800239c:	2005      	movs	r0, #5
 800239e:	f000 fca1 	bl	8002ce4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2103      	movs	r1, #3
 80023a6:	2082      	movs	r0, #130	@ 0x82
 80023a8:	f000 fa22 	bl	80027f0 <I2C3_Write>
    HAL_Delay(2);
 80023ac:	2002      	movs	r0, #2
 80023ae:	f000 fc99 	bl	8002ce4 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80023b2:	1cba      	adds	r2, r7, #2
 80023b4:	2302      	movs	r3, #2
 80023b6:	2100      	movs	r1, #0
 80023b8:	2082      	movs	r0, #130	@ 0x82
 80023ba:	f000 fa69 	bl	8002890 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	f640 0211 	movw	r2, #2065	@ 0x811
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d001      	beq.n	80023de <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80023da:	2303      	movs	r3, #3
 80023dc:	e095      	b.n	800250a <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80023de:	2202      	movs	r2, #2
 80023e0:	2103      	movs	r1, #3
 80023e2:	2082      	movs	r0, #130	@ 0x82
 80023e4:	f000 fa04 	bl	80027f0 <I2C3_Write>
    HAL_Delay(5);
 80023e8:	2005      	movs	r0, #5
 80023ea:	f000 fc7b 	bl	8002ce4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2103      	movs	r1, #3
 80023f2:	2082      	movs	r0, #130	@ 0x82
 80023f4:	f000 f9fc 	bl	80027f0 <I2C3_Write>
    HAL_Delay(2);
 80023f8:	2002      	movs	r0, #2
 80023fa:	f000 fc73 	bl	8002ce4 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80023fe:	2004      	movs	r0, #4
 8002400:	f000 f887 	bl	8002512 <STMPE811_Read>
 8002404:	4603      	mov	r3, r0
 8002406:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002408:	797b      	ldrb	r3, [r7, #5]
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002410:	797b      	ldrb	r3, [r7, #5]
 8002412:	461a      	mov	r2, r3
 8002414:	2104      	movs	r1, #4
 8002416:	2082      	movs	r0, #130	@ 0x82
 8002418:	f000 f9ea 	bl	80027f0 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800241c:	2004      	movs	r0, #4
 800241e:	f000 f878 	bl	8002512 <STMPE811_Read>
 8002422:	4603      	mov	r3, r0
 8002424:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002426:	797b      	ldrb	r3, [r7, #5]
 8002428:	f023 0302 	bic.w	r3, r3, #2
 800242c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800242e:	797b      	ldrb	r3, [r7, #5]
 8002430:	461a      	mov	r2, r3
 8002432:	2104      	movs	r1, #4
 8002434:	2082      	movs	r0, #130	@ 0x82
 8002436:	f000 f9db 	bl	80027f0 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800243a:	2249      	movs	r2, #73	@ 0x49
 800243c:	2120      	movs	r1, #32
 800243e:	2082      	movs	r0, #130	@ 0x82
 8002440:	f000 f9d6 	bl	80027f0 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002444:	2002      	movs	r0, #2
 8002446:	f000 fc4d 	bl	8002ce4 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800244a:	2201      	movs	r2, #1
 800244c:	2121      	movs	r1, #33	@ 0x21
 800244e:	2082      	movs	r0, #130	@ 0x82
 8002450:	f000 f9ce 	bl	80027f0 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002454:	2017      	movs	r0, #23
 8002456:	f000 f85c 	bl	8002512 <STMPE811_Read>
 800245a:	4603      	mov	r3, r0
 800245c:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800245e:	797b      	ldrb	r3, [r7, #5]
 8002460:	f043 031e 	orr.w	r3, r3, #30
 8002464:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002466:	797b      	ldrb	r3, [r7, #5]
 8002468:	461a      	mov	r2, r3
 800246a:	2117      	movs	r1, #23
 800246c:	2082      	movs	r0, #130	@ 0x82
 800246e:	f000 f9bf 	bl	80027f0 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002472:	229a      	movs	r2, #154	@ 0x9a
 8002474:	2141      	movs	r1, #65	@ 0x41
 8002476:	2082      	movs	r0, #130	@ 0x82
 8002478:	f000 f9ba 	bl	80027f0 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800247c:	2201      	movs	r2, #1
 800247e:	214a      	movs	r1, #74	@ 0x4a
 8002480:	2082      	movs	r0, #130	@ 0x82
 8002482:	f000 f9b5 	bl	80027f0 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002486:	2201      	movs	r2, #1
 8002488:	214b      	movs	r1, #75	@ 0x4b
 800248a:	2082      	movs	r0, #130	@ 0x82
 800248c:	f000 f9b0 	bl	80027f0 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002490:	2200      	movs	r2, #0
 8002492:	214b      	movs	r1, #75	@ 0x4b
 8002494:	2082      	movs	r0, #130	@ 0x82
 8002496:	f000 f9ab 	bl	80027f0 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800249a:	2201      	movs	r2, #1
 800249c:	2156      	movs	r1, #86	@ 0x56
 800249e:	2082      	movs	r0, #130	@ 0x82
 80024a0:	f000 f9a6 	bl	80027f0 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80024a4:	2201      	movs	r2, #1
 80024a6:	2158      	movs	r1, #88	@ 0x58
 80024a8:	2082      	movs	r0, #130	@ 0x82
 80024aa:	f000 f9a1 	bl	80027f0 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80024ae:	2203      	movs	r2, #3
 80024b0:	2140      	movs	r1, #64	@ 0x40
 80024b2:	2082      	movs	r0, #130	@ 0x82
 80024b4:	f000 f99c 	bl	80027f0 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80024b8:	22ff      	movs	r2, #255	@ 0xff
 80024ba:	210b      	movs	r1, #11
 80024bc:	2082      	movs	r0, #130	@ 0x82
 80024be:	f000 f997 	bl	80027f0 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 80024c2:	f000 f8c1 	bl	8002648 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 80024c6:	2009      	movs	r0, #9
 80024c8:	f000 f823 	bl	8002512 <STMPE811_Read>
 80024cc:	4603      	mov	r3, r0
 80024ce:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80024d0:	797b      	ldrb	r3, [r7, #5]
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 80024d8:	797b      	ldrb	r3, [r7, #5]
 80024da:	461a      	mov	r2, r3
 80024dc:	2109      	movs	r1, #9
 80024de:	2082      	movs	r0, #130	@ 0x82
 80024e0:	f000 f986 	bl	80027f0 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 80024e4:	200a      	movs	r0, #10
 80024e6:	f000 f814 	bl	8002512 <STMPE811_Read>
 80024ea:	4603      	mov	r3, r0
 80024ec:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80024ee:	797b      	ldrb	r3, [r7, #5]
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 80024f6:	797b      	ldrb	r3, [r7, #5]
 80024f8:	461a      	mov	r2, r3
 80024fa:	210a      	movs	r1, #10
 80024fc:	2082      	movs	r0, #130	@ 0x82
 80024fe:	f000 f977 	bl	80027f0 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002502:	20c8      	movs	r0, #200	@ 0xc8
 8002504:	f000 fbee 	bl	8002ce4 <HAL_Delay>

    return STMPE811_State_Ok;
 8002508:	2302      	movs	r3, #2

}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800251c:	f107 020f 	add.w	r2, r7, #15
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	4619      	mov	r1, r3
 8002524:	2082      	movs	r0, #130	@ 0x82
 8002526:	f000 f98d 	bl	8002844 <I2C3_Read>

    return readData;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	460a      	mov	r2, r1
 800253e:	71fb      	strb	r3, [r7, #7]
 8002540:	4613      	mov	r3, r2
 8002542:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8002544:	79ba      	ldrb	r2, [r7, #6]
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	4619      	mov	r1, r3
 800254a:	2082      	movs	r0, #130	@ 0x82
 800254c:	f000 f950 	bl	80027f0 <I2C3_Write>
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	799b      	ldrb	r3, [r3, #6]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d117      	bne.n	8002598 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f9b1 	bl	80028d4 <TM_STMPE811_ReadX>
 8002572:	4603      	mov	r3, r0
 8002574:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002578:	b29a      	uxth	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	885b      	ldrh	r3, [r3, #2]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fa04 	bl	8002990 <TM_STMPE811_ReadY>
 8002588:	4603      	mov	r3, r0
 800258a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800258e:	3301      	adds	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	805a      	strh	r2, [r3, #2]
 8002596:	e048      	b.n	800262a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	799b      	ldrb	r3, [r3, #6]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d112      	bne.n	80025c6 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 f995 	bl	80028d4 <TM_STMPE811_ReadX>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	885b      	ldrh	r3, [r3, #2]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f9ea 	bl	8002990 <TM_STMPE811_ReadY>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	805a      	strh	r2, [r3, #2]
 80025c4:	e031      	b.n	800262a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	799b      	ldrb	r3, [r3, #6]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d115      	bne.n	80025fa <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	885b      	ldrh	r3, [r3, #2]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f97e 	bl	80028d4 <TM_STMPE811_ReadX>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 f9d3 	bl	8002990 <TM_STMPE811_ReadY>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80025f0:	3301      	adds	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	801a      	strh	r2, [r3, #0]
 80025f8:	e017      	b.n	800262a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	799b      	ldrb	r3, [r3, #6]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d113      	bne.n	800262a <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f964 	bl	80028d4 <TM_STMPE811_ReadX>
 800260c:	4603      	mov	r3, r0
 800260e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002612:	b29a      	uxth	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f9b7 	bl	8002990 <TM_STMPE811_ReadY>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800262a:	2201      	movs	r2, #1
 800262c:	214b      	movs	r1, #75	@ 0x4b
 800262e:	2082      	movs	r0, #130	@ 0x82
 8002630:	f000 f8de 	bl	80027f0 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002634:	2200      	movs	r2, #0
 8002636:	214b      	movs	r1, #75	@ 0x4b
 8002638:	2082      	movs	r0, #130	@ 0x82
 800263a:	f000 f8d9 	bl	80027f0 <I2C3_Write>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <enableInterruptSupportForTouch+0x5c>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	4a13      	ldr	r2, [pc, #76]	@ (80026a4 <enableInterruptSupportForTouch+0x5c>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6313      	str	r3, [r2, #48]	@ 0x30
 800265e:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <enableInterruptSupportForTouch+0x5c>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002678:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800267c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800267e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002682:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002688:	2302      	movs	r3, #2
 800268a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	4619      	mov	r1, r3
 8002690:	4805      	ldr	r0, [pc, #20]	@ (80026a8 <enableInterruptSupportForTouch+0x60>)
 8002692:	f000 fcd3 	bl	800303c <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002696:	2028      	movs	r0, #40	@ 0x28
 8002698:	f7ff fe56 	bl	8002348 <__NVIC_EnableIRQ>

}
 800269c:	bf00      	nop
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020000 	.word	0x40020000

080026ac <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80026b0:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20025a98 	.word	0x20025a98

080026cc <I2C3_Init>:

static void I2C3_Init()
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <I2C3_Init+0x6c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	4a17      	ldr	r2, [pc, #92]	@ (8002738 <I2C3_Init+0x6c>)
 80026dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e2:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <I2C3_Init+0x6c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80026ee:	4b13      	ldr	r3, [pc, #76]	@ (800273c <I2C3_Init+0x70>)
 80026f0:	4a13      	ldr	r2, [pc, #76]	@ (8002740 <I2C3_Init+0x74>)
 80026f2:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80026f4:	4b11      	ldr	r3, [pc, #68]	@ (800273c <I2C3_Init+0x70>)
 80026f6:	4a13      	ldr	r2, [pc, #76]	@ (8002744 <I2C3_Init+0x78>)
 80026f8:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026fa:	4b10      	ldr	r3, [pc, #64]	@ (800273c <I2C3_Init+0x70>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002700:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <I2C3_Init+0x70>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002706:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <I2C3_Init+0x70>)
 8002708:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800270c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800270e:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <I2C3_Init+0x70>)
 8002710:	2200      	movs	r2, #0
 8002712:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002714:	4b09      	ldr	r3, [pc, #36]	@ (800273c <I2C3_Init+0x70>)
 8002716:	2200      	movs	r2, #0
 8002718:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800271a:	4808      	ldr	r0, [pc, #32]	@ (800273c <I2C3_Init+0x70>)
 800271c:	f000 ff84 	bl	8003628 <HAL_I2C_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800272a:	bf00      	nop
 800272c:	e7fd      	b.n	800272a <I2C3_Init+0x5e>
    }
    return;
 800272e:	bf00      	nop
}
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	20025a44 	.word	0x20025a44
 8002740:	40005c00 	.word	0x40005c00
 8002744:	000186a0 	.word	0x000186a0

08002748 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <I2C3_MspInit+0x9c>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4a1f      	ldr	r2, [pc, #124]	@ (80027e4 <I2C3_MspInit+0x9c>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	6313      	str	r3, [r2, #48]	@ 0x30
 800276e:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <I2C3_MspInit+0x9c>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <I2C3_MspInit+0x9c>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a18      	ldr	r2, [pc, #96]	@ (80027e4 <I2C3_MspInit+0x9c>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <I2C3_MspInit+0x9c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800279a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279c:	2312      	movs	r3, #18
 800279e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027a8:	2304      	movs	r3, #4
 80027aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f107 030c 	add.w	r3, r7, #12
 80027b0:	4619      	mov	r1, r3
 80027b2:	480d      	ldr	r0, [pc, #52]	@ (80027e8 <I2C3_MspInit+0xa0>)
 80027b4:	f000 fc42 	bl	800303c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80027b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027be:	2312      	movs	r3, #18
 80027c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027ca:	2304      	movs	r3, #4
 80027cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	@ (80027ec <I2C3_MspInit+0xa4>)
 80027d6:	f000 fc31 	bl	800303c <HAL_GPIO_Init>
    
}
 80027da:	bf00      	nop
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40020800 	.word	0x40020800
 80027ec:	40020000 	.word	0x40020000

080027f0 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af04      	add	r7, sp, #16
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
 80027fa:	460b      	mov	r3, r1
 80027fc:	717b      	strb	r3, [r7, #5]
 80027fe:	4613      	mov	r3, r2
 8002800:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002802:	793b      	ldrb	r3, [r7, #4]
 8002804:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002806:	797b      	ldrb	r3, [r7, #5]
 8002808:	b29a      	uxth	r2, r3
 800280a:	88f9      	ldrh	r1, [r7, #6]
 800280c:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <I2C3_Write+0x48>)
 800280e:	9302      	str	r3, [sp, #8]
 8002810:	2301      	movs	r3, #1
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	f107 030f 	add.w	r3, r7, #15
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2301      	movs	r3, #1
 800281c:	4807      	ldr	r0, [pc, #28]	@ (800283c <I2C3_Write+0x4c>)
 800281e:	f001 f847 	bl	80038b0 <HAL_I2C_Mem_Write>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <I2C3_Write+0x50>)
 8002828:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800282a:	f7ff ff3f 	bl	80026ac <verifyHAL_I2C_IS_OKAY>
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	0003d090 	.word	0x0003d090
 800283c:	20025a44 	.word	0x20025a44
 8002840:	20025a98 	.word	0x20025a98

08002844 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af04      	add	r7, sp, #16
 800284a:	4603      	mov	r3, r0
 800284c:	603a      	str	r2, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
 8002850:	460b      	mov	r3, r1
 8002852:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	b299      	uxth	r1, r3
 8002858:	79bb      	ldrb	r3, [r7, #6]
 800285a:	b29a      	uxth	r2, r3
 800285c:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <I2C3_Read+0x40>)
 800285e:	9302      	str	r3, [sp, #8]
 8002860:	2301      	movs	r3, #1
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2301      	movs	r3, #1
 800286a:	4807      	ldr	r0, [pc, #28]	@ (8002888 <I2C3_Read+0x44>)
 800286c:	f001 f91a 	bl	8003aa4 <HAL_I2C_Mem_Read>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <I2C3_Read+0x48>)
 8002876:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002878:	f7ff ff18 	bl	80026ac <verifyHAL_I2C_IS_OKAY>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	0003d090 	.word	0x0003d090
 8002888:	20025a44 	.word	0x20025a44
 800288c:	20025a98 	.word	0x20025a98

08002890 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af04      	add	r7, sp, #16
 8002896:	603a      	str	r2, [r7, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
 800289e:	460b      	mov	r3, r1
 80028a0:	71bb      	strb	r3, [r7, #6]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	b299      	uxth	r1, r3
 80028aa:	79bb      	ldrb	r3, [r7, #6]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <I2C3_MulitByteRead+0x3c>)
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	88bb      	ldrh	r3, [r7, #4]
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	4804      	ldr	r0, [pc, #16]	@ (80028d0 <I2C3_MulitByteRead+0x40>)
 80028be:	f001 f8f1 	bl	8003aa4 <HAL_I2C_Mem_Read>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	0003d090 	.word	0x0003d090
 80028d0:	20025a44 	.word	0x20025a44

080028d4 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80028de:	204d      	movs	r0, #77	@ 0x4d
 80028e0:	f7ff fe17 	bl	8002512 <STMPE811_Read>
 80028e4:	4603      	mov	r3, r0
 80028e6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80028e8:	204e      	movs	r0, #78	@ 0x4e
 80028ea:	f7ff fe12 	bl	8002512 <STMPE811_Read>
 80028ee:	4603      	mov	r3, r0
 80028f0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80028f2:	7a7b      	ldrb	r3, [r7, #9]
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	b21a      	sxth	r2, r3
 80028f8:	7a3b      	ldrb	r3, [r7, #8]
 80028fa:	b21b      	sxth	r3, r3
 80028fc:	4313      	orrs	r3, r2
 80028fe:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002900:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002904:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002908:	4293      	cmp	r3, r2
 800290a:	dc06      	bgt.n	800291a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 800290c:	89fb      	ldrh	r3, [r7, #14]
 800290e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002912:	330c      	adds	r3, #12
 8002914:	b29b      	uxth	r3, r3
 8002916:	81fb      	strh	r3, [r7, #14]
 8002918:	e005      	b.n	8002926 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 800291a:	89fb      	ldrh	r3, [r7, #14]
 800291c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002920:	3308      	adds	r3, #8
 8002922:	b29b      	uxth	r3, r3
 8002924:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800292a:	4a18      	ldr	r2, [pc, #96]	@ (800298c <TM_STMPE811_ReadX+0xb8>)
 800292c:	fb82 1203 	smull	r1, r2, r2, r3
 8002930:	441a      	add	r2, r3
 8002932:	10d2      	asrs	r2, r2, #3
 8002934:	17db      	asrs	r3, r3, #31
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 800293a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800293e:	2bef      	cmp	r3, #239	@ 0xef
 8002940:	dd02      	ble.n	8002948 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002942:	23ef      	movs	r3, #239	@ 0xef
 8002944:	81fb      	strh	r3, [r7, #14]
 8002946:	e005      	b.n	8002954 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800294c:	2b00      	cmp	r3, #0
 800294e:	da01      	bge.n	8002954 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002954:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	429a      	cmp	r2, r3
 800295c:	dd05      	ble.n	800296a <TM_STMPE811_ReadX+0x96>
 800295e:	89fa      	ldrh	r2, [r7, #14]
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	b29b      	uxth	r3, r3
 8002966:	b21b      	sxth	r3, r3
 8002968:	e004      	b.n	8002974 <TM_STMPE811_ReadX+0xa0>
 800296a:	89fb      	ldrh	r3, [r7, #14]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	b29b      	uxth	r3, r3
 8002972:	b21b      	sxth	r3, r3
 8002974:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002976:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800297a:	2b04      	cmp	r3, #4
 800297c:	dd01      	ble.n	8002982 <TM_STMPE811_ReadX+0xae>
        return val;
 800297e:	89fb      	ldrh	r3, [r7, #14]
 8002980:	e000      	b.n	8002984 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002982:	88fb      	ldrh	r3, [r7, #6]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	88888889 	.word	0x88888889

08002990 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800299a:	204f      	movs	r0, #79	@ 0x4f
 800299c:	f7ff fdb9 	bl	8002512 <STMPE811_Read>
 80029a0:	4603      	mov	r3, r0
 80029a2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80029a4:	2050      	movs	r0, #80	@ 0x50
 80029a6:	f7ff fdb4 	bl	8002512 <STMPE811_Read>
 80029aa:	4603      	mov	r3, r0
 80029ac:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80029ae:	7a7b      	ldrb	r3, [r7, #9]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	7a3b      	ldrb	r3, [r7, #8]
 80029b6:	b21b      	sxth	r3, r3
 80029b8:	4313      	orrs	r3, r2
 80029ba:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80029bc:	89fb      	ldrh	r3, [r7, #14]
 80029be:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80029c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ca:	4a19      	ldr	r2, [pc, #100]	@ (8002a30 <TM_STMPE811_ReadY+0xa0>)
 80029cc:	fb82 1203 	smull	r1, r2, r2, r3
 80029d0:	1052      	asrs	r2, r2, #1
 80029d2:	17db      	asrs	r3, r3, #31
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80029d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	dc02      	bgt.n	80029e6 <TM_STMPE811_ReadY+0x56>
        val = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	81fb      	strh	r3, [r7, #14]
 80029e4:	e007      	b.n	80029f6 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80029e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80029ee:	db02      	blt.n	80029f6 <TM_STMPE811_ReadY+0x66>
        val = 319;
 80029f0:	f240 133f 	movw	r3, #319	@ 0x13f
 80029f4:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80029f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	dd05      	ble.n	8002a0c <TM_STMPE811_ReadY+0x7c>
 8002a00:	89fa      	ldrh	r2, [r7, #14]
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	e004      	b.n	8002a16 <TM_STMPE811_ReadY+0x86>
 8002a0c:	89fb      	ldrh	r3, [r7, #14]
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	b21b      	sxth	r3, r3
 8002a16:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002a18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	dd01      	ble.n	8002a24 <TM_STMPE811_ReadY+0x94>
        return val;
 8002a20:	89fb      	ldrh	r3, [r7, #14]
 8002a22:	e000      	b.n	8002a26 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002a24:	88fb      	ldrh	r3, [r7, #6]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	2e8ba2e9 	.word	0x2e8ba2e9

08002a34 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e00a      	b.n	8002a6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a54:	f3af 8000 	nop.w
 8002a58:	4601      	mov	r1, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	60ba      	str	r2, [r7, #8]
 8002a60:	b2ca      	uxtb	r2, r1
 8002a62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3301      	adds	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	dbf0      	blt.n	8002a54 <_read+0x12>
  }

  return len;
 8002a72:	687b      	ldr	r3, [r7, #4]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	e009      	b.n	8002aa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	60ba      	str	r2, [r7, #8]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	dbf1      	blt.n	8002a8e <_write+0x12>
  }
  return len;
 8002aaa:	687b      	ldr	r3, [r7, #4]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <_close>:

int _close(int file)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002adc:	605a      	str	r2, [r3, #4]
  return 0;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_isatty>:

int _isatty(int file)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002af4:	2301      	movs	r3, #1
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b24:	4a14      	ldr	r2, [pc, #80]	@ (8002b78 <_sbrk+0x5c>)
 8002b26:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <_sbrk+0x60>)
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b30:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <_sbrk+0x64>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <_sbrk+0x64>)
 8002b3a:	4a12      	ldr	r2, [pc, #72]	@ (8002b84 <_sbrk+0x68>)
 8002b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <_sbrk+0x64>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d207      	bcs.n	8002b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b4c:	f003 fefe 	bl	800694c <__errno>
 8002b50:	4603      	mov	r3, r0
 8002b52:	220c      	movs	r2, #12
 8002b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b5a:	e009      	b.n	8002b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <_sbrk+0x64>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b62:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <_sbrk+0x64>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	4a05      	ldr	r2, [pc, #20]	@ (8002b80 <_sbrk+0x64>)
 8002b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20030000 	.word	0x20030000
 8002b7c:	00000400 	.word	0x00000400
 8002b80:	20025a9c 	.word	0x20025a9c
 8002b84:	20025bf0 	.word	0x20025bf0

08002b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <SystemInit+0x20>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b92:	4a05      	ldr	r2, [pc, #20]	@ (8002ba8 <SystemInit+0x20>)
 8002b94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002bac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002be4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bb0:	f7ff ffea 	bl	8002b88 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bb4:	480c      	ldr	r0, [pc, #48]	@ (8002be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bb6:	490d      	ldr	r1, [pc, #52]	@ (8002bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bbc:	e002      	b.n	8002bc4 <LoopCopyDataInit>

08002bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc2:	3304      	adds	r3, #4

08002bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc8:	d3f9      	bcc.n	8002bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bca:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8002bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd0:	e001      	b.n	8002bd6 <LoopFillZerobss>

08002bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd4:	3204      	adds	r2, #4

08002bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd8:	d3fb      	bcc.n	8002bd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002bda:	f003 febd 	bl	8006958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bde:	f7ff f88e 	bl	8001cfe <main>
  bx  lr    
 8002be2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002be4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002bf0:	08008650 	.word	0x08008650
  ldr r2, =_sbss
 8002bf4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002bf8:	20025bf0 	.word	0x20025bf0

08002bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bfc:	e7fe      	b.n	8002bfc <ADC_IRQHandler>
	...

08002c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c04:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <HAL_Init+0x40>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0d      	ldr	r2, [pc, #52]	@ (8002c40 <HAL_Init+0x40>)
 8002c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0a      	ldr	r2, [pc, #40]	@ (8002c40 <HAL_Init+0x40>)
 8002c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c1c:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a07      	ldr	r2, [pc, #28]	@ (8002c40 <HAL_Init+0x40>)
 8002c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c28:	2003      	movs	r0, #3
 8002c2a:	f000 f991 	bl	8002f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f000 f808 	bl	8002c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c34:	f7ff f8ba 	bl	8001dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023c00 	.word	0x40023c00

08002c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c4c:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <HAL_InitTick+0x54>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <HAL_InitTick+0x58>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	4619      	mov	r1, r3
 8002c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f9b7 	bl	8002fd6 <HAL_SYSTICK_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00e      	b.n	8002c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b0f      	cmp	r3, #15
 8002c76:	d80a      	bhi.n	8002c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c80:	f000 f971 	bl	8002f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c84:	4a06      	ldr	r2, [pc, #24]	@ (8002ca0 <HAL_InitTick+0x5c>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e000      	b.n	8002c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000010 	.word	0x20000010
 8002c9c:	20000018 	.word	0x20000018
 8002ca0:	20000014 	.word	0x20000014

08002ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca8:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_IncTick+0x20>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <HAL_IncTick+0x24>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a04      	ldr	r2, [pc, #16]	@ (8002cc8 <HAL_IncTick+0x24>)
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000018 	.word	0x20000018
 8002cc8:	20025aa0 	.word	0x20025aa0

08002ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	@ (8002ce0 <HAL_GetTick+0x14>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20025aa0 	.word	0x20025aa0

08002ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cec:	f7ff ffee 	bl	8002ccc <HAL_GetTick>
 8002cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cfc:	d005      	beq.n	8002d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <HAL_Delay+0x44>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4413      	add	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d0a:	bf00      	nop
 8002d0c:	f7ff ffde 	bl	8002ccc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d8f7      	bhi.n	8002d0c <HAL_Delay+0x28>
  {
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000018 	.word	0x20000018

08002d2c <__NVIC_SetPriorityGrouping>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5e:	4a04      	ldr	r2, [pc, #16]	@ (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60d3      	str	r3, [r2, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_GetPriorityGrouping>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d78:	4b04      	ldr	r3, [pc, #16]	@ (8002d8c <__NVIC_GetPriorityGrouping+0x18>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f003 0307 	and.w	r3, r3, #7
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_EnableIRQ>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db0b      	blt.n	8002dba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	4907      	ldr	r1, [pc, #28]	@ (8002dc8 <__NVIC_EnableIRQ+0x38>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2001      	movs	r0, #1
 8002db2:	fa00 f202 	lsl.w	r2, r0, r2
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	db12      	blt.n	8002e04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	f003 021f 	and.w	r2, r3, #31
 8002de4:	490a      	ldr	r1, [pc, #40]	@ (8002e10 <__NVIC_DisableIRQ+0x44>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	2001      	movs	r0, #1
 8002dee:	fa00 f202 	lsl.w	r2, r0, r2
 8002df2:	3320      	adds	r3, #32
 8002df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002df8:	f3bf 8f4f 	dsb	sy
}
 8002dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002dfe:	f3bf 8f6f 	isb	sy
}
 8002e02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100

08002e14 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	db0c      	blt.n	8002e40 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4907      	ldr	r1, [pc, #28]	@ (8002e4c <__NVIC_ClearPendingIRQ+0x38>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2001      	movs	r0, #1
 8002e36:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3a:	3360      	adds	r3, #96	@ 0x60
 8002e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000e100 	.word	0xe000e100

08002e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	db0a      	blt.n	8002e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	490c      	ldr	r1, [pc, #48]	@ (8002e9c <__NVIC_SetPriority+0x4c>)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	440b      	add	r3, r1
 8002e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e78:	e00a      	b.n	8002e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4908      	ldr	r1, [pc, #32]	@ (8002ea0 <__NVIC_SetPriority+0x50>)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	3b04      	subs	r3, #4
 8002e88:	0112      	lsls	r2, r2, #4
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	761a      	strb	r2, [r3, #24]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000e100 	.word	0xe000e100
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	@ 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f1c3 0307 	rsb	r3, r3, #7
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	bf28      	it	cs
 8002ec2:	2304      	movcs	r3, #4
 8002ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d902      	bls.n	8002ed4 <NVIC_EncodePriority+0x30>
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3b03      	subs	r3, #3
 8002ed2:	e000      	b.n	8002ed6 <NVIC_EncodePriority+0x32>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	43d9      	mvns	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	4313      	orrs	r3, r2
         );
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3724      	adds	r7, #36	@ 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f1c:	d301      	bcc.n	8002f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e00f      	b.n	8002f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f22:	4a0a      	ldr	r2, [pc, #40]	@ (8002f4c <SysTick_Config+0x40>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2a:	210f      	movs	r1, #15
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f30:	f7ff ff8e 	bl	8002e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f34:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <SysTick_Config+0x40>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3a:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <SysTick_Config+0x40>)
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	e000e010 	.word	0xe000e010

08002f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff fee7 	bl	8002d2c <__NVIC_SetPriorityGrouping>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f78:	f7ff fefc 	bl	8002d74 <__NVIC_GetPriorityGrouping>
 8002f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	6978      	ldr	r0, [r7, #20]
 8002f84:	f7ff ff8e 	bl	8002ea4 <NVIC_EncodePriority>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff5d 	bl	8002e50 <__NVIC_SetPriority>
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff feef 	bl	8002d90 <__NVIC_EnableIRQ>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff feff 	bl	8002dcc <__NVIC_DisableIRQ>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ff94 	bl	8002f0c <SysTick_Config>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff09 	bl	8002e14 <__NVIC_ClearPendingIRQ>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	2201      	movs	r2, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003026:	4a04      	ldr	r2, [pc, #16]	@ (8003038 <HAL_EXTI_ClearPending+0x2c>)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6153      	str	r3, [r2, #20]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	40013c00 	.word	0x40013c00

0800303c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	@ 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	e177      	b.n	8003348 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003058:	2201      	movs	r2, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	429a      	cmp	r2, r3
 8003072:	f040 8166 	bne.w	8003342 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d005      	beq.n	800308e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800308a:	2b02      	cmp	r3, #2
 800308c:	d130      	bne.n	80030f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	2203      	movs	r2, #3
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030c4:	2201      	movs	r2, #1
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 0201 	and.w	r2, r3, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d017      	beq.n	800312c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d123      	bne.n	8003180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	08da      	lsrs	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3208      	adds	r2, #8
 8003140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	220f      	movs	r2, #15
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	08da      	lsrs	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3208      	adds	r2, #8
 800317a:	69b9      	ldr	r1, [r7, #24]
 800317c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0203 	and.w	r2, r3, #3
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80c0 	beq.w	8003342 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	4b66      	ldr	r3, [pc, #408]	@ (8003360 <HAL_GPIO_Init+0x324>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	4a65      	ldr	r2, [pc, #404]	@ (8003360 <HAL_GPIO_Init+0x324>)
 80031cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031d2:	4b63      	ldr	r3, [pc, #396]	@ (8003360 <HAL_GPIO_Init+0x324>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031de:	4a61      	ldr	r2, [pc, #388]	@ (8003364 <HAL_GPIO_Init+0x328>)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	3302      	adds	r3, #2
 80031e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	220f      	movs	r2, #15
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a58      	ldr	r2, [pc, #352]	@ (8003368 <HAL_GPIO_Init+0x32c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d037      	beq.n	800327a <HAL_GPIO_Init+0x23e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a57      	ldr	r2, [pc, #348]	@ (800336c <HAL_GPIO_Init+0x330>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d031      	beq.n	8003276 <HAL_GPIO_Init+0x23a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a56      	ldr	r2, [pc, #344]	@ (8003370 <HAL_GPIO_Init+0x334>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d02b      	beq.n	8003272 <HAL_GPIO_Init+0x236>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a55      	ldr	r2, [pc, #340]	@ (8003374 <HAL_GPIO_Init+0x338>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d025      	beq.n	800326e <HAL_GPIO_Init+0x232>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a54      	ldr	r2, [pc, #336]	@ (8003378 <HAL_GPIO_Init+0x33c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01f      	beq.n	800326a <HAL_GPIO_Init+0x22e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a53      	ldr	r2, [pc, #332]	@ (800337c <HAL_GPIO_Init+0x340>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d019      	beq.n	8003266 <HAL_GPIO_Init+0x22a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a52      	ldr	r2, [pc, #328]	@ (8003380 <HAL_GPIO_Init+0x344>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <HAL_GPIO_Init+0x226>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a51      	ldr	r2, [pc, #324]	@ (8003384 <HAL_GPIO_Init+0x348>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00d      	beq.n	800325e <HAL_GPIO_Init+0x222>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a50      	ldr	r2, [pc, #320]	@ (8003388 <HAL_GPIO_Init+0x34c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d007      	beq.n	800325a <HAL_GPIO_Init+0x21e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a4f      	ldr	r2, [pc, #316]	@ (800338c <HAL_GPIO_Init+0x350>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d101      	bne.n	8003256 <HAL_GPIO_Init+0x21a>
 8003252:	2309      	movs	r3, #9
 8003254:	e012      	b.n	800327c <HAL_GPIO_Init+0x240>
 8003256:	230a      	movs	r3, #10
 8003258:	e010      	b.n	800327c <HAL_GPIO_Init+0x240>
 800325a:	2308      	movs	r3, #8
 800325c:	e00e      	b.n	800327c <HAL_GPIO_Init+0x240>
 800325e:	2307      	movs	r3, #7
 8003260:	e00c      	b.n	800327c <HAL_GPIO_Init+0x240>
 8003262:	2306      	movs	r3, #6
 8003264:	e00a      	b.n	800327c <HAL_GPIO_Init+0x240>
 8003266:	2305      	movs	r3, #5
 8003268:	e008      	b.n	800327c <HAL_GPIO_Init+0x240>
 800326a:	2304      	movs	r3, #4
 800326c:	e006      	b.n	800327c <HAL_GPIO_Init+0x240>
 800326e:	2303      	movs	r3, #3
 8003270:	e004      	b.n	800327c <HAL_GPIO_Init+0x240>
 8003272:	2302      	movs	r3, #2
 8003274:	e002      	b.n	800327c <HAL_GPIO_Init+0x240>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_GPIO_Init+0x240>
 800327a:	2300      	movs	r3, #0
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	f002 0203 	and.w	r2, r2, #3
 8003282:	0092      	lsls	r2, r2, #2
 8003284:	4093      	lsls	r3, r2
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800328c:	4935      	ldr	r1, [pc, #212]	@ (8003364 <HAL_GPIO_Init+0x328>)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	3302      	adds	r3, #2
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800329a:	4b3d      	ldr	r3, [pc, #244]	@ (8003390 <HAL_GPIO_Init+0x354>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032be:	4a34      	ldr	r2, [pc, #208]	@ (8003390 <HAL_GPIO_Init+0x354>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c4:	4b32      	ldr	r3, [pc, #200]	@ (8003390 <HAL_GPIO_Init+0x354>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e8:	4a29      	ldr	r2, [pc, #164]	@ (8003390 <HAL_GPIO_Init+0x354>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ee:	4b28      	ldr	r3, [pc, #160]	@ (8003390 <HAL_GPIO_Init+0x354>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003312:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <HAL_GPIO_Init+0x354>)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003318:	4b1d      	ldr	r3, [pc, #116]	@ (8003390 <HAL_GPIO_Init+0x354>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800333c:	4a14      	ldr	r2, [pc, #80]	@ (8003390 <HAL_GPIO_Init+0x354>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3301      	adds	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b0f      	cmp	r3, #15
 800334c:	f67f ae84 	bls.w	8003058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	3724      	adds	r7, #36	@ 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
 8003364:	40013800 	.word	0x40013800
 8003368:	40020000 	.word	0x40020000
 800336c:	40020400 	.word	0x40020400
 8003370:	40020800 	.word	0x40020800
 8003374:	40020c00 	.word	0x40020c00
 8003378:	40021000 	.word	0x40021000
 800337c:	40021400 	.word	0x40021400
 8003380:	40021800 	.word	0x40021800
 8003384:	40021c00 	.word	0x40021c00
 8003388:	40022000 	.word	0x40022000
 800338c:	40022400 	.word	0x40022400
 8003390:	40013c00 	.word	0x40013c00

08003394 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e0d9      	b.n	8003564 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b0:	2201      	movs	r2, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	f040 80c9 	bne.w	800355e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80033cc:	4a6b      	ldr	r2, [pc, #428]	@ (800357c <HAL_GPIO_DeInit+0x1e8>)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	089b      	lsrs	r3, r3, #2
 80033d2:	3302      	adds	r3, #2
 80033d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	220f      	movs	r2, #15
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	4013      	ands	r3, r2
 80033ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a63      	ldr	r2, [pc, #396]	@ (8003580 <HAL_GPIO_DeInit+0x1ec>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d037      	beq.n	8003466 <HAL_GPIO_DeInit+0xd2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a62      	ldr	r2, [pc, #392]	@ (8003584 <HAL_GPIO_DeInit+0x1f0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d031      	beq.n	8003462 <HAL_GPIO_DeInit+0xce>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a61      	ldr	r2, [pc, #388]	@ (8003588 <HAL_GPIO_DeInit+0x1f4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d02b      	beq.n	800345e <HAL_GPIO_DeInit+0xca>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a60      	ldr	r2, [pc, #384]	@ (800358c <HAL_GPIO_DeInit+0x1f8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d025      	beq.n	800345a <HAL_GPIO_DeInit+0xc6>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a5f      	ldr	r2, [pc, #380]	@ (8003590 <HAL_GPIO_DeInit+0x1fc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01f      	beq.n	8003456 <HAL_GPIO_DeInit+0xc2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a5e      	ldr	r2, [pc, #376]	@ (8003594 <HAL_GPIO_DeInit+0x200>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d019      	beq.n	8003452 <HAL_GPIO_DeInit+0xbe>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a5d      	ldr	r2, [pc, #372]	@ (8003598 <HAL_GPIO_DeInit+0x204>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_GPIO_DeInit+0xba>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a5c      	ldr	r2, [pc, #368]	@ (800359c <HAL_GPIO_DeInit+0x208>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00d      	beq.n	800344a <HAL_GPIO_DeInit+0xb6>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a5b      	ldr	r2, [pc, #364]	@ (80035a0 <HAL_GPIO_DeInit+0x20c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <HAL_GPIO_DeInit+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a5a      	ldr	r2, [pc, #360]	@ (80035a4 <HAL_GPIO_DeInit+0x210>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_GPIO_DeInit+0xae>
 800343e:	2309      	movs	r3, #9
 8003440:	e012      	b.n	8003468 <HAL_GPIO_DeInit+0xd4>
 8003442:	230a      	movs	r3, #10
 8003444:	e010      	b.n	8003468 <HAL_GPIO_DeInit+0xd4>
 8003446:	2308      	movs	r3, #8
 8003448:	e00e      	b.n	8003468 <HAL_GPIO_DeInit+0xd4>
 800344a:	2307      	movs	r3, #7
 800344c:	e00c      	b.n	8003468 <HAL_GPIO_DeInit+0xd4>
 800344e:	2306      	movs	r3, #6
 8003450:	e00a      	b.n	8003468 <HAL_GPIO_DeInit+0xd4>
 8003452:	2305      	movs	r3, #5
 8003454:	e008      	b.n	8003468 <HAL_GPIO_DeInit+0xd4>
 8003456:	2304      	movs	r3, #4
 8003458:	e006      	b.n	8003468 <HAL_GPIO_DeInit+0xd4>
 800345a:	2303      	movs	r3, #3
 800345c:	e004      	b.n	8003468 <HAL_GPIO_DeInit+0xd4>
 800345e:	2302      	movs	r3, #2
 8003460:	e002      	b.n	8003468 <HAL_GPIO_DeInit+0xd4>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_GPIO_DeInit+0xd4>
 8003466:	2300      	movs	r3, #0
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	f002 0203 	and.w	r2, r2, #3
 800346e:	0092      	lsls	r2, r2, #2
 8003470:	4093      	lsls	r3, r2
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	d132      	bne.n	80034de <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003478:	4b4b      	ldr	r3, [pc, #300]	@ (80035a8 <HAL_GPIO_DeInit+0x214>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	43db      	mvns	r3, r3
 8003480:	4949      	ldr	r1, [pc, #292]	@ (80035a8 <HAL_GPIO_DeInit+0x214>)
 8003482:	4013      	ands	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003486:	4b48      	ldr	r3, [pc, #288]	@ (80035a8 <HAL_GPIO_DeInit+0x214>)
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	43db      	mvns	r3, r3
 800348e:	4946      	ldr	r1, [pc, #280]	@ (80035a8 <HAL_GPIO_DeInit+0x214>)
 8003490:	4013      	ands	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003494:	4b44      	ldr	r3, [pc, #272]	@ (80035a8 <HAL_GPIO_DeInit+0x214>)
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	43db      	mvns	r3, r3
 800349c:	4942      	ldr	r1, [pc, #264]	@ (80035a8 <HAL_GPIO_DeInit+0x214>)
 800349e:	4013      	ands	r3, r2
 80034a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034a2:	4b41      	ldr	r3, [pc, #260]	@ (80035a8 <HAL_GPIO_DeInit+0x214>)
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	493f      	ldr	r1, [pc, #252]	@ (80035a8 <HAL_GPIO_DeInit+0x214>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	220f      	movs	r2, #15
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80034c0:	4a2e      	ldr	r2, [pc, #184]	@ (800357c <HAL_GPIO_DeInit+0x1e8>)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	3302      	adds	r3, #2
 80034c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	43da      	mvns	r2, r3
 80034d0:	482a      	ldr	r0, [pc, #168]	@ (800357c <HAL_GPIO_DeInit+0x1e8>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	400a      	ands	r2, r1
 80034d8:	3302      	adds	r3, #2
 80034da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2103      	movs	r1, #3
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	401a      	ands	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	08da      	lsrs	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3208      	adds	r2, #8
 80034fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	220f      	movs	r2, #15
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	08d2      	lsrs	r2, r2, #3
 8003514:	4019      	ands	r1, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3208      	adds	r2, #8
 800351a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2103      	movs	r1, #3
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	401a      	ands	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	2101      	movs	r1, #1
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	401a      	ands	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	2103      	movs	r1, #3
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	401a      	ands	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	3301      	adds	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b0f      	cmp	r3, #15
 8003568:	f67f af22 	bls.w	80033b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40013800 	.word	0x40013800
 8003580:	40020000 	.word	0x40020000
 8003584:	40020400 	.word	0x40020400
 8003588:	40020800 	.word	0x40020800
 800358c:	40020c00 	.word	0x40020c00
 8003590:	40021000 	.word	0x40021000
 8003594:	40021400 	.word	0x40021400
 8003598:	40021800 	.word	0x40021800
 800359c:	40021c00 	.word	0x40021c00
 80035a0:	40022000 	.word	0x40022000
 80035a4:	40022400 	.word	0x40022400
 80035a8:	40013c00 	.word	0x40013c00

080035ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
 80035b8:	4613      	mov	r3, r2
 80035ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035bc:	787b      	ldrb	r3, [r7, #1]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035c2:	887a      	ldrh	r2, [r7, #2]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035c8:	e003      	b.n	80035d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ca:	887b      	ldrh	r3, [r7, #2]
 80035cc:	041a      	lsls	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	619a      	str	r2, [r3, #24]
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035ea:	4b08      	ldr	r3, [pc, #32]	@ (800360c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d006      	beq.n	8003604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035f6:	4a05      	ldr	r2, [pc, #20]	@ (800360c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f806 	bl	8003610 <HAL_GPIO_EXTI_Callback>
  }
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40013c00 	.word	0x40013c00

08003610 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e12b      	b.n	8003892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe fbd4 	bl	8001dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	@ 0x24
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800367a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800368a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800368c:	f001 ff06 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8003690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4a81      	ldr	r2, [pc, #516]	@ (800389c <HAL_I2C_Init+0x274>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d807      	bhi.n	80036ac <HAL_I2C_Init+0x84>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a80      	ldr	r2, [pc, #512]	@ (80038a0 <HAL_I2C_Init+0x278>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	bf94      	ite	ls
 80036a4:	2301      	movls	r3, #1
 80036a6:	2300      	movhi	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e006      	b.n	80036ba <HAL_I2C_Init+0x92>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a7d      	ldr	r2, [pc, #500]	@ (80038a4 <HAL_I2C_Init+0x27c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	bf94      	ite	ls
 80036b4:	2301      	movls	r3, #1
 80036b6:	2300      	movhi	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0e7      	b.n	8003892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a78      	ldr	r2, [pc, #480]	@ (80038a8 <HAL_I2C_Init+0x280>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0c9b      	lsrs	r3, r3, #18
 80036cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a6a      	ldr	r2, [pc, #424]	@ (800389c <HAL_I2C_Init+0x274>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d802      	bhi.n	80036fc <HAL_I2C_Init+0xd4>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	3301      	adds	r3, #1
 80036fa:	e009      	b.n	8003710 <HAL_I2C_Init+0xe8>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003702:	fb02 f303 	mul.w	r3, r2, r3
 8003706:	4a69      	ldr	r2, [pc, #420]	@ (80038ac <HAL_I2C_Init+0x284>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	3301      	adds	r3, #1
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	430b      	orrs	r3, r1
 8003716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003722:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	495c      	ldr	r1, [pc, #368]	@ (800389c <HAL_I2C_Init+0x274>)
 800372c:	428b      	cmp	r3, r1
 800372e:	d819      	bhi.n	8003764 <HAL_I2C_Init+0x13c>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1e59      	subs	r1, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fbb1 f3f3 	udiv	r3, r1, r3
 800373e:	1c59      	adds	r1, r3, #1
 8003740:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003744:	400b      	ands	r3, r1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_I2C_Init+0x138>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1e59      	subs	r1, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fbb1 f3f3 	udiv	r3, r1, r3
 8003758:	3301      	adds	r3, #1
 800375a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375e:	e051      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 8003760:	2304      	movs	r3, #4
 8003762:	e04f      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d111      	bne.n	8003790 <HAL_I2C_Init+0x168>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1e58      	subs	r0, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	440b      	add	r3, r1
 800377a:	fbb0 f3f3 	udiv	r3, r0, r3
 800377e:	3301      	adds	r3, #1
 8003780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e012      	b.n	80037b6 <HAL_I2C_Init+0x18e>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1e58      	subs	r0, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	0099      	lsls	r1, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a6:	3301      	adds	r3, #1
 80037a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf0c      	ite	eq
 80037b0:	2301      	moveq	r3, #1
 80037b2:	2300      	movne	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Init+0x196>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e022      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10e      	bne.n	80037e4 <HAL_I2C_Init+0x1bc>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1e58      	subs	r0, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	460b      	mov	r3, r1
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	440b      	add	r3, r1
 80037d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d8:	3301      	adds	r3, #1
 80037da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037e2:	e00f      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e58      	subs	r0, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	0099      	lsls	r1, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	6809      	ldr	r1, [r1, #0]
 8003808:	4313      	orrs	r3, r2
 800380a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003832:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6911      	ldr	r1, [r2, #16]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68d2      	ldr	r2, [r2, #12]
 800383e:	4311      	orrs	r1, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	000186a0 	.word	0x000186a0
 80038a0:	001e847f 	.word	0x001e847f
 80038a4:	003d08ff 	.word	0x003d08ff
 80038a8:	431bde83 	.word	0x431bde83
 80038ac:	10624dd3 	.word	0x10624dd3

080038b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	4608      	mov	r0, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	461a      	mov	r2, r3
 80038be:	4603      	mov	r3, r0
 80038c0:	817b      	strh	r3, [r7, #10]
 80038c2:	460b      	mov	r3, r1
 80038c4:	813b      	strh	r3, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038ca:	f7ff f9ff 	bl	8002ccc <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b20      	cmp	r3, #32
 80038da:	f040 80d9 	bne.w	8003a90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2319      	movs	r3, #25
 80038e4:	2201      	movs	r2, #1
 80038e6:	496d      	ldr	r1, [pc, #436]	@ (8003a9c <HAL_I2C_Mem_Write+0x1ec>)
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fc8b 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
 80038f6:	e0cc      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_I2C_Mem_Write+0x56>
 8003902:	2302      	movs	r3, #2
 8003904:	e0c5      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d007      	beq.n	800392c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800393a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2221      	movs	r2, #33	@ 0x21
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2240      	movs	r2, #64	@ 0x40
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a3a      	ldr	r2, [r7, #32]
 8003956:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800395c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a4d      	ldr	r2, [pc, #308]	@ (8003aa0 <HAL_I2C_Mem_Write+0x1f0>)
 800396c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800396e:	88f8      	ldrh	r0, [r7, #6]
 8003970:	893a      	ldrh	r2, [r7, #8]
 8003972:	8979      	ldrh	r1, [r7, #10]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	4603      	mov	r3, r0
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fac2 	bl	8003f08 <I2C_RequestMemoryWrite>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d052      	beq.n	8003a30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e081      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fd50 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00d      	beq.n	80039ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d107      	bne.n	80039b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06b      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	781a      	ldrb	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d11b      	bne.n	8003a30 <HAL_I2C_Mem_Write+0x180>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d017      	beq.n	8003a30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1aa      	bne.n	800398e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fd43 	bl	80044c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00d      	beq.n	8003a64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d107      	bne.n	8003a60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e016      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	00100002 	.word	0x00100002
 8003aa0:	ffff0000 	.word	0xffff0000

08003aa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08c      	sub	sp, #48	@ 0x30
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	4608      	mov	r0, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	817b      	strh	r3, [r7, #10]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	813b      	strh	r3, [r7, #8]
 8003aba:	4613      	mov	r3, r2
 8003abc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003abe:	f7ff f905 	bl	8002ccc <HAL_GetTick>
 8003ac2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	f040 8214 	bne.w	8003efa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	2319      	movs	r3, #25
 8003ad8:	2201      	movs	r2, #1
 8003ada:	497b      	ldr	r1, [pc, #492]	@ (8003cc8 <HAL_I2C_Mem_Read+0x224>)
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fb91 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e207      	b.n	8003efc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_I2C_Mem_Read+0x56>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e200      	b.n	8003efc <HAL_I2C_Mem_Read+0x458>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d007      	beq.n	8003b20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2222      	movs	r2, #34	@ 0x22
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2240      	movs	r2, #64	@ 0x40
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a5b      	ldr	r2, [pc, #364]	@ (8003ccc <HAL_I2C_Mem_Read+0x228>)
 8003b60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b62:	88f8      	ldrh	r0, [r7, #6]
 8003b64:	893a      	ldrh	r2, [r7, #8]
 8003b66:	8979      	ldrh	r1, [r7, #10]
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	4603      	mov	r3, r0
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fa5e 	bl	8004034 <I2C_RequestMemoryRead>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e1bc      	b.n	8003efc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d113      	bne.n	8003bb2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	623b      	str	r3, [r7, #32]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	e190      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d11b      	bne.n	8003bf2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e170      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d11b      	bne.n	8003c32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	e150      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c48:	e144      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	f200 80f1 	bhi.w	8003e36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d123      	bne.n	8003ca4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fc79 	bl	8004558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e145      	b.n	8003efc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ca2:	e117      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d14e      	bne.n	8003d4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	4906      	ldr	r1, [pc, #24]	@ (8003cd0 <HAL_I2C_Mem_Read+0x22c>)
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 faa4 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e11a      	b.n	8003efc <HAL_I2C_Mem_Read+0x458>
 8003cc6:	bf00      	nop
 8003cc8:	00100002 	.word	0x00100002
 8003ccc:	ffff0000 	.word	0xffff0000
 8003cd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d48:	e0c4      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d50:	2200      	movs	r2, #0
 8003d52:	496c      	ldr	r1, [pc, #432]	@ (8003f04 <HAL_I2C_Mem_Read+0x460>)
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fa55 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0cb      	b.n	8003efc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dac:	2200      	movs	r2, #0
 8003dae:	4955      	ldr	r1, [pc, #340]	@ (8003f04 <HAL_I2C_Mem_Read+0x460>)
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fa27 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e09d      	b.n	8003efc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e34:	e04e      	b.n	8003ed4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fb8c 	bl	8004558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e058      	b.n	8003efc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d124      	bne.n	8003ed4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d107      	bne.n	8003ea2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f47f aeb6 	bne.w	8003c4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3728      	adds	r7, #40	@ 0x28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	00010004 	.word	0x00010004

08003f08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	4608      	mov	r0, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	461a      	mov	r2, r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	817b      	strh	r3, [r7, #10]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	813b      	strh	r3, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f960 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00d      	beq.n	8003f66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f58:	d103      	bne.n	8003f62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e05f      	b.n	8004026 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f66:	897b      	ldrh	r3, [r7, #10]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	492d      	ldr	r1, [pc, #180]	@ (8004030 <I2C_RequestMemoryWrite+0x128>)
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f9bb 	bl	80042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e04c      	b.n	8004026 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa4:	6a39      	ldr	r1, [r7, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fa46 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d107      	bne.n	8003fca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e02b      	b.n	8004026 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd4:	893b      	ldrh	r3, [r7, #8]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]
 8003fde:	e021      	b.n	8004024 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fe0:	893b      	ldrh	r3, [r7, #8]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff0:	6a39      	ldr	r1, [r7, #32]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fa20 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d107      	bne.n	8004016 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004014:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e005      	b.n	8004026 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800401a:	893b      	ldrh	r3, [r7, #8]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	00010002 	.word	0x00010002

08004034 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	461a      	mov	r2, r3
 8004042:	4603      	mov	r3, r0
 8004044:	817b      	strh	r3, [r7, #10]
 8004046:	460b      	mov	r3, r1
 8004048:	813b      	strh	r3, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800405c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800406c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	2200      	movs	r2, #0
 8004076:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f8c2 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004094:	d103      	bne.n	800409e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800409c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e0aa      	b.n	80041f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040a2:	897b      	ldrh	r3, [r7, #10]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	6a3a      	ldr	r2, [r7, #32]
 80040b6:	4952      	ldr	r1, [pc, #328]	@ (8004200 <I2C_RequestMemoryRead+0x1cc>)
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f91d 	bl	80042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e097      	b.n	80041f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e0:	6a39      	ldr	r1, [r7, #32]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f9a8 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00d      	beq.n	800410a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d107      	bne.n	8004106 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004104:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e076      	b.n	80041f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d105      	bne.n	800411c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004110:	893b      	ldrh	r3, [r7, #8]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	611a      	str	r2, [r3, #16]
 800411a:	e021      	b.n	8004160 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800411c:	893b      	ldrh	r3, [r7, #8]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	b29b      	uxth	r3, r3
 8004122:	b2da      	uxtb	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	6a39      	ldr	r1, [r7, #32]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f982 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00d      	beq.n	8004156 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	2b04      	cmp	r3, #4
 8004140:	d107      	bne.n	8004152 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004150:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e050      	b.n	80041f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004156:	893b      	ldrh	r3, [r7, #8]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004162:	6a39      	ldr	r1, [r7, #32]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f967 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00d      	beq.n	800418c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	2b04      	cmp	r3, #4
 8004176:	d107      	bne.n	8004188 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004186:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e035      	b.n	80041f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800419a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f82b 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c2:	d103      	bne.n	80041cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e013      	b.n	80041f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041d0:	897b      	ldrh	r3, [r7, #10]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	6a3a      	ldr	r2, [r7, #32]
 80041e4:	4906      	ldr	r1, [pc, #24]	@ (8004200 <I2C_RequestMemoryRead+0x1cc>)
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f886 	bl	80042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	00010002 	.word	0x00010002

08004204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004214:	e048      	b.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800421c:	d044      	beq.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421e:	f7fe fd55 	bl	8002ccc <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <I2C_WaitOnFlagUntilTimeout+0x30>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d139      	bne.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	0c1b      	lsrs	r3, r3, #16
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d10d      	bne.n	800425a <I2C_WaitOnFlagUntilTimeout+0x56>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	43da      	mvns	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	e00c      	b.n	8004274 <I2C_WaitOnFlagUntilTimeout+0x70>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	43da      	mvns	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	429a      	cmp	r2, r3
 8004278:	d116      	bne.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	f043 0220 	orr.w	r2, r3, #32
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e023      	b.n	80042f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	0c1b      	lsrs	r3, r3, #16
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d10d      	bne.n	80042ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	43da      	mvns	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	e00c      	b.n	80042e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4013      	ands	r3, r2
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d093      	beq.n	8004216 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004306:	e071      	b.n	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004316:	d123      	bne.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004326:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004330:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	f043 0204 	orr.w	r2, r3, #4
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e067      	b.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004366:	d041      	beq.n	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004368:	f7fe fcb0 	bl	8002ccc <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d302      	bcc.n	800437e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d136      	bne.n	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d10c      	bne.n	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	43da      	mvns	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4013      	ands	r3, r2
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	bf14      	ite	ne
 800439a:	2301      	movne	r3, #1
 800439c:	2300      	moveq	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	e00b      	b.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	43da      	mvns	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	4013      	ands	r3, r2
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e021      	b.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10c      	bne.n	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	43da      	mvns	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4013      	ands	r3, r2
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e00b      	b.n	8004428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	43da      	mvns	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4013      	ands	r3, r2
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	bf14      	ite	ne
 8004422:	2301      	movne	r3, #1
 8004424:	2300      	moveq	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	f47f af6d 	bne.w	8004308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004444:	e034      	b.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f8e3 	bl	8004612 <I2C_IsAcknowledgeFailed>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e034      	b.n	80044c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800445c:	d028      	beq.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7fe fc35 	bl	8002ccc <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d11d      	bne.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447e:	2b80      	cmp	r3, #128	@ 0x80
 8004480:	d016      	beq.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e007      	b.n	80044c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ba:	2b80      	cmp	r3, #128	@ 0x80
 80044bc:	d1c3      	bne.n	8004446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044d4:	e034      	b.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f89b 	bl	8004612 <I2C_IsAcknowledgeFailed>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e034      	b.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044ec:	d028      	beq.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ee:	f7fe fbed 	bl	8002ccc <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d302      	bcc.n	8004504 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d11d      	bne.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b04      	cmp	r3, #4
 8004510:	d016      	beq.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e007      	b.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d1c3      	bne.n	80044d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004564:	e049      	b.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b10      	cmp	r3, #16
 8004572:	d119      	bne.n	80045a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0210 	mvn.w	r2, #16
 800457c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e030      	b.n	800460a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a8:	f7fe fb90 	bl	8002ccc <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d302      	bcc.n	80045be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11d      	bne.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c8:	2b40      	cmp	r3, #64	@ 0x40
 80045ca:	d016      	beq.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e007      	b.n	800460a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004604:	2b40      	cmp	r3, #64	@ 0x40
 8004606:	d1ae      	bne.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004628:	d11b      	bne.n	8004662 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004632:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	f043 0204 	orr.w	r2, r3, #4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e0bf      	b.n	8004802 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fd fc1a 	bl	8001ed0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80046b2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6999      	ldr	r1, [r3, #24]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046c8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6899      	ldr	r1, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b4a      	ldr	r3, [pc, #296]	@ (800480c <HAL_LTDC_Init+0x19c>)
 80046e4:	400b      	ands	r3, r1
 80046e6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6899      	ldr	r1, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68d9      	ldr	r1, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b3e      	ldr	r3, [pc, #248]	@ (800480c <HAL_LTDC_Init+0x19c>)
 8004712:	400b      	ands	r3, r1
 8004714:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68d9      	ldr	r1, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1a      	ldr	r2, [r3, #32]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6919      	ldr	r1, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b33      	ldr	r3, [pc, #204]	@ (800480c <HAL_LTDC_Init+0x19c>)
 8004740:	400b      	ands	r3, r1
 8004742:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6919      	ldr	r1, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6959      	ldr	r1, [r3, #20]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b27      	ldr	r3, [pc, #156]	@ (800480c <HAL_LTDC_Init+0x19c>)
 800476e:	400b      	ands	r3, r1
 8004770:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6959      	ldr	r1, [r3, #20]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80047b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0206 	orr.w	r2, r2, #6
 80047de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	f000f800 	.word	0xf000f800

08004810 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004810:	b5b0      	push	{r4, r5, r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_LTDC_ConfigLayer+0x1a>
 8004826:	2302      	movs	r3, #2
 8004828:	e02c      	b.n	8004884 <HAL_LTDC_ConfigLayer+0x74>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2202      	movs	r2, #2
 8004836:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2134      	movs	r1, #52	@ 0x34
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	4413      	add	r3, r2
 8004846:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4614      	mov	r4, r2
 800484e:	461d      	mov	r5, r3
 8004850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800485a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f811 	bl	800488c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2201      	movs	r2, #1
 8004870:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bdb0      	pop	{r4, r5, r7, pc}

0800488c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800488c:	b480      	push	{r7}
 800488e:	b089      	sub	sp, #36	@ 0x24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a8:	4413      	add	r3, r2
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	01db      	lsls	r3, r3, #7
 80048b8:	4413      	add	r3, r2
 80048ba:	3384      	adds	r3, #132	@ 0x84
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	4611      	mov	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	01d2      	lsls	r2, r2, #7
 80048c8:	440a      	add	r2, r1
 80048ca:	3284      	adds	r2, #132	@ 0x84
 80048cc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80048d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048e2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048e4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4619      	mov	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	01db      	lsls	r3, r3, #7
 80048f0:	440b      	add	r3, r1
 80048f2:	3384      	adds	r3, #132	@ 0x84
 80048f4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800490a:	4413      	add	r3, r2
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	01db      	lsls	r3, r3, #7
 800491a:	4413      	add	r3, r2
 800491c:	3384      	adds	r3, #132	@ 0x84
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	4611      	mov	r1, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	01d2      	lsls	r2, r2, #7
 800492a:	440a      	add	r2, r1
 800492c:	3284      	adds	r2, #132	@ 0x84
 800492e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004932:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004942:	4413      	add	r3, r2
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4619      	mov	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	01db      	lsls	r3, r3, #7
 8004950:	440b      	add	r3, r1
 8004952:	3384      	adds	r3, #132	@ 0x84
 8004954:	4619      	mov	r1, r3
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4313      	orrs	r3, r2
 800495a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	01db      	lsls	r3, r3, #7
 8004966:	4413      	add	r3, r2
 8004968:	3384      	adds	r3, #132	@ 0x84
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	4611      	mov	r1, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	01d2      	lsls	r2, r2, #7
 8004976:	440a      	add	r2, r1
 8004978:	3284      	adds	r2, #132	@ 0x84
 800497a:	f023 0307 	bic.w	r3, r3, #7
 800497e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	01db      	lsls	r3, r3, #7
 800498a:	4413      	add	r3, r2
 800498c:	3384      	adds	r3, #132	@ 0x84
 800498e:	461a      	mov	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80049a6:	041b      	lsls	r3, r3, #16
 80049a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	061b      	lsls	r3, r3, #24
 80049b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	01db      	lsls	r3, r3, #7
 80049bc:	4413      	add	r3, r2
 80049be:	3384      	adds	r3, #132	@ 0x84
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	01db      	lsls	r3, r3, #7
 80049cc:	4413      	add	r3, r2
 80049ce:	3384      	adds	r3, #132	@ 0x84
 80049d0:	461a      	mov	r2, r3
 80049d2:	2300      	movs	r3, #0
 80049d4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80049dc:	461a      	mov	r2, r3
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4619      	mov	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	01db      	lsls	r3, r3, #7
 80049f0:	440b      	add	r3, r1
 80049f2:	3384      	adds	r3, #132	@ 0x84
 80049f4:	4619      	mov	r1, r3
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	01db      	lsls	r3, r3, #7
 8004a06:	4413      	add	r3, r2
 8004a08:	3384      	adds	r3, #132	@ 0x84
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	4611      	mov	r1, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	01d2      	lsls	r2, r2, #7
 8004a16:	440a      	add	r2, r1
 8004a18:	3284      	adds	r2, #132	@ 0x84
 8004a1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a1e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	01db      	lsls	r3, r3, #7
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3384      	adds	r3, #132	@ 0x84
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	01db      	lsls	r3, r3, #7
 8004a40:	4413      	add	r3, r2
 8004a42:	3384      	adds	r3, #132	@ 0x84
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	01d2      	lsls	r2, r2, #7
 8004a50:	440a      	add	r2, r1
 8004a52:	3284      	adds	r2, #132	@ 0x84
 8004a54:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004a58:	f023 0307 	bic.w	r3, r3, #7
 8004a5c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	6809      	ldr	r1, [r1, #0]
 8004a6a:	4608      	mov	r0, r1
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	01c9      	lsls	r1, r1, #7
 8004a70:	4401      	add	r1, r0
 8004a72:	3184      	adds	r1, #132	@ 0x84
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	01db      	lsls	r3, r3, #7
 8004a82:	4413      	add	r3, r2
 8004a84:	3384      	adds	r3, #132	@ 0x84
 8004a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	01db      	lsls	r3, r3, #7
 8004a92:	4413      	add	r3, r2
 8004a94:	3384      	adds	r3, #132	@ 0x84
 8004a96:	461a      	mov	r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	01db      	lsls	r3, r3, #7
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3384      	adds	r3, #132	@ 0x84
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004aba:	2304      	movs	r3, #4
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e01b      	b.n	8004af8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d102      	bne.n	8004ace <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	e014      	b.n	8004af8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d00b      	beq.n	8004aee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d007      	beq.n	8004aee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d003      	beq.n	8004aee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004aea:	2b07      	cmp	r3, #7
 8004aec:	d102      	bne.n	8004af4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004aee:	2302      	movs	r3, #2
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	e001      	b.n	8004af8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004af4:	2301      	movs	r3, #1
 8004af6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	01db      	lsls	r3, r3, #7
 8004b02:	4413      	add	r3, r2
 8004b04:	3384      	adds	r3, #132	@ 0x84
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	01d2      	lsls	r2, r2, #7
 8004b12:	440a      	add	r2, r1
 8004b14:	3284      	adds	r2, #132	@ 0x84
 8004b16:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6859      	ldr	r1, [r3, #4]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	1acb      	subs	r3, r1, r3
 8004b32:	69f9      	ldr	r1, [r7, #28]
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	6809      	ldr	r1, [r1, #0]
 8004b3e:	4608      	mov	r0, r1
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	01c9      	lsls	r1, r1, #7
 8004b44:	4401      	add	r1, r0
 8004b46:	3184      	adds	r1, #132	@ 0x84
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	01db      	lsls	r3, r3, #7
 8004b56:	4413      	add	r3, r2
 8004b58:	3384      	adds	r3, #132	@ 0x84
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	4611      	mov	r1, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	01d2      	lsls	r2, r2, #7
 8004b66:	440a      	add	r2, r1
 8004b68:	3284      	adds	r2, #132	@ 0x84
 8004b6a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b6e:	f023 0307 	bic.w	r3, r3, #7
 8004b72:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	01db      	lsls	r3, r3, #7
 8004b7e:	4413      	add	r3, r2
 8004b80:	3384      	adds	r3, #132	@ 0x84
 8004b82:	461a      	mov	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	01db      	lsls	r3, r3, #7
 8004b94:	4413      	add	r3, r2
 8004b96:	3384      	adds	r3, #132	@ 0x84
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	01d2      	lsls	r2, r2, #7
 8004ba4:	440a      	add	r2, r1
 8004ba6:	3284      	adds	r2, #132	@ 0x84
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	6013      	str	r3, [r2, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	3724      	adds	r7, #36	@ 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e267      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d075      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bda:	4b88      	ldr	r3, [pc, #544]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d00c      	beq.n	8004c00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be6:	4b85      	ldr	r3, [pc, #532]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d112      	bne.n	8004c18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf2:	4b82      	ldr	r3, [pc, #520]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bfe:	d10b      	bne.n	8004c18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c00:	4b7e      	ldr	r3, [pc, #504]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05b      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x108>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d157      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e242      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c20:	d106      	bne.n	8004c30 <HAL_RCC_OscConfig+0x74>
 8004c22:	4b76      	ldr	r3, [pc, #472]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a75      	ldr	r2, [pc, #468]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e01d      	b.n	8004c6c <HAL_RCC_OscConfig+0xb0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x98>
 8004c3a:	4b70      	ldr	r3, [pc, #448]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6f      	ldr	r2, [pc, #444]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b6d      	ldr	r3, [pc, #436]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6c      	ldr	r2, [pc, #432]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e00b      	b.n	8004c6c <HAL_RCC_OscConfig+0xb0>
 8004c54:	4b69      	ldr	r3, [pc, #420]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a68      	ldr	r2, [pc, #416]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	4b66      	ldr	r3, [pc, #408]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a65      	ldr	r2, [pc, #404]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d013      	beq.n	8004c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fe f82a 	bl	8002ccc <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fe f826 	bl	8002ccc <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	@ 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e207      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0xc0>
 8004c9a:	e014      	b.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fe f816 	bl	8002ccc <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fe f812 	bl	8002ccc <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	@ 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e1f3      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb6:	4b51      	ldr	r3, [pc, #324]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0xe8>
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d063      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cde:	4b47      	ldr	r3, [pc, #284]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d11c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cea:	4b44      	ldr	r3, [pc, #272]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d116      	bne.n	8004d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf6:	4b41      	ldr	r3, [pc, #260]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_RCC_OscConfig+0x152>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d001      	beq.n	8004d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e1c7      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4937      	ldr	r1, [pc, #220]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	e03a      	b.n	8004d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d2c:	4b34      	ldr	r3, [pc, #208]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fd ffcb 	bl	8002ccc <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3a:	f7fd ffc7 	bl	8002ccc <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e1a8      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d58:	4b28      	ldr	r3, [pc, #160]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4925      	ldr	r1, [pc, #148]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]
 8004d6c:	e015      	b.n	8004d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6e:	4b24      	ldr	r3, [pc, #144]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fd ffaa 	bl	8002ccc <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d7c:	f7fd ffa6 	bl	8002ccc <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e187      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d036      	beq.n	8004e14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d016      	beq.n	8004ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dae:	4b15      	ldr	r3, [pc, #84]	@ (8004e04 <HAL_RCC_OscConfig+0x248>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db4:	f7fd ff8a 	bl	8002ccc <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dbc:	f7fd ff86 	bl	8002ccc <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e167      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dce:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x200>
 8004dda:	e01b      	b.n	8004e14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ddc:	4b09      	ldr	r3, [pc, #36]	@ (8004e04 <HAL_RCC_OscConfig+0x248>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de2:	f7fd ff73 	bl	8002ccc <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de8:	e00e      	b.n	8004e08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dea:	f7fd ff6f 	bl	8002ccc <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d907      	bls.n	8004e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e150      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	42470000 	.word	0x42470000
 8004e04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e08:	4b88      	ldr	r3, [pc, #544]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1ea      	bne.n	8004dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8097 	beq.w	8004f50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e22:	2300      	movs	r3, #0
 8004e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e26:	4b81      	ldr	r3, [pc, #516]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10f      	bne.n	8004e52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	4b7d      	ldr	r3, [pc, #500]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	4a7c      	ldr	r2, [pc, #496]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e42:	4b7a      	ldr	r3, [pc, #488]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e52:	4b77      	ldr	r3, [pc, #476]	@ (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d118      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e5e:	4b74      	ldr	r3, [pc, #464]	@ (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a73      	ldr	r2, [pc, #460]	@ (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6a:	f7fd ff2f 	bl	8002ccc <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e72:	f7fd ff2b 	bl	8002ccc <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e10c      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e84:	4b6a      	ldr	r3, [pc, #424]	@ (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d106      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x2ea>
 8004e98:	4b64      	ldr	r3, [pc, #400]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9c:	4a63      	ldr	r2, [pc, #396]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea4:	e01c      	b.n	8004ee0 <HAL_RCC_OscConfig+0x324>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b05      	cmp	r3, #5
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x30c>
 8004eae:	4b5f      	ldr	r3, [pc, #380]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb2:	4a5e      	ldr	r2, [pc, #376]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004eb4:	f043 0304 	orr.w	r3, r3, #4
 8004eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eba:	4b5c      	ldr	r3, [pc, #368]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCC_OscConfig+0x324>
 8004ec8:	4b58      	ldr	r3, [pc, #352]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ecc:	4a57      	ldr	r2, [pc, #348]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed4:	4b55      	ldr	r3, [pc, #340]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed8:	4a54      	ldr	r2, [pc, #336]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004eda:	f023 0304 	bic.w	r3, r3, #4
 8004ede:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fd fef0 	bl	8002ccc <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef0:	f7fd feec 	bl	8002ccc <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e0cb      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f06:	4b49      	ldr	r3, [pc, #292]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0ee      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x334>
 8004f12:	e014      	b.n	8004f3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f14:	f7fd feda 	bl	8002ccc <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1c:	f7fd fed6 	bl	8002ccc <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0b5      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f32:	4b3e      	ldr	r3, [pc, #248]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1ee      	bne.n	8004f1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d105      	bne.n	8004f50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f44:	4b39      	ldr	r3, [pc, #228]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f48:	4a38      	ldr	r2, [pc, #224]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80a1 	beq.w	800509c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f5a:	4b34      	ldr	r3, [pc, #208]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d05c      	beq.n	8005020 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d141      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6e:	4b31      	ldr	r3, [pc, #196]	@ (8005034 <HAL_RCC_OscConfig+0x478>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fd feaa 	bl	8002ccc <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fd fea6 	bl	8002ccc <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e087      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8e:	4b27      	ldr	r3, [pc, #156]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	019b      	lsls	r3, r3, #6
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	061b      	lsls	r3, r3, #24
 8004fbe:	491b      	ldr	r1, [pc, #108]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005034 <HAL_RCC_OscConfig+0x478>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fca:	f7fd fe7f 	bl	8002ccc <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd2:	f7fd fe7b 	bl	8002ccc <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e05c      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe4:	4b11      	ldr	r3, [pc, #68]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x416>
 8004ff0:	e054      	b.n	800509c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff2:	4b10      	ldr	r3, [pc, #64]	@ (8005034 <HAL_RCC_OscConfig+0x478>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fd fe68 	bl	8002ccc <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005000:	f7fd fe64 	bl	8002ccc <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e045      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005012:	4b06      	ldr	r3, [pc, #24]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0x444>
 800501e:	e03d      	b.n	800509c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d107      	bne.n	8005038 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e038      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
 800502c:	40023800 	.word	0x40023800
 8005030:	40007000 	.word	0x40007000
 8005034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005038:	4b1b      	ldr	r3, [pc, #108]	@ (80050a8 <HAL_RCC_OscConfig+0x4ec>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d028      	beq.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d121      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505e:	429a      	cmp	r2, r3
 8005060:	d11a      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800506e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005070:	4293      	cmp	r3, r2
 8005072:	d111      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	3b01      	subs	r3, #1
 8005082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d107      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800

080050ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0cc      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050c0:	4b68      	ldr	r3, [pc, #416]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d90c      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b65      	ldr	r3, [pc, #404]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b63      	ldr	r3, [pc, #396]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0b8      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d020      	beq.n	8005136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005100:	4b59      	ldr	r3, [pc, #356]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4a58      	ldr	r2, [pc, #352]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800510a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005118:	4b53      	ldr	r3, [pc, #332]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	4a52      	ldr	r2, [pc, #328]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005124:	4b50      	ldr	r3, [pc, #320]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	494d      	ldr	r1, [pc, #308]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d044      	beq.n	80051cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d107      	bne.n	800515a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b47      	ldr	r3, [pc, #284]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d119      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e07f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d003      	beq.n	800516a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005166:	2b03      	cmp	r3, #3
 8005168:	d107      	bne.n	800517a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516a:	4b3f      	ldr	r3, [pc, #252]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e06f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517a:	4b3b      	ldr	r3, [pc, #236]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e067      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800518a:	4b37      	ldr	r3, [pc, #220]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f023 0203 	bic.w	r2, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4934      	ldr	r1, [pc, #208]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	4313      	orrs	r3, r2
 800519a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800519c:	f7fd fd96 	bl	8002ccc <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a4:	f7fd fd92 	bl	8002ccc <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e04f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 020c 	and.w	r2, r3, #12
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d1eb      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051cc:	4b25      	ldr	r3, [pc, #148]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d20c      	bcs.n	80051f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051da:	4b22      	ldr	r3, [pc, #136]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e2:	4b20      	ldr	r3, [pc, #128]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d001      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e032      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005200:	4b19      	ldr	r3, [pc, #100]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4916      	ldr	r1, [pc, #88]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800521e:	4b12      	ldr	r3, [pc, #72]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	490e      	ldr	r1, [pc, #56]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005232:	f000 f821 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8005236:	4602      	mov	r2, r0
 8005238:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	091b      	lsrs	r3, r3, #4
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	490a      	ldr	r1, [pc, #40]	@ (800526c <HAL_RCC_ClockConfig+0x1c0>)
 8005244:	5ccb      	ldrb	r3, [r1, r3]
 8005246:	fa22 f303 	lsr.w	r3, r2, r3
 800524a:	4a09      	ldr	r2, [pc, #36]	@ (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800524c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800524e:	4b09      	ldr	r3, [pc, #36]	@ (8005274 <HAL_RCC_ClockConfig+0x1c8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fd fcf6 	bl	8002c44 <HAL_InitTick>

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40023c00 	.word	0x40023c00
 8005268:	40023800 	.word	0x40023800
 800526c:	080085f4 	.word	0x080085f4
 8005270:	20000010 	.word	0x20000010
 8005274:	20000014 	.word	0x20000014

08005278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800527c:	b094      	sub	sp, #80	@ 0x50
 800527e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005290:	4b79      	ldr	r3, [pc, #484]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 030c 	and.w	r3, r3, #12
 8005298:	2b08      	cmp	r3, #8
 800529a:	d00d      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x40>
 800529c:	2b08      	cmp	r3, #8
 800529e:	f200 80e1 	bhi.w	8005464 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x34>
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d003      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052aa:	e0db      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052ac:	4b73      	ldr	r3, [pc, #460]	@ (800547c <HAL_RCC_GetSysClockFreq+0x204>)
 80052ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052b0:	e0db      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052b2:	4b73      	ldr	r3, [pc, #460]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x208>)
 80052b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052b6:	e0d8      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d063      	beq.n	8005396 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	2200      	movs	r2, #0
 80052d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052e2:	2300      	movs	r3, #0
 80052e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052ea:	4622      	mov	r2, r4
 80052ec:	462b      	mov	r3, r5
 80052ee:	f04f 0000 	mov.w	r0, #0
 80052f2:	f04f 0100 	mov.w	r1, #0
 80052f6:	0159      	lsls	r1, r3, #5
 80052f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052fc:	0150      	lsls	r0, r2, #5
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4621      	mov	r1, r4
 8005304:	1a51      	subs	r1, r2, r1
 8005306:	6139      	str	r1, [r7, #16]
 8005308:	4629      	mov	r1, r5
 800530a:	eb63 0301 	sbc.w	r3, r3, r1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800531c:	4659      	mov	r1, fp
 800531e:	018b      	lsls	r3, r1, #6
 8005320:	4651      	mov	r1, sl
 8005322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005326:	4651      	mov	r1, sl
 8005328:	018a      	lsls	r2, r1, #6
 800532a:	4651      	mov	r1, sl
 800532c:	ebb2 0801 	subs.w	r8, r2, r1
 8005330:	4659      	mov	r1, fp
 8005332:	eb63 0901 	sbc.w	r9, r3, r1
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800534a:	4690      	mov	r8, r2
 800534c:	4699      	mov	r9, r3
 800534e:	4623      	mov	r3, r4
 8005350:	eb18 0303 	adds.w	r3, r8, r3
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	462b      	mov	r3, r5
 8005358:	eb49 0303 	adc.w	r3, r9, r3
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800536a:	4629      	mov	r1, r5
 800536c:	024b      	lsls	r3, r1, #9
 800536e:	4621      	mov	r1, r4
 8005370:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005374:	4621      	mov	r1, r4
 8005376:	024a      	lsls	r2, r1, #9
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
 800537c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800537e:	2200      	movs	r2, #0
 8005380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005388:	f7fa ff82 	bl	8000290 <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4613      	mov	r3, r2
 8005392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005394:	e058      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005396:	4b38      	ldr	r3, [pc, #224]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	099b      	lsrs	r3, r3, #6
 800539c:	2200      	movs	r2, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	4611      	mov	r1, r2
 80053a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	2300      	movs	r3, #0
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053b0:	4642      	mov	r2, r8
 80053b2:	464b      	mov	r3, r9
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f04f 0100 	mov.w	r1, #0
 80053bc:	0159      	lsls	r1, r3, #5
 80053be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053c2:	0150      	lsls	r0, r2, #5
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4641      	mov	r1, r8
 80053ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80053ce:	4649      	mov	r1, r9
 80053d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053e8:	ebb2 040a 	subs.w	r4, r2, sl
 80053ec:	eb63 050b 	sbc.w	r5, r3, fp
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	00eb      	lsls	r3, r5, #3
 80053fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fe:	00e2      	lsls	r2, r4, #3
 8005400:	4614      	mov	r4, r2
 8005402:	461d      	mov	r5, r3
 8005404:	4643      	mov	r3, r8
 8005406:	18e3      	adds	r3, r4, r3
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	464b      	mov	r3, r9
 800540c:	eb45 0303 	adc.w	r3, r5, r3
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800541e:	4629      	mov	r1, r5
 8005420:	028b      	lsls	r3, r1, #10
 8005422:	4621      	mov	r1, r4
 8005424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005428:	4621      	mov	r1, r4
 800542a:	028a      	lsls	r2, r1, #10
 800542c:	4610      	mov	r0, r2
 800542e:	4619      	mov	r1, r3
 8005430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005432:	2200      	movs	r2, #0
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	61fa      	str	r2, [r7, #28]
 8005438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800543c:	f7fa ff28 	bl	8000290 <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4613      	mov	r3, r2
 8005446:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005448:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	3301      	adds	r3, #1
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005458:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800545a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005462:	e002      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005464:	4b05      	ldr	r3, [pc, #20]	@ (800547c <HAL_RCC_GetSysClockFreq+0x204>)
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800546a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800546c:	4618      	mov	r0, r3
 800546e:	3750      	adds	r7, #80	@ 0x50
 8005470:	46bd      	mov	sp, r7
 8005472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800
 800547c:	00f42400 	.word	0x00f42400
 8005480:	007a1200 	.word	0x007a1200

08005484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005488:	4b03      	ldr	r3, [pc, #12]	@ (8005498 <HAL_RCC_GetHCLKFreq+0x14>)
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000010 	.word	0x20000010

0800549c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054a0:	f7ff fff0 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b05      	ldr	r3, [pc, #20]	@ (80054bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0a9b      	lsrs	r3, r3, #10
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4903      	ldr	r1, [pc, #12]	@ (80054c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40023800 	.word	0x40023800
 80054c0:	08008604 	.word	0x08008604

080054c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10b      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d105      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d075      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054f8:	4b91      	ldr	r3, [pc, #580]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054fe:	f7fd fbe5 	bl	8002ccc <HAL_GetTick>
 8005502:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005504:	e008      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005506:	f7fd fbe1 	bl	8002ccc <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e189      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005518:	4b8a      	ldr	r3, [pc, #552]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1f0      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	019a      	lsls	r2, r3, #6
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	071b      	lsls	r3, r3, #28
 800553c:	4981      	ldr	r1, [pc, #516]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01f      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005550:	4b7c      	ldr	r3, [pc, #496]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005556:	0f1b      	lsrs	r3, r3, #28
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	019a      	lsls	r2, r3, #6
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	061b      	lsls	r3, r3, #24
 800556a:	431a      	orrs	r2, r3
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	071b      	lsls	r3, r3, #28
 8005570:	4974      	ldr	r1, [pc, #464]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005578:	4b72      	ldr	r3, [pc, #456]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800557a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800557e:	f023 021f 	bic.w	r2, r3, #31
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	3b01      	subs	r3, #1
 8005588:	496e      	ldr	r1, [pc, #440]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00d      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	019a      	lsls	r2, r3, #6
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	061b      	lsls	r3, r3, #24
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	071b      	lsls	r3, r3, #28
 80055b0:	4964      	ldr	r1, [pc, #400]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055b8:	4b61      	ldr	r3, [pc, #388]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055be:	f7fd fb85 	bl	8002ccc <HAL_GetTick>
 80055c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055c4:	e008      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055c6:	f7fd fb81 	bl	8002ccc <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e129      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0f0      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d105      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d079      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055fc:	4b52      	ldr	r3, [pc, #328]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005602:	f7fd fb63 	bl	8002ccc <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005608:	e008      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800560a:	f7fd fb5f 	bl	8002ccc <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e107      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800561c:	4b49      	ldr	r3, [pc, #292]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005628:	d0ef      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b00      	cmp	r3, #0
 8005634:	d020      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005636:	4b43      	ldr	r3, [pc, #268]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563c:	0f1b      	lsrs	r3, r3, #28
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	019a      	lsls	r2, r3, #6
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	061b      	lsls	r3, r3, #24
 8005650:	431a      	orrs	r2, r3
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	071b      	lsls	r3, r3, #28
 8005656:	493b      	ldr	r1, [pc, #236]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800565e:	4b39      	ldr	r3, [pc, #228]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005664:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	3b01      	subs	r3, #1
 800566e:	021b      	lsls	r3, r3, #8
 8005670:	4934      	ldr	r1, [pc, #208]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01e      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005684:	4b2f      	ldr	r3, [pc, #188]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568a:	0e1b      	lsrs	r3, r3, #24
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	019a      	lsls	r2, r3, #6
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	061b      	lsls	r3, r3, #24
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	071b      	lsls	r3, r3, #28
 80056a4:	4927      	ldr	r1, [pc, #156]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056ac:	4b25      	ldr	r3, [pc, #148]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ba:	4922      	ldr	r1, [pc, #136]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056c2:	4b21      	ldr	r3, [pc, #132]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056c8:	f7fd fb00 	bl	8002ccc <HAL_GetTick>
 80056cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056d0:	f7fd fafc 	bl	8002ccc <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0a4      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056e2:	4b18      	ldr	r3, [pc, #96]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ee:	d1ef      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 808b 	beq.w	8005814 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	4b10      	ldr	r3, [pc, #64]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	4a0f      	ldr	r2, [pc, #60]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800570c:	6413      	str	r3, [r2, #64]	@ 0x40
 800570e:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800571a:	4b0c      	ldr	r3, [pc, #48]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a0b      	ldr	r2, [pc, #44]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005724:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005726:	f7fd fad1 	bl	8002ccc <HAL_GetTick>
 800572a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800572c:	e010      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572e:	f7fd facd 	bl	8002ccc <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d909      	bls.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e075      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005740:	42470068 	.word	0x42470068
 8005744:	40023800 	.word	0x40023800
 8005748:	42470070 	.word	0x42470070
 800574c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005750:	4b38      	ldr	r3, [pc, #224]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0e8      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800575c:	4b36      	ldr	r3, [pc, #216]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005764:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02f      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005770:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	429a      	cmp	r2, r3
 8005778:	d028      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800577a:	4b2f      	ldr	r3, [pc, #188]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005782:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005784:	4b2d      	ldr	r3, [pc, #180]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005786:	2201      	movs	r2, #1
 8005788:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800578a:	4b2c      	ldr	r3, [pc, #176]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005790:	4a29      	ldr	r2, [pc, #164]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005796:	4b28      	ldr	r3, [pc, #160]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d114      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fd fa93 	bl	8002ccc <HAL_GetTick>
 80057a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a8:	e00a      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057aa:	f7fd fa8f 	bl	8002ccc <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e035      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0ee      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057d8:	d10d      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80057da:	4b17      	ldr	r3, [pc, #92]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80057ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ee:	4912      	ldr	r1, [pc, #72]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	608b      	str	r3, [r1, #8]
 80057f4:	e005      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80057f6:	4b10      	ldr	r3, [pc, #64]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	4a0f      	ldr	r2, [pc, #60]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005800:	6093      	str	r3, [r2, #8]
 8005802:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005804:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580e:	490a      	ldr	r1, [pc, #40]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005810:	4313      	orrs	r3, r2
 8005812:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b00      	cmp	r3, #0
 800581e:	d004      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005826:	4b06      	ldr	r3, [pc, #24]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005828:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40007000 	.word	0x40007000
 8005838:	40023800 	.word	0x40023800
 800583c:	42470e40 	.word	0x42470e40
 8005840:	424711e0 	.word	0x424711e0

08005844 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e01c      	b.n	8005890 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	795b      	ldrb	r3, [r3, #5]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fc fc5a 	bl	8002120 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0204 	orr.w	r2, r2, #4
 8005880:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e01c      	b.n	80058e4 <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 020c 	bic.w	r2, r2, #12
 80058b8:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058c8:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fc fc4a 	bl	8002164 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	791b      	ldrb	r3, [r3, #4]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005902:	2302      	movs	r3, #2
 8005904:	e044      	b.n	8005990 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	795b      	ldrb	r3, [r3, #5]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b01      	cmp	r3, #1
 8005914:	d133      	bne.n	800597e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2202      	movs	r2, #2
 800591a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800591c:	f7fd f9d6 	bl	8002ccc <HAL_GetTick>
 8005920:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005922:	e018      	b.n	8005956 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005924:	f7fd f9d2 	bl	8002ccc <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d911      	bls.n	8005956 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d00a      	beq.n	8005956 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e01c      	b.n	8005990 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d1df      	bne.n	8005924 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	715a      	strb	r2, [r3, #5]
 800597c:	e004      	b.n	8005988 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2204      	movs	r2, #4
 8005982:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	711a      	strb	r2, [r3, #4]

  return status;
 800598e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e07b      	b.n	8005aa2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059ba:	d009      	beq.n	80059d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	61da      	str	r2, [r3, #28]
 80059c2:	e005      	b.n	80059d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fc fbd4 	bl	8002198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a54:	ea42 0103 	orr.w	r1, r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	f003 0104 	and.w	r1, r3, #4
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	f003 0210 	and.w	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b082      	sub	sp, #8
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e01a      	b.n	8005af2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ad2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7fc fba7 	bl	8002228 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b088      	sub	sp, #32
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	603b      	str	r3, [r7, #0]
 8005b06:	4613      	mov	r3, r2
 8005b08:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b0a:	f7fd f8df 	bl	8002ccc <HAL_GetTick>
 8005b0e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d001      	beq.n	8005b24 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
 8005b22:	e12a      	b.n	8005d7a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_SPI_Transmit+0x36>
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e122      	b.n	8005d7a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_SPI_Transmit+0x48>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e11b      	b.n	8005d7a <HAL_SPI_Transmit+0x280>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2203      	movs	r2, #3
 8005b4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	88fa      	ldrh	r2, [r7, #6]
 8005b62:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	88fa      	ldrh	r2, [r7, #6]
 8005b68:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b90:	d10f      	bne.n	8005bb2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ba0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbc:	2b40      	cmp	r3, #64	@ 0x40
 8005bbe:	d007      	beq.n	8005bd0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bd8:	d152      	bne.n	8005c80 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_SPI_Transmit+0xee>
 8005be2:	8b7b      	ldrh	r3, [r7, #26]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d145      	bne.n	8005c74 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bec:	881a      	ldrh	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	1c9a      	adds	r2, r3, #2
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c0c:	e032      	b.n	8005c74 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d112      	bne.n	8005c42 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c20:	881a      	ldrh	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2c:	1c9a      	adds	r2, r3, #2
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c40:	e018      	b.n	8005c74 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c42:	f7fd f843 	bl	8002ccc <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d803      	bhi.n	8005c5a <HAL_SPI_Transmit+0x160>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c58:	d102      	bne.n	8005c60 <HAL_SPI_Transmit+0x166>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e082      	b.n	8005d7a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1c7      	bne.n	8005c0e <HAL_SPI_Transmit+0x114>
 8005c7e:	e053      	b.n	8005d28 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_SPI_Transmit+0x194>
 8005c88:	8b7b      	ldrh	r3, [r7, #26]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d147      	bne.n	8005d1e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	7812      	ldrb	r2, [r2, #0]
 8005c9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005cb4:	e033      	b.n	8005d1e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d113      	bne.n	8005cec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	7812      	ldrb	r2, [r2, #0]
 8005cd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005cea:	e018      	b.n	8005d1e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cec:	f7fc ffee 	bl	8002ccc <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d803      	bhi.n	8005d04 <HAL_SPI_Transmit+0x20a>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d02:	d102      	bne.n	8005d0a <HAL_SPI_Transmit+0x210>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e02d      	b.n	8005d7a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1c6      	bne.n	8005cb6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f8bf 	bl	8005eb0 <SPI_EndRxTxTransaction>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005d78:	2300      	movs	r3, #0
  }
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d90:	b2db      	uxtb	r3, r3
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005db0:	f7fc ff8c 	bl	8002ccc <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dc0:	f7fc ff84 	bl	8002ccc <HAL_GetTick>
 8005dc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dc6:	4b39      	ldr	r3, [pc, #228]	@ (8005eac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	015b      	lsls	r3, r3, #5
 8005dcc:	0d1b      	lsrs	r3, r3, #20
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dd6:	e054      	b.n	8005e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dde:	d050      	beq.n	8005e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005de0:	f7fc ff74 	bl	8002ccc <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d902      	bls.n	8005df6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d13d      	bne.n	8005e72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e0e:	d111      	bne.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e18:	d004      	beq.n	8005e24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e22:	d107      	bne.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e3c:	d10f      	bne.n	8005e5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e017      	b.n	8005ea2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	bf0c      	ite	eq
 8005e92:	2301      	moveq	r3, #1
 8005e94:	2300      	movne	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	461a      	mov	r2, r3
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d19b      	bne.n	8005dd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000010 	.word	0x20000010

08005eb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	2102      	movs	r1, #2
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff ff6a 	bl	8005da0 <SPI_WaitFlagStateUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e032      	b.n	8005f48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f50 <SPI_EndRxTxTransaction+0xa0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f54 <SPI_EndRxTxTransaction+0xa4>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	0d5b      	lsrs	r3, r3, #21
 8005eee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ef2:	fb02 f303 	mul.w	r3, r2, r3
 8005ef6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f00:	d112      	bne.n	8005f28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2180      	movs	r1, #128	@ 0x80
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff ff47 	bl	8005da0 <SPI_WaitFlagStateUntilTimeout>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d016      	beq.n	8005f46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1c:	f043 0220 	orr.w	r2, r3, #32
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e00f      	b.n	8005f48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3e:	2b80      	cmp	r3, #128	@ 0x80
 8005f40:	d0f2      	beq.n	8005f28 <SPI_EndRxTxTransaction+0x78>
 8005f42:	e000      	b.n	8005f46 <SPI_EndRxTxTransaction+0x96>
        break;
 8005f44:	bf00      	nop
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000010 	.word	0x20000010
 8005f54:	165e9f81 	.word	0x165e9f81

08005f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e041      	b.n	8005fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc f970 	bl	8002264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f000 f9c0 	bl	800631c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d001      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e04e      	b.n	80060ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a23      	ldr	r2, [pc, #140]	@ (80060bc <HAL_TIM_Base_Start_IT+0xc4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d022      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800603a:	d01d      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1f      	ldr	r2, [pc, #124]	@ (80060c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d018      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1e      	ldr	r2, [pc, #120]	@ (80060c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d013      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1c      	ldr	r2, [pc, #112]	@ (80060c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00e      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1b      	ldr	r2, [pc, #108]	@ (80060cc <HAL_TIM_Base_Start_IT+0xd4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a19      	ldr	r2, [pc, #100]	@ (80060d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a18      	ldr	r2, [pc, #96]	@ (80060d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d111      	bne.n	800609c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b06      	cmp	r3, #6
 8006088:	d010      	beq.n	80060ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0201 	orr.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609a:	e007      	b.n	80060ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40010400 	.word	0x40010400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40001800 	.word	0x40001800

080060d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d020      	beq.n	800613c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01b      	beq.n	800613c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0202 	mvn.w	r2, #2
 800610c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f8dc 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 8006128:	e005      	b.n	8006136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f8ce 	bl	80062cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f8df 	bl	80062f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d020      	beq.n	8006188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01b      	beq.n	8006188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0204 	mvn.w	r2, #4
 8006158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f8b6 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 8006174:	e005      	b.n	8006182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8a8 	bl	80062cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f8b9 	bl	80062f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d020      	beq.n	80061d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01b      	beq.n	80061d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0208 	mvn.w	r2, #8
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2204      	movs	r2, #4
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f890 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 80061c0:	e005      	b.n	80061ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f882 	bl	80062cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f893 	bl	80062f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 0310 	and.w	r3, r3, #16
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d020      	beq.n	8006220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01b      	beq.n	8006220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0210 	mvn.w	r2, #16
 80061f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2208      	movs	r2, #8
 80061f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f86a 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 800620c:	e005      	b.n	800621a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f85c 	bl	80062cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f86d 	bl	80062f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00c      	beq.n	8006244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0201 	mvn.w	r2, #1
 800623c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f83a 	bl	80062b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00c      	beq.n	8006268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f910 	bl	8006488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00c      	beq.n	800628c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f83e 	bl	8006308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00c      	beq.n	80062b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0220 	mvn.w	r2, #32
 80062a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8e2 	bl	8006474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062b0:	bf00      	nop
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a46      	ldr	r2, [pc, #280]	@ (8006448 <TIM_Base_SetConfig+0x12c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <TIM_Base_SetConfig+0x40>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633a:	d00f      	beq.n	800635c <TIM_Base_SetConfig+0x40>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a43      	ldr	r2, [pc, #268]	@ (800644c <TIM_Base_SetConfig+0x130>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00b      	beq.n	800635c <TIM_Base_SetConfig+0x40>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a42      	ldr	r2, [pc, #264]	@ (8006450 <TIM_Base_SetConfig+0x134>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d007      	beq.n	800635c <TIM_Base_SetConfig+0x40>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a41      	ldr	r2, [pc, #260]	@ (8006454 <TIM_Base_SetConfig+0x138>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_Base_SetConfig+0x40>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a40      	ldr	r2, [pc, #256]	@ (8006458 <TIM_Base_SetConfig+0x13c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d108      	bne.n	800636e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a35      	ldr	r2, [pc, #212]	@ (8006448 <TIM_Base_SetConfig+0x12c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d02b      	beq.n	80063ce <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800637c:	d027      	beq.n	80063ce <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a32      	ldr	r2, [pc, #200]	@ (800644c <TIM_Base_SetConfig+0x130>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d023      	beq.n	80063ce <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a31      	ldr	r2, [pc, #196]	@ (8006450 <TIM_Base_SetConfig+0x134>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d01f      	beq.n	80063ce <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a30      	ldr	r2, [pc, #192]	@ (8006454 <TIM_Base_SetConfig+0x138>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d01b      	beq.n	80063ce <TIM_Base_SetConfig+0xb2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a2f      	ldr	r2, [pc, #188]	@ (8006458 <TIM_Base_SetConfig+0x13c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d017      	beq.n	80063ce <TIM_Base_SetConfig+0xb2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a2e      	ldr	r2, [pc, #184]	@ (800645c <TIM_Base_SetConfig+0x140>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d013      	beq.n	80063ce <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a2d      	ldr	r2, [pc, #180]	@ (8006460 <TIM_Base_SetConfig+0x144>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00f      	beq.n	80063ce <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006464 <TIM_Base_SetConfig+0x148>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00b      	beq.n	80063ce <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006468 <TIM_Base_SetConfig+0x14c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d007      	beq.n	80063ce <TIM_Base_SetConfig+0xb2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a2a      	ldr	r2, [pc, #168]	@ (800646c <TIM_Base_SetConfig+0x150>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <TIM_Base_SetConfig+0xb2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a29      	ldr	r2, [pc, #164]	@ (8006470 <TIM_Base_SetConfig+0x154>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d108      	bne.n	80063e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a10      	ldr	r2, [pc, #64]	@ (8006448 <TIM_Base_SetConfig+0x12c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_Base_SetConfig+0xf8>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a12      	ldr	r2, [pc, #72]	@ (8006458 <TIM_Base_SetConfig+0x13c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d103      	bne.n	800641c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	691a      	ldr	r2, [r3, #16]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b01      	cmp	r3, #1
 800642c:	d105      	bne.n	800643a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f023 0201 	bic.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	611a      	str	r2, [r3, #16]
  }
}
 800643a:	bf00      	nop
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40010000 	.word	0x40010000
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40010400 	.word	0x40010400
 800645c:	40014000 	.word	0x40014000
 8006460:	40014400 	.word	0x40014400
 8006464:	40014800 	.word	0x40014800
 8006468:	40001800 	.word	0x40001800
 800646c:	40001c00 	.word	0x40001c00
 8006470:	40002000 	.word	0x40002000

08006474 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <std>:
 800649c:	2300      	movs	r3, #0
 800649e:	b510      	push	{r4, lr}
 80064a0:	4604      	mov	r4, r0
 80064a2:	e9c0 3300 	strd	r3, r3, [r0]
 80064a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064aa:	6083      	str	r3, [r0, #8]
 80064ac:	8181      	strh	r1, [r0, #12]
 80064ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80064b0:	81c2      	strh	r2, [r0, #14]
 80064b2:	6183      	str	r3, [r0, #24]
 80064b4:	4619      	mov	r1, r3
 80064b6:	2208      	movs	r2, #8
 80064b8:	305c      	adds	r0, #92	@ 0x5c
 80064ba:	f000 f9f9 	bl	80068b0 <memset>
 80064be:	4b0d      	ldr	r3, [pc, #52]	@ (80064f4 <std+0x58>)
 80064c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80064c2:	4b0d      	ldr	r3, [pc, #52]	@ (80064f8 <std+0x5c>)
 80064c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064c6:	4b0d      	ldr	r3, [pc, #52]	@ (80064fc <std+0x60>)
 80064c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <std+0x64>)
 80064cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80064ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006504 <std+0x68>)
 80064d0:	6224      	str	r4, [r4, #32]
 80064d2:	429c      	cmp	r4, r3
 80064d4:	d006      	beq.n	80064e4 <std+0x48>
 80064d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064da:	4294      	cmp	r4, r2
 80064dc:	d002      	beq.n	80064e4 <std+0x48>
 80064de:	33d0      	adds	r3, #208	@ 0xd0
 80064e0:	429c      	cmp	r4, r3
 80064e2:	d105      	bne.n	80064f0 <std+0x54>
 80064e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ec:	f000 ba58 	b.w	80069a0 <__retarget_lock_init_recursive>
 80064f0:	bd10      	pop	{r4, pc}
 80064f2:	bf00      	nop
 80064f4:	08006701 	.word	0x08006701
 80064f8:	08006723 	.word	0x08006723
 80064fc:	0800675b 	.word	0x0800675b
 8006500:	0800677f 	.word	0x0800677f
 8006504:	20025aa4 	.word	0x20025aa4

08006508 <stdio_exit_handler>:
 8006508:	4a02      	ldr	r2, [pc, #8]	@ (8006514 <stdio_exit_handler+0xc>)
 800650a:	4903      	ldr	r1, [pc, #12]	@ (8006518 <stdio_exit_handler+0x10>)
 800650c:	4803      	ldr	r0, [pc, #12]	@ (800651c <stdio_exit_handler+0x14>)
 800650e:	f000 b869 	b.w	80065e4 <_fwalk_sglue>
 8006512:	bf00      	nop
 8006514:	2000001c 	.word	0x2000001c
 8006518:	08007241 	.word	0x08007241
 800651c:	2000002c 	.word	0x2000002c

08006520 <cleanup_stdio>:
 8006520:	6841      	ldr	r1, [r0, #4]
 8006522:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <cleanup_stdio+0x34>)
 8006524:	4299      	cmp	r1, r3
 8006526:	b510      	push	{r4, lr}
 8006528:	4604      	mov	r4, r0
 800652a:	d001      	beq.n	8006530 <cleanup_stdio+0x10>
 800652c:	f000 fe88 	bl	8007240 <_fflush_r>
 8006530:	68a1      	ldr	r1, [r4, #8]
 8006532:	4b09      	ldr	r3, [pc, #36]	@ (8006558 <cleanup_stdio+0x38>)
 8006534:	4299      	cmp	r1, r3
 8006536:	d002      	beq.n	800653e <cleanup_stdio+0x1e>
 8006538:	4620      	mov	r0, r4
 800653a:	f000 fe81 	bl	8007240 <_fflush_r>
 800653e:	68e1      	ldr	r1, [r4, #12]
 8006540:	4b06      	ldr	r3, [pc, #24]	@ (800655c <cleanup_stdio+0x3c>)
 8006542:	4299      	cmp	r1, r3
 8006544:	d004      	beq.n	8006550 <cleanup_stdio+0x30>
 8006546:	4620      	mov	r0, r4
 8006548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800654c:	f000 be78 	b.w	8007240 <_fflush_r>
 8006550:	bd10      	pop	{r4, pc}
 8006552:	bf00      	nop
 8006554:	20025aa4 	.word	0x20025aa4
 8006558:	20025b0c 	.word	0x20025b0c
 800655c:	20025b74 	.word	0x20025b74

08006560 <global_stdio_init.part.0>:
 8006560:	b510      	push	{r4, lr}
 8006562:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <global_stdio_init.part.0+0x30>)
 8006564:	4c0b      	ldr	r4, [pc, #44]	@ (8006594 <global_stdio_init.part.0+0x34>)
 8006566:	4a0c      	ldr	r2, [pc, #48]	@ (8006598 <global_stdio_init.part.0+0x38>)
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	4620      	mov	r0, r4
 800656c:	2200      	movs	r2, #0
 800656e:	2104      	movs	r1, #4
 8006570:	f7ff ff94 	bl	800649c <std>
 8006574:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006578:	2201      	movs	r2, #1
 800657a:	2109      	movs	r1, #9
 800657c:	f7ff ff8e 	bl	800649c <std>
 8006580:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006584:	2202      	movs	r2, #2
 8006586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800658a:	2112      	movs	r1, #18
 800658c:	f7ff bf86 	b.w	800649c <std>
 8006590:	20025bdc 	.word	0x20025bdc
 8006594:	20025aa4 	.word	0x20025aa4
 8006598:	08006509 	.word	0x08006509

0800659c <__sfp_lock_acquire>:
 800659c:	4801      	ldr	r0, [pc, #4]	@ (80065a4 <__sfp_lock_acquire+0x8>)
 800659e:	f000 ba00 	b.w	80069a2 <__retarget_lock_acquire_recursive>
 80065a2:	bf00      	nop
 80065a4:	20025be5 	.word	0x20025be5

080065a8 <__sfp_lock_release>:
 80065a8:	4801      	ldr	r0, [pc, #4]	@ (80065b0 <__sfp_lock_release+0x8>)
 80065aa:	f000 b9fb 	b.w	80069a4 <__retarget_lock_release_recursive>
 80065ae:	bf00      	nop
 80065b0:	20025be5 	.word	0x20025be5

080065b4 <__sinit>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4604      	mov	r4, r0
 80065b8:	f7ff fff0 	bl	800659c <__sfp_lock_acquire>
 80065bc:	6a23      	ldr	r3, [r4, #32]
 80065be:	b11b      	cbz	r3, 80065c8 <__sinit+0x14>
 80065c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c4:	f7ff bff0 	b.w	80065a8 <__sfp_lock_release>
 80065c8:	4b04      	ldr	r3, [pc, #16]	@ (80065dc <__sinit+0x28>)
 80065ca:	6223      	str	r3, [r4, #32]
 80065cc:	4b04      	ldr	r3, [pc, #16]	@ (80065e0 <__sinit+0x2c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1f5      	bne.n	80065c0 <__sinit+0xc>
 80065d4:	f7ff ffc4 	bl	8006560 <global_stdio_init.part.0>
 80065d8:	e7f2      	b.n	80065c0 <__sinit+0xc>
 80065da:	bf00      	nop
 80065dc:	08006521 	.word	0x08006521
 80065e0:	20025bdc 	.word	0x20025bdc

080065e4 <_fwalk_sglue>:
 80065e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e8:	4607      	mov	r7, r0
 80065ea:	4688      	mov	r8, r1
 80065ec:	4614      	mov	r4, r2
 80065ee:	2600      	movs	r6, #0
 80065f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065f4:	f1b9 0901 	subs.w	r9, r9, #1
 80065f8:	d505      	bpl.n	8006606 <_fwalk_sglue+0x22>
 80065fa:	6824      	ldr	r4, [r4, #0]
 80065fc:	2c00      	cmp	r4, #0
 80065fe:	d1f7      	bne.n	80065f0 <_fwalk_sglue+0xc>
 8006600:	4630      	mov	r0, r6
 8006602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006606:	89ab      	ldrh	r3, [r5, #12]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d907      	bls.n	800661c <_fwalk_sglue+0x38>
 800660c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006610:	3301      	adds	r3, #1
 8006612:	d003      	beq.n	800661c <_fwalk_sglue+0x38>
 8006614:	4629      	mov	r1, r5
 8006616:	4638      	mov	r0, r7
 8006618:	47c0      	blx	r8
 800661a:	4306      	orrs	r6, r0
 800661c:	3568      	adds	r5, #104	@ 0x68
 800661e:	e7e9      	b.n	80065f4 <_fwalk_sglue+0x10>

08006620 <iprintf>:
 8006620:	b40f      	push	{r0, r1, r2, r3}
 8006622:	b507      	push	{r0, r1, r2, lr}
 8006624:	4906      	ldr	r1, [pc, #24]	@ (8006640 <iprintf+0x20>)
 8006626:	ab04      	add	r3, sp, #16
 8006628:	6808      	ldr	r0, [r1, #0]
 800662a:	f853 2b04 	ldr.w	r2, [r3], #4
 800662e:	6881      	ldr	r1, [r0, #8]
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	f000 fadb 	bl	8006bec <_vfiprintf_r>
 8006636:	b003      	add	sp, #12
 8006638:	f85d eb04 	ldr.w	lr, [sp], #4
 800663c:	b004      	add	sp, #16
 800663e:	4770      	bx	lr
 8006640:	20000028 	.word	0x20000028

08006644 <_puts_r>:
 8006644:	6a03      	ldr	r3, [r0, #32]
 8006646:	b570      	push	{r4, r5, r6, lr}
 8006648:	6884      	ldr	r4, [r0, #8]
 800664a:	4605      	mov	r5, r0
 800664c:	460e      	mov	r6, r1
 800664e:	b90b      	cbnz	r3, 8006654 <_puts_r+0x10>
 8006650:	f7ff ffb0 	bl	80065b4 <__sinit>
 8006654:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006656:	07db      	lsls	r3, r3, #31
 8006658:	d405      	bmi.n	8006666 <_puts_r+0x22>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	0598      	lsls	r0, r3, #22
 800665e:	d402      	bmi.n	8006666 <_puts_r+0x22>
 8006660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006662:	f000 f99e 	bl	80069a2 <__retarget_lock_acquire_recursive>
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	0719      	lsls	r1, r3, #28
 800666a:	d502      	bpl.n	8006672 <_puts_r+0x2e>
 800666c:	6923      	ldr	r3, [r4, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d135      	bne.n	80066de <_puts_r+0x9a>
 8006672:	4621      	mov	r1, r4
 8006674:	4628      	mov	r0, r5
 8006676:	f000 f8c5 	bl	8006804 <__swsetup_r>
 800667a:	b380      	cbz	r0, 80066de <_puts_r+0x9a>
 800667c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006680:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006682:	07da      	lsls	r2, r3, #31
 8006684:	d405      	bmi.n	8006692 <_puts_r+0x4e>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	059b      	lsls	r3, r3, #22
 800668a:	d402      	bmi.n	8006692 <_puts_r+0x4e>
 800668c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800668e:	f000 f989 	bl	80069a4 <__retarget_lock_release_recursive>
 8006692:	4628      	mov	r0, r5
 8006694:	bd70      	pop	{r4, r5, r6, pc}
 8006696:	2b00      	cmp	r3, #0
 8006698:	da04      	bge.n	80066a4 <_puts_r+0x60>
 800669a:	69a2      	ldr	r2, [r4, #24]
 800669c:	429a      	cmp	r2, r3
 800669e:	dc17      	bgt.n	80066d0 <_puts_r+0x8c>
 80066a0:	290a      	cmp	r1, #10
 80066a2:	d015      	beq.n	80066d0 <_puts_r+0x8c>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	6022      	str	r2, [r4, #0]
 80066aa:	7019      	strb	r1, [r3, #0]
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066b2:	3b01      	subs	r3, #1
 80066b4:	60a3      	str	r3, [r4, #8]
 80066b6:	2900      	cmp	r1, #0
 80066b8:	d1ed      	bne.n	8006696 <_puts_r+0x52>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	da11      	bge.n	80066e2 <_puts_r+0x9e>
 80066be:	4622      	mov	r2, r4
 80066c0:	210a      	movs	r1, #10
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 f85f 	bl	8006786 <__swbuf_r>
 80066c8:	3001      	adds	r0, #1
 80066ca:	d0d7      	beq.n	800667c <_puts_r+0x38>
 80066cc:	250a      	movs	r5, #10
 80066ce:	e7d7      	b.n	8006680 <_puts_r+0x3c>
 80066d0:	4622      	mov	r2, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f857 	bl	8006786 <__swbuf_r>
 80066d8:	3001      	adds	r0, #1
 80066da:	d1e7      	bne.n	80066ac <_puts_r+0x68>
 80066dc:	e7ce      	b.n	800667c <_puts_r+0x38>
 80066de:	3e01      	subs	r6, #1
 80066e0:	e7e4      	b.n	80066ac <_puts_r+0x68>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	6022      	str	r2, [r4, #0]
 80066e8:	220a      	movs	r2, #10
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	e7ee      	b.n	80066cc <_puts_r+0x88>
	...

080066f0 <puts>:
 80066f0:	4b02      	ldr	r3, [pc, #8]	@ (80066fc <puts+0xc>)
 80066f2:	4601      	mov	r1, r0
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	f7ff bfa5 	b.w	8006644 <_puts_r>
 80066fa:	bf00      	nop
 80066fc:	20000028 	.word	0x20000028

08006700 <__sread>:
 8006700:	b510      	push	{r4, lr}
 8006702:	460c      	mov	r4, r1
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	f000 f8fc 	bl	8006904 <_read_r>
 800670c:	2800      	cmp	r0, #0
 800670e:	bfab      	itete	ge
 8006710:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006712:	89a3      	ldrhlt	r3, [r4, #12]
 8006714:	181b      	addge	r3, r3, r0
 8006716:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800671a:	bfac      	ite	ge
 800671c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800671e:	81a3      	strhlt	r3, [r4, #12]
 8006720:	bd10      	pop	{r4, pc}

08006722 <__swrite>:
 8006722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	461f      	mov	r7, r3
 8006728:	898b      	ldrh	r3, [r1, #12]
 800672a:	05db      	lsls	r3, r3, #23
 800672c:	4605      	mov	r5, r0
 800672e:	460c      	mov	r4, r1
 8006730:	4616      	mov	r6, r2
 8006732:	d505      	bpl.n	8006740 <__swrite+0x1e>
 8006734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006738:	2302      	movs	r3, #2
 800673a:	2200      	movs	r2, #0
 800673c:	f000 f8d0 	bl	80068e0 <_lseek_r>
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006746:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800674a:	81a3      	strh	r3, [r4, #12]
 800674c:	4632      	mov	r2, r6
 800674e:	463b      	mov	r3, r7
 8006750:	4628      	mov	r0, r5
 8006752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	f000 b8e7 	b.w	8006928 <_write_r>

0800675a <__sseek>:
 800675a:	b510      	push	{r4, lr}
 800675c:	460c      	mov	r4, r1
 800675e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006762:	f000 f8bd 	bl	80068e0 <_lseek_r>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	bf15      	itete	ne
 800676c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800676e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006772:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006776:	81a3      	strheq	r3, [r4, #12]
 8006778:	bf18      	it	ne
 800677a:	81a3      	strhne	r3, [r4, #12]
 800677c:	bd10      	pop	{r4, pc}

0800677e <__sclose>:
 800677e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006782:	f000 b89d 	b.w	80068c0 <_close_r>

08006786 <__swbuf_r>:
 8006786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006788:	460e      	mov	r6, r1
 800678a:	4614      	mov	r4, r2
 800678c:	4605      	mov	r5, r0
 800678e:	b118      	cbz	r0, 8006798 <__swbuf_r+0x12>
 8006790:	6a03      	ldr	r3, [r0, #32]
 8006792:	b90b      	cbnz	r3, 8006798 <__swbuf_r+0x12>
 8006794:	f7ff ff0e 	bl	80065b4 <__sinit>
 8006798:	69a3      	ldr	r3, [r4, #24]
 800679a:	60a3      	str	r3, [r4, #8]
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	071a      	lsls	r2, r3, #28
 80067a0:	d501      	bpl.n	80067a6 <__swbuf_r+0x20>
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	b943      	cbnz	r3, 80067b8 <__swbuf_r+0x32>
 80067a6:	4621      	mov	r1, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	f000 f82b 	bl	8006804 <__swsetup_r>
 80067ae:	b118      	cbz	r0, 80067b8 <__swbuf_r+0x32>
 80067b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80067b4:	4638      	mov	r0, r7
 80067b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	6922      	ldr	r2, [r4, #16]
 80067bc:	1a98      	subs	r0, r3, r2
 80067be:	6963      	ldr	r3, [r4, #20]
 80067c0:	b2f6      	uxtb	r6, r6
 80067c2:	4283      	cmp	r3, r0
 80067c4:	4637      	mov	r7, r6
 80067c6:	dc05      	bgt.n	80067d4 <__swbuf_r+0x4e>
 80067c8:	4621      	mov	r1, r4
 80067ca:	4628      	mov	r0, r5
 80067cc:	f000 fd38 	bl	8007240 <_fflush_r>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d1ed      	bne.n	80067b0 <__swbuf_r+0x2a>
 80067d4:	68a3      	ldr	r3, [r4, #8]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	60a3      	str	r3, [r4, #8]
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	6022      	str	r2, [r4, #0]
 80067e0:	701e      	strb	r6, [r3, #0]
 80067e2:	6962      	ldr	r2, [r4, #20]
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d004      	beq.n	80067f4 <__swbuf_r+0x6e>
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	07db      	lsls	r3, r3, #31
 80067ee:	d5e1      	bpl.n	80067b4 <__swbuf_r+0x2e>
 80067f0:	2e0a      	cmp	r6, #10
 80067f2:	d1df      	bne.n	80067b4 <__swbuf_r+0x2e>
 80067f4:	4621      	mov	r1, r4
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 fd22 	bl	8007240 <_fflush_r>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d0d9      	beq.n	80067b4 <__swbuf_r+0x2e>
 8006800:	e7d6      	b.n	80067b0 <__swbuf_r+0x2a>
	...

08006804 <__swsetup_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4b29      	ldr	r3, [pc, #164]	@ (80068ac <__swsetup_r+0xa8>)
 8006808:	4605      	mov	r5, r0
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	460c      	mov	r4, r1
 800680e:	b118      	cbz	r0, 8006818 <__swsetup_r+0x14>
 8006810:	6a03      	ldr	r3, [r0, #32]
 8006812:	b90b      	cbnz	r3, 8006818 <__swsetup_r+0x14>
 8006814:	f7ff fece 	bl	80065b4 <__sinit>
 8006818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800681c:	0719      	lsls	r1, r3, #28
 800681e:	d422      	bmi.n	8006866 <__swsetup_r+0x62>
 8006820:	06da      	lsls	r2, r3, #27
 8006822:	d407      	bmi.n	8006834 <__swsetup_r+0x30>
 8006824:	2209      	movs	r2, #9
 8006826:	602a      	str	r2, [r5, #0]
 8006828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006832:	e033      	b.n	800689c <__swsetup_r+0x98>
 8006834:	0758      	lsls	r0, r3, #29
 8006836:	d512      	bpl.n	800685e <__swsetup_r+0x5a>
 8006838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800683a:	b141      	cbz	r1, 800684e <__swsetup_r+0x4a>
 800683c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006840:	4299      	cmp	r1, r3
 8006842:	d002      	beq.n	800684a <__swsetup_r+0x46>
 8006844:	4628      	mov	r0, r5
 8006846:	f000 f8af 	bl	80069a8 <_free_r>
 800684a:	2300      	movs	r3, #0
 800684c:	6363      	str	r3, [r4, #52]	@ 0x34
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	2300      	movs	r3, #0
 8006858:	6063      	str	r3, [r4, #4]
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	f043 0308 	orr.w	r3, r3, #8
 8006864:	81a3      	strh	r3, [r4, #12]
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	b94b      	cbnz	r3, 800687e <__swsetup_r+0x7a>
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006874:	d003      	beq.n	800687e <__swsetup_r+0x7a>
 8006876:	4621      	mov	r1, r4
 8006878:	4628      	mov	r0, r5
 800687a:	f000 fd2f 	bl	80072dc <__smakebuf_r>
 800687e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006882:	f013 0201 	ands.w	r2, r3, #1
 8006886:	d00a      	beq.n	800689e <__swsetup_r+0x9a>
 8006888:	2200      	movs	r2, #0
 800688a:	60a2      	str	r2, [r4, #8]
 800688c:	6962      	ldr	r2, [r4, #20]
 800688e:	4252      	negs	r2, r2
 8006890:	61a2      	str	r2, [r4, #24]
 8006892:	6922      	ldr	r2, [r4, #16]
 8006894:	b942      	cbnz	r2, 80068a8 <__swsetup_r+0xa4>
 8006896:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800689a:	d1c5      	bne.n	8006828 <__swsetup_r+0x24>
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	0799      	lsls	r1, r3, #30
 80068a0:	bf58      	it	pl
 80068a2:	6962      	ldrpl	r2, [r4, #20]
 80068a4:	60a2      	str	r2, [r4, #8]
 80068a6:	e7f4      	b.n	8006892 <__swsetup_r+0x8e>
 80068a8:	2000      	movs	r0, #0
 80068aa:	e7f7      	b.n	800689c <__swsetup_r+0x98>
 80068ac:	20000028 	.word	0x20000028

080068b0 <memset>:
 80068b0:	4402      	add	r2, r0
 80068b2:	4603      	mov	r3, r0
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d100      	bne.n	80068ba <memset+0xa>
 80068b8:	4770      	bx	lr
 80068ba:	f803 1b01 	strb.w	r1, [r3], #1
 80068be:	e7f9      	b.n	80068b4 <memset+0x4>

080068c0 <_close_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4d06      	ldr	r5, [pc, #24]	@ (80068dc <_close_r+0x1c>)
 80068c4:	2300      	movs	r3, #0
 80068c6:	4604      	mov	r4, r0
 80068c8:	4608      	mov	r0, r1
 80068ca:	602b      	str	r3, [r5, #0]
 80068cc:	f7fc f8f2 	bl	8002ab4 <_close>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_close_r+0x1a>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	b103      	cbz	r3, 80068da <_close_r+0x1a>
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	20025be0 	.word	0x20025be0

080068e0 <_lseek_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4d07      	ldr	r5, [pc, #28]	@ (8006900 <_lseek_r+0x20>)
 80068e4:	4604      	mov	r4, r0
 80068e6:	4608      	mov	r0, r1
 80068e8:	4611      	mov	r1, r2
 80068ea:	2200      	movs	r2, #0
 80068ec:	602a      	str	r2, [r5, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f7fc f907 	bl	8002b02 <_lseek>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	d102      	bne.n	80068fe <_lseek_r+0x1e>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	b103      	cbz	r3, 80068fe <_lseek_r+0x1e>
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	bd38      	pop	{r3, r4, r5, pc}
 8006900:	20025be0 	.word	0x20025be0

08006904 <_read_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4d07      	ldr	r5, [pc, #28]	@ (8006924 <_read_r+0x20>)
 8006908:	4604      	mov	r4, r0
 800690a:	4608      	mov	r0, r1
 800690c:	4611      	mov	r1, r2
 800690e:	2200      	movs	r2, #0
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f7fc f895 	bl	8002a42 <_read>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_read_r+0x1e>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_read_r+0x1e>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	20025be0 	.word	0x20025be0

08006928 <_write_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4d07      	ldr	r5, [pc, #28]	@ (8006948 <_write_r+0x20>)
 800692c:	4604      	mov	r4, r0
 800692e:	4608      	mov	r0, r1
 8006930:	4611      	mov	r1, r2
 8006932:	2200      	movs	r2, #0
 8006934:	602a      	str	r2, [r5, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	f7fc f8a0 	bl	8002a7c <_write>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_write_r+0x1e>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_write_r+0x1e>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	20025be0 	.word	0x20025be0

0800694c <__errno>:
 800694c:	4b01      	ldr	r3, [pc, #4]	@ (8006954 <__errno+0x8>)
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20000028 	.word	0x20000028

08006958 <__libc_init_array>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	4d0d      	ldr	r5, [pc, #52]	@ (8006990 <__libc_init_array+0x38>)
 800695c:	4c0d      	ldr	r4, [pc, #52]	@ (8006994 <__libc_init_array+0x3c>)
 800695e:	1b64      	subs	r4, r4, r5
 8006960:	10a4      	asrs	r4, r4, #2
 8006962:	2600      	movs	r6, #0
 8006964:	42a6      	cmp	r6, r4
 8006966:	d109      	bne.n	800697c <__libc_init_array+0x24>
 8006968:	4d0b      	ldr	r5, [pc, #44]	@ (8006998 <__libc_init_array+0x40>)
 800696a:	4c0c      	ldr	r4, [pc, #48]	@ (800699c <__libc_init_array+0x44>)
 800696c:	f000 fd24 	bl	80073b8 <_init>
 8006970:	1b64      	subs	r4, r4, r5
 8006972:	10a4      	asrs	r4, r4, #2
 8006974:	2600      	movs	r6, #0
 8006976:	42a6      	cmp	r6, r4
 8006978:	d105      	bne.n	8006986 <__libc_init_array+0x2e>
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006980:	4798      	blx	r3
 8006982:	3601      	adds	r6, #1
 8006984:	e7ee      	b.n	8006964 <__libc_init_array+0xc>
 8006986:	f855 3b04 	ldr.w	r3, [r5], #4
 800698a:	4798      	blx	r3
 800698c:	3601      	adds	r6, #1
 800698e:	e7f2      	b.n	8006976 <__libc_init_array+0x1e>
 8006990:	08008648 	.word	0x08008648
 8006994:	08008648 	.word	0x08008648
 8006998:	08008648 	.word	0x08008648
 800699c:	0800864c 	.word	0x0800864c

080069a0 <__retarget_lock_init_recursive>:
 80069a0:	4770      	bx	lr

080069a2 <__retarget_lock_acquire_recursive>:
 80069a2:	4770      	bx	lr

080069a4 <__retarget_lock_release_recursive>:
 80069a4:	4770      	bx	lr
	...

080069a8 <_free_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4605      	mov	r5, r0
 80069ac:	2900      	cmp	r1, #0
 80069ae:	d041      	beq.n	8006a34 <_free_r+0x8c>
 80069b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b4:	1f0c      	subs	r4, r1, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bfb8      	it	lt
 80069ba:	18e4      	addlt	r4, r4, r3
 80069bc:	f000 f8e0 	bl	8006b80 <__malloc_lock>
 80069c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a38 <_free_r+0x90>)
 80069c2:	6813      	ldr	r3, [r2, #0]
 80069c4:	b933      	cbnz	r3, 80069d4 <_free_r+0x2c>
 80069c6:	6063      	str	r3, [r4, #4]
 80069c8:	6014      	str	r4, [r2, #0]
 80069ca:	4628      	mov	r0, r5
 80069cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069d0:	f000 b8dc 	b.w	8006b8c <__malloc_unlock>
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	d908      	bls.n	80069ea <_free_r+0x42>
 80069d8:	6820      	ldr	r0, [r4, #0]
 80069da:	1821      	adds	r1, r4, r0
 80069dc:	428b      	cmp	r3, r1
 80069de:	bf01      	itttt	eq
 80069e0:	6819      	ldreq	r1, [r3, #0]
 80069e2:	685b      	ldreq	r3, [r3, #4]
 80069e4:	1809      	addeq	r1, r1, r0
 80069e6:	6021      	streq	r1, [r4, #0]
 80069e8:	e7ed      	b.n	80069c6 <_free_r+0x1e>
 80069ea:	461a      	mov	r2, r3
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	b10b      	cbz	r3, 80069f4 <_free_r+0x4c>
 80069f0:	42a3      	cmp	r3, r4
 80069f2:	d9fa      	bls.n	80069ea <_free_r+0x42>
 80069f4:	6811      	ldr	r1, [r2, #0]
 80069f6:	1850      	adds	r0, r2, r1
 80069f8:	42a0      	cmp	r0, r4
 80069fa:	d10b      	bne.n	8006a14 <_free_r+0x6c>
 80069fc:	6820      	ldr	r0, [r4, #0]
 80069fe:	4401      	add	r1, r0
 8006a00:	1850      	adds	r0, r2, r1
 8006a02:	4283      	cmp	r3, r0
 8006a04:	6011      	str	r1, [r2, #0]
 8006a06:	d1e0      	bne.n	80069ca <_free_r+0x22>
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	6053      	str	r3, [r2, #4]
 8006a0e:	4408      	add	r0, r1
 8006a10:	6010      	str	r0, [r2, #0]
 8006a12:	e7da      	b.n	80069ca <_free_r+0x22>
 8006a14:	d902      	bls.n	8006a1c <_free_r+0x74>
 8006a16:	230c      	movs	r3, #12
 8006a18:	602b      	str	r3, [r5, #0]
 8006a1a:	e7d6      	b.n	80069ca <_free_r+0x22>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	1821      	adds	r1, r4, r0
 8006a20:	428b      	cmp	r3, r1
 8006a22:	bf04      	itt	eq
 8006a24:	6819      	ldreq	r1, [r3, #0]
 8006a26:	685b      	ldreq	r3, [r3, #4]
 8006a28:	6063      	str	r3, [r4, #4]
 8006a2a:	bf04      	itt	eq
 8006a2c:	1809      	addeq	r1, r1, r0
 8006a2e:	6021      	streq	r1, [r4, #0]
 8006a30:	6054      	str	r4, [r2, #4]
 8006a32:	e7ca      	b.n	80069ca <_free_r+0x22>
 8006a34:	bd38      	pop	{r3, r4, r5, pc}
 8006a36:	bf00      	nop
 8006a38:	20025bec 	.word	0x20025bec

08006a3c <sbrk_aligned>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8006a7c <sbrk_aligned+0x40>)
 8006a40:	460c      	mov	r4, r1
 8006a42:	6831      	ldr	r1, [r6, #0]
 8006a44:	4605      	mov	r5, r0
 8006a46:	b911      	cbnz	r1, 8006a4e <sbrk_aligned+0x12>
 8006a48:	f000 fca6 	bl	8007398 <_sbrk_r>
 8006a4c:	6030      	str	r0, [r6, #0]
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	f000 fca1 	bl	8007398 <_sbrk_r>
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	d103      	bne.n	8006a62 <sbrk_aligned+0x26>
 8006a5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a5e:	4620      	mov	r0, r4
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
 8006a62:	1cc4      	adds	r4, r0, #3
 8006a64:	f024 0403 	bic.w	r4, r4, #3
 8006a68:	42a0      	cmp	r0, r4
 8006a6a:	d0f8      	beq.n	8006a5e <sbrk_aligned+0x22>
 8006a6c:	1a21      	subs	r1, r4, r0
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 fc92 	bl	8007398 <_sbrk_r>
 8006a74:	3001      	adds	r0, #1
 8006a76:	d1f2      	bne.n	8006a5e <sbrk_aligned+0x22>
 8006a78:	e7ef      	b.n	8006a5a <sbrk_aligned+0x1e>
 8006a7a:	bf00      	nop
 8006a7c:	20025be8 	.word	0x20025be8

08006a80 <_malloc_r>:
 8006a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a84:	1ccd      	adds	r5, r1, #3
 8006a86:	f025 0503 	bic.w	r5, r5, #3
 8006a8a:	3508      	adds	r5, #8
 8006a8c:	2d0c      	cmp	r5, #12
 8006a8e:	bf38      	it	cc
 8006a90:	250c      	movcc	r5, #12
 8006a92:	2d00      	cmp	r5, #0
 8006a94:	4606      	mov	r6, r0
 8006a96:	db01      	blt.n	8006a9c <_malloc_r+0x1c>
 8006a98:	42a9      	cmp	r1, r5
 8006a9a:	d904      	bls.n	8006aa6 <_malloc_r+0x26>
 8006a9c:	230c      	movs	r3, #12
 8006a9e:	6033      	str	r3, [r6, #0]
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b7c <_malloc_r+0xfc>
 8006aaa:	f000 f869 	bl	8006b80 <__malloc_lock>
 8006aae:	f8d8 3000 	ldr.w	r3, [r8]
 8006ab2:	461c      	mov	r4, r3
 8006ab4:	bb44      	cbnz	r4, 8006b08 <_malloc_r+0x88>
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f7ff ffbf 	bl	8006a3c <sbrk_aligned>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	d158      	bne.n	8006b76 <_malloc_r+0xf6>
 8006ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ac8:	4627      	mov	r7, r4
 8006aca:	2f00      	cmp	r7, #0
 8006acc:	d143      	bne.n	8006b56 <_malloc_r+0xd6>
 8006ace:	2c00      	cmp	r4, #0
 8006ad0:	d04b      	beq.n	8006b6a <_malloc_r+0xea>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	eb04 0903 	add.w	r9, r4, r3
 8006adc:	f000 fc5c 	bl	8007398 <_sbrk_r>
 8006ae0:	4581      	cmp	r9, r0
 8006ae2:	d142      	bne.n	8006b6a <_malloc_r+0xea>
 8006ae4:	6821      	ldr	r1, [r4, #0]
 8006ae6:	1a6d      	subs	r5, r5, r1
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4630      	mov	r0, r6
 8006aec:	f7ff ffa6 	bl	8006a3c <sbrk_aligned>
 8006af0:	3001      	adds	r0, #1
 8006af2:	d03a      	beq.n	8006b6a <_malloc_r+0xea>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	442b      	add	r3, r5
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	f8d8 3000 	ldr.w	r3, [r8]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	bb62      	cbnz	r2, 8006b5c <_malloc_r+0xdc>
 8006b02:	f8c8 7000 	str.w	r7, [r8]
 8006b06:	e00f      	b.n	8006b28 <_malloc_r+0xa8>
 8006b08:	6822      	ldr	r2, [r4, #0]
 8006b0a:	1b52      	subs	r2, r2, r5
 8006b0c:	d420      	bmi.n	8006b50 <_malloc_r+0xd0>
 8006b0e:	2a0b      	cmp	r2, #11
 8006b10:	d917      	bls.n	8006b42 <_malloc_r+0xc2>
 8006b12:	1961      	adds	r1, r4, r5
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	6025      	str	r5, [r4, #0]
 8006b18:	bf18      	it	ne
 8006b1a:	6059      	strne	r1, [r3, #4]
 8006b1c:	6863      	ldr	r3, [r4, #4]
 8006b1e:	bf08      	it	eq
 8006b20:	f8c8 1000 	streq.w	r1, [r8]
 8006b24:	5162      	str	r2, [r4, r5]
 8006b26:	604b      	str	r3, [r1, #4]
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f000 f82f 	bl	8006b8c <__malloc_unlock>
 8006b2e:	f104 000b 	add.w	r0, r4, #11
 8006b32:	1d23      	adds	r3, r4, #4
 8006b34:	f020 0007 	bic.w	r0, r0, #7
 8006b38:	1ac2      	subs	r2, r0, r3
 8006b3a:	bf1c      	itt	ne
 8006b3c:	1a1b      	subne	r3, r3, r0
 8006b3e:	50a3      	strne	r3, [r4, r2]
 8006b40:	e7af      	b.n	8006aa2 <_malloc_r+0x22>
 8006b42:	6862      	ldr	r2, [r4, #4]
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	bf0c      	ite	eq
 8006b48:	f8c8 2000 	streq.w	r2, [r8]
 8006b4c:	605a      	strne	r2, [r3, #4]
 8006b4e:	e7eb      	b.n	8006b28 <_malloc_r+0xa8>
 8006b50:	4623      	mov	r3, r4
 8006b52:	6864      	ldr	r4, [r4, #4]
 8006b54:	e7ae      	b.n	8006ab4 <_malloc_r+0x34>
 8006b56:	463c      	mov	r4, r7
 8006b58:	687f      	ldr	r7, [r7, #4]
 8006b5a:	e7b6      	b.n	8006aca <_malloc_r+0x4a>
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	d1fb      	bne.n	8006b5c <_malloc_r+0xdc>
 8006b64:	2300      	movs	r3, #0
 8006b66:	6053      	str	r3, [r2, #4]
 8006b68:	e7de      	b.n	8006b28 <_malloc_r+0xa8>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	6033      	str	r3, [r6, #0]
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f000 f80c 	bl	8006b8c <__malloc_unlock>
 8006b74:	e794      	b.n	8006aa0 <_malloc_r+0x20>
 8006b76:	6005      	str	r5, [r0, #0]
 8006b78:	e7d6      	b.n	8006b28 <_malloc_r+0xa8>
 8006b7a:	bf00      	nop
 8006b7c:	20025bec 	.word	0x20025bec

08006b80 <__malloc_lock>:
 8006b80:	4801      	ldr	r0, [pc, #4]	@ (8006b88 <__malloc_lock+0x8>)
 8006b82:	f7ff bf0e 	b.w	80069a2 <__retarget_lock_acquire_recursive>
 8006b86:	bf00      	nop
 8006b88:	20025be4 	.word	0x20025be4

08006b8c <__malloc_unlock>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	@ (8006b94 <__malloc_unlock+0x8>)
 8006b8e:	f7ff bf09 	b.w	80069a4 <__retarget_lock_release_recursive>
 8006b92:	bf00      	nop
 8006b94:	20025be4 	.word	0x20025be4

08006b98 <__sfputc_r>:
 8006b98:	6893      	ldr	r3, [r2, #8]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	b410      	push	{r4}
 8006ba0:	6093      	str	r3, [r2, #8]
 8006ba2:	da08      	bge.n	8006bb6 <__sfputc_r+0x1e>
 8006ba4:	6994      	ldr	r4, [r2, #24]
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	db01      	blt.n	8006bae <__sfputc_r+0x16>
 8006baa:	290a      	cmp	r1, #10
 8006bac:	d103      	bne.n	8006bb6 <__sfputc_r+0x1e>
 8006bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bb2:	f7ff bde8 	b.w	8006786 <__swbuf_r>
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	1c58      	adds	r0, r3, #1
 8006bba:	6010      	str	r0, [r2, #0]
 8006bbc:	7019      	strb	r1, [r3, #0]
 8006bbe:	4608      	mov	r0, r1
 8006bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <__sfputs_r>:
 8006bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc8:	4606      	mov	r6, r0
 8006bca:	460f      	mov	r7, r1
 8006bcc:	4614      	mov	r4, r2
 8006bce:	18d5      	adds	r5, r2, r3
 8006bd0:	42ac      	cmp	r4, r5
 8006bd2:	d101      	bne.n	8006bd8 <__sfputs_r+0x12>
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e007      	b.n	8006be8 <__sfputs_r+0x22>
 8006bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bdc:	463a      	mov	r2, r7
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7ff ffda 	bl	8006b98 <__sfputc_r>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d1f3      	bne.n	8006bd0 <__sfputs_r+0xa>
 8006be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bec <_vfiprintf_r>:
 8006bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	b09d      	sub	sp, #116	@ 0x74
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	4698      	mov	r8, r3
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	b118      	cbz	r0, 8006c04 <_vfiprintf_r+0x18>
 8006bfc:	6a03      	ldr	r3, [r0, #32]
 8006bfe:	b90b      	cbnz	r3, 8006c04 <_vfiprintf_r+0x18>
 8006c00:	f7ff fcd8 	bl	80065b4 <__sinit>
 8006c04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c06:	07d9      	lsls	r1, r3, #31
 8006c08:	d405      	bmi.n	8006c16 <_vfiprintf_r+0x2a>
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	059a      	lsls	r2, r3, #22
 8006c0e:	d402      	bmi.n	8006c16 <_vfiprintf_r+0x2a>
 8006c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c12:	f7ff fec6 	bl	80069a2 <__retarget_lock_acquire_recursive>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	071b      	lsls	r3, r3, #28
 8006c1a:	d501      	bpl.n	8006c20 <_vfiprintf_r+0x34>
 8006c1c:	692b      	ldr	r3, [r5, #16]
 8006c1e:	b99b      	cbnz	r3, 8006c48 <_vfiprintf_r+0x5c>
 8006c20:	4629      	mov	r1, r5
 8006c22:	4630      	mov	r0, r6
 8006c24:	f7ff fdee 	bl	8006804 <__swsetup_r>
 8006c28:	b170      	cbz	r0, 8006c48 <_vfiprintf_r+0x5c>
 8006c2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c2c:	07dc      	lsls	r4, r3, #31
 8006c2e:	d504      	bpl.n	8006c3a <_vfiprintf_r+0x4e>
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c34:	b01d      	add	sp, #116	@ 0x74
 8006c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3a:	89ab      	ldrh	r3, [r5, #12]
 8006c3c:	0598      	lsls	r0, r3, #22
 8006c3e:	d4f7      	bmi.n	8006c30 <_vfiprintf_r+0x44>
 8006c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c42:	f7ff feaf 	bl	80069a4 <__retarget_lock_release_recursive>
 8006c46:	e7f3      	b.n	8006c30 <_vfiprintf_r+0x44>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c4c:	2320      	movs	r3, #32
 8006c4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c56:	2330      	movs	r3, #48	@ 0x30
 8006c58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e08 <_vfiprintf_r+0x21c>
 8006c5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c60:	f04f 0901 	mov.w	r9, #1
 8006c64:	4623      	mov	r3, r4
 8006c66:	469a      	mov	sl, r3
 8006c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c6c:	b10a      	cbz	r2, 8006c72 <_vfiprintf_r+0x86>
 8006c6e:	2a25      	cmp	r2, #37	@ 0x25
 8006c70:	d1f9      	bne.n	8006c66 <_vfiprintf_r+0x7a>
 8006c72:	ebba 0b04 	subs.w	fp, sl, r4
 8006c76:	d00b      	beq.n	8006c90 <_vfiprintf_r+0xa4>
 8006c78:	465b      	mov	r3, fp
 8006c7a:	4622      	mov	r2, r4
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7ff ffa1 	bl	8006bc6 <__sfputs_r>
 8006c84:	3001      	adds	r0, #1
 8006c86:	f000 80a7 	beq.w	8006dd8 <_vfiprintf_r+0x1ec>
 8006c8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c8c:	445a      	add	r2, fp
 8006c8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c90:	f89a 3000 	ldrb.w	r3, [sl]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 809f 	beq.w	8006dd8 <_vfiprintf_r+0x1ec>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ca4:	f10a 0a01 	add.w	sl, sl, #1
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	9307      	str	r3, [sp, #28]
 8006cac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cb2:	4654      	mov	r4, sl
 8006cb4:	2205      	movs	r2, #5
 8006cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cba:	4853      	ldr	r0, [pc, #332]	@ (8006e08 <_vfiprintf_r+0x21c>)
 8006cbc:	f7f9 fa98 	bl	80001f0 <memchr>
 8006cc0:	9a04      	ldr	r2, [sp, #16]
 8006cc2:	b9d8      	cbnz	r0, 8006cfc <_vfiprintf_r+0x110>
 8006cc4:	06d1      	lsls	r1, r2, #27
 8006cc6:	bf44      	itt	mi
 8006cc8:	2320      	movmi	r3, #32
 8006cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cce:	0713      	lsls	r3, r2, #28
 8006cd0:	bf44      	itt	mi
 8006cd2:	232b      	movmi	r3, #43	@ 0x2b
 8006cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cde:	d015      	beq.n	8006d0c <_vfiprintf_r+0x120>
 8006ce0:	9a07      	ldr	r2, [sp, #28]
 8006ce2:	4654      	mov	r4, sl
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f04f 0c0a 	mov.w	ip, #10
 8006cea:	4621      	mov	r1, r4
 8006cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cf0:	3b30      	subs	r3, #48	@ 0x30
 8006cf2:	2b09      	cmp	r3, #9
 8006cf4:	d94b      	bls.n	8006d8e <_vfiprintf_r+0x1a2>
 8006cf6:	b1b0      	cbz	r0, 8006d26 <_vfiprintf_r+0x13a>
 8006cf8:	9207      	str	r2, [sp, #28]
 8006cfa:	e014      	b.n	8006d26 <_vfiprintf_r+0x13a>
 8006cfc:	eba0 0308 	sub.w	r3, r0, r8
 8006d00:	fa09 f303 	lsl.w	r3, r9, r3
 8006d04:	4313      	orrs	r3, r2
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	46a2      	mov	sl, r4
 8006d0a:	e7d2      	b.n	8006cb2 <_vfiprintf_r+0xc6>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	1d19      	adds	r1, r3, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	9103      	str	r1, [sp, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bfbb      	ittet	lt
 8006d18:	425b      	neglt	r3, r3
 8006d1a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d1e:	9307      	strge	r3, [sp, #28]
 8006d20:	9307      	strlt	r3, [sp, #28]
 8006d22:	bfb8      	it	lt
 8006d24:	9204      	strlt	r2, [sp, #16]
 8006d26:	7823      	ldrb	r3, [r4, #0]
 8006d28:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d2a:	d10a      	bne.n	8006d42 <_vfiprintf_r+0x156>
 8006d2c:	7863      	ldrb	r3, [r4, #1]
 8006d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d30:	d132      	bne.n	8006d98 <_vfiprintf_r+0x1ac>
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	1d1a      	adds	r2, r3, #4
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	9203      	str	r2, [sp, #12]
 8006d3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d3e:	3402      	adds	r4, #2
 8006d40:	9305      	str	r3, [sp, #20]
 8006d42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e18 <_vfiprintf_r+0x22c>
 8006d46:	7821      	ldrb	r1, [r4, #0]
 8006d48:	2203      	movs	r2, #3
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	f7f9 fa50 	bl	80001f0 <memchr>
 8006d50:	b138      	cbz	r0, 8006d62 <_vfiprintf_r+0x176>
 8006d52:	9b04      	ldr	r3, [sp, #16]
 8006d54:	eba0 000a 	sub.w	r0, r0, sl
 8006d58:	2240      	movs	r2, #64	@ 0x40
 8006d5a:	4082      	lsls	r2, r0
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	3401      	adds	r4, #1
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d66:	4829      	ldr	r0, [pc, #164]	@ (8006e0c <_vfiprintf_r+0x220>)
 8006d68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d6c:	2206      	movs	r2, #6
 8006d6e:	f7f9 fa3f 	bl	80001f0 <memchr>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d03f      	beq.n	8006df6 <_vfiprintf_r+0x20a>
 8006d76:	4b26      	ldr	r3, [pc, #152]	@ (8006e10 <_vfiprintf_r+0x224>)
 8006d78:	bb1b      	cbnz	r3, 8006dc2 <_vfiprintf_r+0x1d6>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	3307      	adds	r3, #7
 8006d7e:	f023 0307 	bic.w	r3, r3, #7
 8006d82:	3308      	adds	r3, #8
 8006d84:	9303      	str	r3, [sp, #12]
 8006d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d88:	443b      	add	r3, r7
 8006d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d8c:	e76a      	b.n	8006c64 <_vfiprintf_r+0x78>
 8006d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d92:	460c      	mov	r4, r1
 8006d94:	2001      	movs	r0, #1
 8006d96:	e7a8      	b.n	8006cea <_vfiprintf_r+0xfe>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	3401      	adds	r4, #1
 8006d9c:	9305      	str	r3, [sp, #20]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	f04f 0c0a 	mov.w	ip, #10
 8006da4:	4620      	mov	r0, r4
 8006da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006daa:	3a30      	subs	r2, #48	@ 0x30
 8006dac:	2a09      	cmp	r2, #9
 8006dae:	d903      	bls.n	8006db8 <_vfiprintf_r+0x1cc>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0c6      	beq.n	8006d42 <_vfiprintf_r+0x156>
 8006db4:	9105      	str	r1, [sp, #20]
 8006db6:	e7c4      	b.n	8006d42 <_vfiprintf_r+0x156>
 8006db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e7f0      	b.n	8006da4 <_vfiprintf_r+0x1b8>
 8006dc2:	ab03      	add	r3, sp, #12
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	4b12      	ldr	r3, [pc, #72]	@ (8006e14 <_vfiprintf_r+0x228>)
 8006dca:	a904      	add	r1, sp, #16
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f3af 8000 	nop.w
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	1c78      	adds	r0, r7, #1
 8006dd6:	d1d6      	bne.n	8006d86 <_vfiprintf_r+0x19a>
 8006dd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dda:	07d9      	lsls	r1, r3, #31
 8006ddc:	d405      	bmi.n	8006dea <_vfiprintf_r+0x1fe>
 8006dde:	89ab      	ldrh	r3, [r5, #12]
 8006de0:	059a      	lsls	r2, r3, #22
 8006de2:	d402      	bmi.n	8006dea <_vfiprintf_r+0x1fe>
 8006de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006de6:	f7ff fddd 	bl	80069a4 <__retarget_lock_release_recursive>
 8006dea:	89ab      	ldrh	r3, [r5, #12]
 8006dec:	065b      	lsls	r3, r3, #25
 8006dee:	f53f af1f 	bmi.w	8006c30 <_vfiprintf_r+0x44>
 8006df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006df4:	e71e      	b.n	8006c34 <_vfiprintf_r+0x48>
 8006df6:	ab03      	add	r3, sp, #12
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	462a      	mov	r2, r5
 8006dfc:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <_vfiprintf_r+0x228>)
 8006dfe:	a904      	add	r1, sp, #16
 8006e00:	4630      	mov	r0, r6
 8006e02:	f000 f879 	bl	8006ef8 <_printf_i>
 8006e06:	e7e4      	b.n	8006dd2 <_vfiprintf_r+0x1e6>
 8006e08:	0800860c 	.word	0x0800860c
 8006e0c:	08008616 	.word	0x08008616
 8006e10:	00000000 	.word	0x00000000
 8006e14:	08006bc7 	.word	0x08006bc7
 8006e18:	08008612 	.word	0x08008612

08006e1c <_printf_common>:
 8006e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e20:	4616      	mov	r6, r2
 8006e22:	4698      	mov	r8, r3
 8006e24:	688a      	ldr	r2, [r1, #8]
 8006e26:	690b      	ldr	r3, [r1, #16]
 8006e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	bfb8      	it	lt
 8006e30:	4613      	movlt	r3, r2
 8006e32:	6033      	str	r3, [r6, #0]
 8006e34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e38:	4607      	mov	r7, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	b10a      	cbz	r2, 8006e42 <_printf_common+0x26>
 8006e3e:	3301      	adds	r3, #1
 8006e40:	6033      	str	r3, [r6, #0]
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	0699      	lsls	r1, r3, #26
 8006e46:	bf42      	ittt	mi
 8006e48:	6833      	ldrmi	r3, [r6, #0]
 8006e4a:	3302      	addmi	r3, #2
 8006e4c:	6033      	strmi	r3, [r6, #0]
 8006e4e:	6825      	ldr	r5, [r4, #0]
 8006e50:	f015 0506 	ands.w	r5, r5, #6
 8006e54:	d106      	bne.n	8006e64 <_printf_common+0x48>
 8006e56:	f104 0a19 	add.w	sl, r4, #25
 8006e5a:	68e3      	ldr	r3, [r4, #12]
 8006e5c:	6832      	ldr	r2, [r6, #0]
 8006e5e:	1a9b      	subs	r3, r3, r2
 8006e60:	42ab      	cmp	r3, r5
 8006e62:	dc26      	bgt.n	8006eb2 <_printf_common+0x96>
 8006e64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e68:	6822      	ldr	r2, [r4, #0]
 8006e6a:	3b00      	subs	r3, #0
 8006e6c:	bf18      	it	ne
 8006e6e:	2301      	movne	r3, #1
 8006e70:	0692      	lsls	r2, r2, #26
 8006e72:	d42b      	bmi.n	8006ecc <_printf_common+0xb0>
 8006e74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e78:	4641      	mov	r1, r8
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	47c8      	blx	r9
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d01e      	beq.n	8006ec0 <_printf_common+0xa4>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	6922      	ldr	r2, [r4, #16]
 8006e86:	f003 0306 	and.w	r3, r3, #6
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	bf02      	ittt	eq
 8006e8e:	68e5      	ldreq	r5, [r4, #12]
 8006e90:	6833      	ldreq	r3, [r6, #0]
 8006e92:	1aed      	subeq	r5, r5, r3
 8006e94:	68a3      	ldr	r3, [r4, #8]
 8006e96:	bf0c      	ite	eq
 8006e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e9c:	2500      	movne	r5, #0
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	bfc4      	itt	gt
 8006ea2:	1a9b      	subgt	r3, r3, r2
 8006ea4:	18ed      	addgt	r5, r5, r3
 8006ea6:	2600      	movs	r6, #0
 8006ea8:	341a      	adds	r4, #26
 8006eaa:	42b5      	cmp	r5, r6
 8006eac:	d11a      	bne.n	8006ee4 <_printf_common+0xc8>
 8006eae:	2000      	movs	r0, #0
 8006eb0:	e008      	b.n	8006ec4 <_printf_common+0xa8>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4652      	mov	r2, sl
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	4638      	mov	r0, r7
 8006eba:	47c8      	blx	r9
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d103      	bne.n	8006ec8 <_printf_common+0xac>
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec8:	3501      	adds	r5, #1
 8006eca:	e7c6      	b.n	8006e5a <_printf_common+0x3e>
 8006ecc:	18e1      	adds	r1, r4, r3
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	2030      	movs	r0, #48	@ 0x30
 8006ed2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ed6:	4422      	add	r2, r4
 8006ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006edc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	e7c7      	b.n	8006e74 <_printf_common+0x58>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	4641      	mov	r1, r8
 8006eea:	4638      	mov	r0, r7
 8006eec:	47c8      	blx	r9
 8006eee:	3001      	adds	r0, #1
 8006ef0:	d0e6      	beq.n	8006ec0 <_printf_common+0xa4>
 8006ef2:	3601      	adds	r6, #1
 8006ef4:	e7d9      	b.n	8006eaa <_printf_common+0x8e>
	...

08006ef8 <_printf_i>:
 8006ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	7e0f      	ldrb	r7, [r1, #24]
 8006efe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f00:	2f78      	cmp	r7, #120	@ 0x78
 8006f02:	4691      	mov	r9, r2
 8006f04:	4680      	mov	r8, r0
 8006f06:	460c      	mov	r4, r1
 8006f08:	469a      	mov	sl, r3
 8006f0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f0e:	d807      	bhi.n	8006f20 <_printf_i+0x28>
 8006f10:	2f62      	cmp	r7, #98	@ 0x62
 8006f12:	d80a      	bhi.n	8006f2a <_printf_i+0x32>
 8006f14:	2f00      	cmp	r7, #0
 8006f16:	f000 80d2 	beq.w	80070be <_printf_i+0x1c6>
 8006f1a:	2f58      	cmp	r7, #88	@ 0x58
 8006f1c:	f000 80b9 	beq.w	8007092 <_printf_i+0x19a>
 8006f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f28:	e03a      	b.n	8006fa0 <_printf_i+0xa8>
 8006f2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f2e:	2b15      	cmp	r3, #21
 8006f30:	d8f6      	bhi.n	8006f20 <_printf_i+0x28>
 8006f32:	a101      	add	r1, pc, #4	@ (adr r1, 8006f38 <_printf_i+0x40>)
 8006f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f38:	08006f91 	.word	0x08006f91
 8006f3c:	08006fa5 	.word	0x08006fa5
 8006f40:	08006f21 	.word	0x08006f21
 8006f44:	08006f21 	.word	0x08006f21
 8006f48:	08006f21 	.word	0x08006f21
 8006f4c:	08006f21 	.word	0x08006f21
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	08006f21 	.word	0x08006f21
 8006f58:	08006f21 	.word	0x08006f21
 8006f5c:	08006f21 	.word	0x08006f21
 8006f60:	08006f21 	.word	0x08006f21
 8006f64:	080070a5 	.word	0x080070a5
 8006f68:	08006fcf 	.word	0x08006fcf
 8006f6c:	0800705f 	.word	0x0800705f
 8006f70:	08006f21 	.word	0x08006f21
 8006f74:	08006f21 	.word	0x08006f21
 8006f78:	080070c7 	.word	0x080070c7
 8006f7c:	08006f21 	.word	0x08006f21
 8006f80:	08006fcf 	.word	0x08006fcf
 8006f84:	08006f21 	.word	0x08006f21
 8006f88:	08006f21 	.word	0x08006f21
 8006f8c:	08007067 	.word	0x08007067
 8006f90:	6833      	ldr	r3, [r6, #0]
 8006f92:	1d1a      	adds	r2, r3, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6032      	str	r2, [r6, #0]
 8006f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e09d      	b.n	80070e0 <_printf_i+0x1e8>
 8006fa4:	6833      	ldr	r3, [r6, #0]
 8006fa6:	6820      	ldr	r0, [r4, #0]
 8006fa8:	1d19      	adds	r1, r3, #4
 8006faa:	6031      	str	r1, [r6, #0]
 8006fac:	0606      	lsls	r6, r0, #24
 8006fae:	d501      	bpl.n	8006fb4 <_printf_i+0xbc>
 8006fb0:	681d      	ldr	r5, [r3, #0]
 8006fb2:	e003      	b.n	8006fbc <_printf_i+0xc4>
 8006fb4:	0645      	lsls	r5, r0, #25
 8006fb6:	d5fb      	bpl.n	8006fb0 <_printf_i+0xb8>
 8006fb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fbc:	2d00      	cmp	r5, #0
 8006fbe:	da03      	bge.n	8006fc8 <_printf_i+0xd0>
 8006fc0:	232d      	movs	r3, #45	@ 0x2d
 8006fc2:	426d      	negs	r5, r5
 8006fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fc8:	4859      	ldr	r0, [pc, #356]	@ (8007130 <_printf_i+0x238>)
 8006fca:	230a      	movs	r3, #10
 8006fcc:	e011      	b.n	8006ff2 <_printf_i+0xfa>
 8006fce:	6821      	ldr	r1, [r4, #0]
 8006fd0:	6833      	ldr	r3, [r6, #0]
 8006fd2:	0608      	lsls	r0, r1, #24
 8006fd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fd8:	d402      	bmi.n	8006fe0 <_printf_i+0xe8>
 8006fda:	0649      	lsls	r1, r1, #25
 8006fdc:	bf48      	it	mi
 8006fde:	b2ad      	uxthmi	r5, r5
 8006fe0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fe2:	4853      	ldr	r0, [pc, #332]	@ (8007130 <_printf_i+0x238>)
 8006fe4:	6033      	str	r3, [r6, #0]
 8006fe6:	bf14      	ite	ne
 8006fe8:	230a      	movne	r3, #10
 8006fea:	2308      	moveq	r3, #8
 8006fec:	2100      	movs	r1, #0
 8006fee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ff2:	6866      	ldr	r6, [r4, #4]
 8006ff4:	60a6      	str	r6, [r4, #8]
 8006ff6:	2e00      	cmp	r6, #0
 8006ff8:	bfa2      	ittt	ge
 8006ffa:	6821      	ldrge	r1, [r4, #0]
 8006ffc:	f021 0104 	bicge.w	r1, r1, #4
 8007000:	6021      	strge	r1, [r4, #0]
 8007002:	b90d      	cbnz	r5, 8007008 <_printf_i+0x110>
 8007004:	2e00      	cmp	r6, #0
 8007006:	d04b      	beq.n	80070a0 <_printf_i+0x1a8>
 8007008:	4616      	mov	r6, r2
 800700a:	fbb5 f1f3 	udiv	r1, r5, r3
 800700e:	fb03 5711 	mls	r7, r3, r1, r5
 8007012:	5dc7      	ldrb	r7, [r0, r7]
 8007014:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007018:	462f      	mov	r7, r5
 800701a:	42bb      	cmp	r3, r7
 800701c:	460d      	mov	r5, r1
 800701e:	d9f4      	bls.n	800700a <_printf_i+0x112>
 8007020:	2b08      	cmp	r3, #8
 8007022:	d10b      	bne.n	800703c <_printf_i+0x144>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	07df      	lsls	r7, r3, #31
 8007028:	d508      	bpl.n	800703c <_printf_i+0x144>
 800702a:	6923      	ldr	r3, [r4, #16]
 800702c:	6861      	ldr	r1, [r4, #4]
 800702e:	4299      	cmp	r1, r3
 8007030:	bfde      	ittt	le
 8007032:	2330      	movle	r3, #48	@ 0x30
 8007034:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007038:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800703c:	1b92      	subs	r2, r2, r6
 800703e:	6122      	str	r2, [r4, #16]
 8007040:	f8cd a000 	str.w	sl, [sp]
 8007044:	464b      	mov	r3, r9
 8007046:	aa03      	add	r2, sp, #12
 8007048:	4621      	mov	r1, r4
 800704a:	4640      	mov	r0, r8
 800704c:	f7ff fee6 	bl	8006e1c <_printf_common>
 8007050:	3001      	adds	r0, #1
 8007052:	d14a      	bne.n	80070ea <_printf_i+0x1f2>
 8007054:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007058:	b004      	add	sp, #16
 800705a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	f043 0320 	orr.w	r3, r3, #32
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	4833      	ldr	r0, [pc, #204]	@ (8007134 <_printf_i+0x23c>)
 8007068:	2778      	movs	r7, #120	@ 0x78
 800706a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	6831      	ldr	r1, [r6, #0]
 8007072:	061f      	lsls	r7, r3, #24
 8007074:	f851 5b04 	ldr.w	r5, [r1], #4
 8007078:	d402      	bmi.n	8007080 <_printf_i+0x188>
 800707a:	065f      	lsls	r7, r3, #25
 800707c:	bf48      	it	mi
 800707e:	b2ad      	uxthmi	r5, r5
 8007080:	6031      	str	r1, [r6, #0]
 8007082:	07d9      	lsls	r1, r3, #31
 8007084:	bf44      	itt	mi
 8007086:	f043 0320 	orrmi.w	r3, r3, #32
 800708a:	6023      	strmi	r3, [r4, #0]
 800708c:	b11d      	cbz	r5, 8007096 <_printf_i+0x19e>
 800708e:	2310      	movs	r3, #16
 8007090:	e7ac      	b.n	8006fec <_printf_i+0xf4>
 8007092:	4827      	ldr	r0, [pc, #156]	@ (8007130 <_printf_i+0x238>)
 8007094:	e7e9      	b.n	800706a <_printf_i+0x172>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	f023 0320 	bic.w	r3, r3, #32
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	e7f6      	b.n	800708e <_printf_i+0x196>
 80070a0:	4616      	mov	r6, r2
 80070a2:	e7bd      	b.n	8007020 <_printf_i+0x128>
 80070a4:	6833      	ldr	r3, [r6, #0]
 80070a6:	6825      	ldr	r5, [r4, #0]
 80070a8:	6961      	ldr	r1, [r4, #20]
 80070aa:	1d18      	adds	r0, r3, #4
 80070ac:	6030      	str	r0, [r6, #0]
 80070ae:	062e      	lsls	r6, r5, #24
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	d501      	bpl.n	80070b8 <_printf_i+0x1c0>
 80070b4:	6019      	str	r1, [r3, #0]
 80070b6:	e002      	b.n	80070be <_printf_i+0x1c6>
 80070b8:	0668      	lsls	r0, r5, #25
 80070ba:	d5fb      	bpl.n	80070b4 <_printf_i+0x1bc>
 80070bc:	8019      	strh	r1, [r3, #0]
 80070be:	2300      	movs	r3, #0
 80070c0:	6123      	str	r3, [r4, #16]
 80070c2:	4616      	mov	r6, r2
 80070c4:	e7bc      	b.n	8007040 <_printf_i+0x148>
 80070c6:	6833      	ldr	r3, [r6, #0]
 80070c8:	1d1a      	adds	r2, r3, #4
 80070ca:	6032      	str	r2, [r6, #0]
 80070cc:	681e      	ldr	r6, [r3, #0]
 80070ce:	6862      	ldr	r2, [r4, #4]
 80070d0:	2100      	movs	r1, #0
 80070d2:	4630      	mov	r0, r6
 80070d4:	f7f9 f88c 	bl	80001f0 <memchr>
 80070d8:	b108      	cbz	r0, 80070de <_printf_i+0x1e6>
 80070da:	1b80      	subs	r0, r0, r6
 80070dc:	6060      	str	r0, [r4, #4]
 80070de:	6863      	ldr	r3, [r4, #4]
 80070e0:	6123      	str	r3, [r4, #16]
 80070e2:	2300      	movs	r3, #0
 80070e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070e8:	e7aa      	b.n	8007040 <_printf_i+0x148>
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	4632      	mov	r2, r6
 80070ee:	4649      	mov	r1, r9
 80070f0:	4640      	mov	r0, r8
 80070f2:	47d0      	blx	sl
 80070f4:	3001      	adds	r0, #1
 80070f6:	d0ad      	beq.n	8007054 <_printf_i+0x15c>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	079b      	lsls	r3, r3, #30
 80070fc:	d413      	bmi.n	8007126 <_printf_i+0x22e>
 80070fe:	68e0      	ldr	r0, [r4, #12]
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	4298      	cmp	r0, r3
 8007104:	bfb8      	it	lt
 8007106:	4618      	movlt	r0, r3
 8007108:	e7a6      	b.n	8007058 <_printf_i+0x160>
 800710a:	2301      	movs	r3, #1
 800710c:	4632      	mov	r2, r6
 800710e:	4649      	mov	r1, r9
 8007110:	4640      	mov	r0, r8
 8007112:	47d0      	blx	sl
 8007114:	3001      	adds	r0, #1
 8007116:	d09d      	beq.n	8007054 <_printf_i+0x15c>
 8007118:	3501      	adds	r5, #1
 800711a:	68e3      	ldr	r3, [r4, #12]
 800711c:	9903      	ldr	r1, [sp, #12]
 800711e:	1a5b      	subs	r3, r3, r1
 8007120:	42ab      	cmp	r3, r5
 8007122:	dcf2      	bgt.n	800710a <_printf_i+0x212>
 8007124:	e7eb      	b.n	80070fe <_printf_i+0x206>
 8007126:	2500      	movs	r5, #0
 8007128:	f104 0619 	add.w	r6, r4, #25
 800712c:	e7f5      	b.n	800711a <_printf_i+0x222>
 800712e:	bf00      	nop
 8007130:	0800861d 	.word	0x0800861d
 8007134:	0800862e 	.word	0x0800862e

08007138 <__sflush_r>:
 8007138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800713c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007140:	0716      	lsls	r6, r2, #28
 8007142:	4605      	mov	r5, r0
 8007144:	460c      	mov	r4, r1
 8007146:	d454      	bmi.n	80071f2 <__sflush_r+0xba>
 8007148:	684b      	ldr	r3, [r1, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	dc02      	bgt.n	8007154 <__sflush_r+0x1c>
 800714e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007150:	2b00      	cmp	r3, #0
 8007152:	dd48      	ble.n	80071e6 <__sflush_r+0xae>
 8007154:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007156:	2e00      	cmp	r6, #0
 8007158:	d045      	beq.n	80071e6 <__sflush_r+0xae>
 800715a:	2300      	movs	r3, #0
 800715c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007160:	682f      	ldr	r7, [r5, #0]
 8007162:	6a21      	ldr	r1, [r4, #32]
 8007164:	602b      	str	r3, [r5, #0]
 8007166:	d030      	beq.n	80071ca <__sflush_r+0x92>
 8007168:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	0759      	lsls	r1, r3, #29
 800716e:	d505      	bpl.n	800717c <__sflush_r+0x44>
 8007170:	6863      	ldr	r3, [r4, #4]
 8007172:	1ad2      	subs	r2, r2, r3
 8007174:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007176:	b10b      	cbz	r3, 800717c <__sflush_r+0x44>
 8007178:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800717a:	1ad2      	subs	r2, r2, r3
 800717c:	2300      	movs	r3, #0
 800717e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007180:	6a21      	ldr	r1, [r4, #32]
 8007182:	4628      	mov	r0, r5
 8007184:	47b0      	blx	r6
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	d106      	bne.n	800719a <__sflush_r+0x62>
 800718c:	6829      	ldr	r1, [r5, #0]
 800718e:	291d      	cmp	r1, #29
 8007190:	d82b      	bhi.n	80071ea <__sflush_r+0xb2>
 8007192:	4a2a      	ldr	r2, [pc, #168]	@ (800723c <__sflush_r+0x104>)
 8007194:	410a      	asrs	r2, r1
 8007196:	07d6      	lsls	r6, r2, #31
 8007198:	d427      	bmi.n	80071ea <__sflush_r+0xb2>
 800719a:	2200      	movs	r2, #0
 800719c:	6062      	str	r2, [r4, #4]
 800719e:	04d9      	lsls	r1, r3, #19
 80071a0:	6922      	ldr	r2, [r4, #16]
 80071a2:	6022      	str	r2, [r4, #0]
 80071a4:	d504      	bpl.n	80071b0 <__sflush_r+0x78>
 80071a6:	1c42      	adds	r2, r0, #1
 80071a8:	d101      	bne.n	80071ae <__sflush_r+0x76>
 80071aa:	682b      	ldr	r3, [r5, #0]
 80071ac:	b903      	cbnz	r3, 80071b0 <__sflush_r+0x78>
 80071ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80071b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071b2:	602f      	str	r7, [r5, #0]
 80071b4:	b1b9      	cbz	r1, 80071e6 <__sflush_r+0xae>
 80071b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071ba:	4299      	cmp	r1, r3
 80071bc:	d002      	beq.n	80071c4 <__sflush_r+0x8c>
 80071be:	4628      	mov	r0, r5
 80071c0:	f7ff fbf2 	bl	80069a8 <_free_r>
 80071c4:	2300      	movs	r3, #0
 80071c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80071c8:	e00d      	b.n	80071e6 <__sflush_r+0xae>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4628      	mov	r0, r5
 80071ce:	47b0      	blx	r6
 80071d0:	4602      	mov	r2, r0
 80071d2:	1c50      	adds	r0, r2, #1
 80071d4:	d1c9      	bne.n	800716a <__sflush_r+0x32>
 80071d6:	682b      	ldr	r3, [r5, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0c6      	beq.n	800716a <__sflush_r+0x32>
 80071dc:	2b1d      	cmp	r3, #29
 80071de:	d001      	beq.n	80071e4 <__sflush_r+0xac>
 80071e0:	2b16      	cmp	r3, #22
 80071e2:	d11e      	bne.n	8007222 <__sflush_r+0xea>
 80071e4:	602f      	str	r7, [r5, #0]
 80071e6:	2000      	movs	r0, #0
 80071e8:	e022      	b.n	8007230 <__sflush_r+0xf8>
 80071ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071ee:	b21b      	sxth	r3, r3
 80071f0:	e01b      	b.n	800722a <__sflush_r+0xf2>
 80071f2:	690f      	ldr	r7, [r1, #16]
 80071f4:	2f00      	cmp	r7, #0
 80071f6:	d0f6      	beq.n	80071e6 <__sflush_r+0xae>
 80071f8:	0793      	lsls	r3, r2, #30
 80071fa:	680e      	ldr	r6, [r1, #0]
 80071fc:	bf08      	it	eq
 80071fe:	694b      	ldreq	r3, [r1, #20]
 8007200:	600f      	str	r7, [r1, #0]
 8007202:	bf18      	it	ne
 8007204:	2300      	movne	r3, #0
 8007206:	eba6 0807 	sub.w	r8, r6, r7
 800720a:	608b      	str	r3, [r1, #8]
 800720c:	f1b8 0f00 	cmp.w	r8, #0
 8007210:	dde9      	ble.n	80071e6 <__sflush_r+0xae>
 8007212:	6a21      	ldr	r1, [r4, #32]
 8007214:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007216:	4643      	mov	r3, r8
 8007218:	463a      	mov	r2, r7
 800721a:	4628      	mov	r0, r5
 800721c:	47b0      	blx	r6
 800721e:	2800      	cmp	r0, #0
 8007220:	dc08      	bgt.n	8007234 <__sflush_r+0xfc>
 8007222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007234:	4407      	add	r7, r0
 8007236:	eba8 0800 	sub.w	r8, r8, r0
 800723a:	e7e7      	b.n	800720c <__sflush_r+0xd4>
 800723c:	dfbffffe 	.word	0xdfbffffe

08007240 <_fflush_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	690b      	ldr	r3, [r1, #16]
 8007244:	4605      	mov	r5, r0
 8007246:	460c      	mov	r4, r1
 8007248:	b913      	cbnz	r3, 8007250 <_fflush_r+0x10>
 800724a:	2500      	movs	r5, #0
 800724c:	4628      	mov	r0, r5
 800724e:	bd38      	pop	{r3, r4, r5, pc}
 8007250:	b118      	cbz	r0, 800725a <_fflush_r+0x1a>
 8007252:	6a03      	ldr	r3, [r0, #32]
 8007254:	b90b      	cbnz	r3, 800725a <_fflush_r+0x1a>
 8007256:	f7ff f9ad 	bl	80065b4 <__sinit>
 800725a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0f3      	beq.n	800724a <_fflush_r+0xa>
 8007262:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007264:	07d0      	lsls	r0, r2, #31
 8007266:	d404      	bmi.n	8007272 <_fflush_r+0x32>
 8007268:	0599      	lsls	r1, r3, #22
 800726a:	d402      	bmi.n	8007272 <_fflush_r+0x32>
 800726c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800726e:	f7ff fb98 	bl	80069a2 <__retarget_lock_acquire_recursive>
 8007272:	4628      	mov	r0, r5
 8007274:	4621      	mov	r1, r4
 8007276:	f7ff ff5f 	bl	8007138 <__sflush_r>
 800727a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800727c:	07da      	lsls	r2, r3, #31
 800727e:	4605      	mov	r5, r0
 8007280:	d4e4      	bmi.n	800724c <_fflush_r+0xc>
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	059b      	lsls	r3, r3, #22
 8007286:	d4e1      	bmi.n	800724c <_fflush_r+0xc>
 8007288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800728a:	f7ff fb8b 	bl	80069a4 <__retarget_lock_release_recursive>
 800728e:	e7dd      	b.n	800724c <_fflush_r+0xc>

08007290 <__swhatbuf_r>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	460c      	mov	r4, r1
 8007294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007298:	2900      	cmp	r1, #0
 800729a:	b096      	sub	sp, #88	@ 0x58
 800729c:	4615      	mov	r5, r2
 800729e:	461e      	mov	r6, r3
 80072a0:	da0d      	bge.n	80072be <__swhatbuf_r+0x2e>
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072a8:	f04f 0100 	mov.w	r1, #0
 80072ac:	bf14      	ite	ne
 80072ae:	2340      	movne	r3, #64	@ 0x40
 80072b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072b4:	2000      	movs	r0, #0
 80072b6:	6031      	str	r1, [r6, #0]
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	b016      	add	sp, #88	@ 0x58
 80072bc:	bd70      	pop	{r4, r5, r6, pc}
 80072be:	466a      	mov	r2, sp
 80072c0:	f000 f848 	bl	8007354 <_fstat_r>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	dbec      	blt.n	80072a2 <__swhatbuf_r+0x12>
 80072c8:	9901      	ldr	r1, [sp, #4]
 80072ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072d2:	4259      	negs	r1, r3
 80072d4:	4159      	adcs	r1, r3
 80072d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072da:	e7eb      	b.n	80072b4 <__swhatbuf_r+0x24>

080072dc <__smakebuf_r>:
 80072dc:	898b      	ldrh	r3, [r1, #12]
 80072de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072e0:	079d      	lsls	r5, r3, #30
 80072e2:	4606      	mov	r6, r0
 80072e4:	460c      	mov	r4, r1
 80072e6:	d507      	bpl.n	80072f8 <__smakebuf_r+0x1c>
 80072e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	6123      	str	r3, [r4, #16]
 80072f0:	2301      	movs	r3, #1
 80072f2:	6163      	str	r3, [r4, #20]
 80072f4:	b003      	add	sp, #12
 80072f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f8:	ab01      	add	r3, sp, #4
 80072fa:	466a      	mov	r2, sp
 80072fc:	f7ff ffc8 	bl	8007290 <__swhatbuf_r>
 8007300:	9f00      	ldr	r7, [sp, #0]
 8007302:	4605      	mov	r5, r0
 8007304:	4639      	mov	r1, r7
 8007306:	4630      	mov	r0, r6
 8007308:	f7ff fbba 	bl	8006a80 <_malloc_r>
 800730c:	b948      	cbnz	r0, 8007322 <__smakebuf_r+0x46>
 800730e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007312:	059a      	lsls	r2, r3, #22
 8007314:	d4ee      	bmi.n	80072f4 <__smakebuf_r+0x18>
 8007316:	f023 0303 	bic.w	r3, r3, #3
 800731a:	f043 0302 	orr.w	r3, r3, #2
 800731e:	81a3      	strh	r3, [r4, #12]
 8007320:	e7e2      	b.n	80072e8 <__smakebuf_r+0xc>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	6020      	str	r0, [r4, #0]
 8007326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800732a:	81a3      	strh	r3, [r4, #12]
 800732c:	9b01      	ldr	r3, [sp, #4]
 800732e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007332:	b15b      	cbz	r3, 800734c <__smakebuf_r+0x70>
 8007334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007338:	4630      	mov	r0, r6
 800733a:	f000 f81d 	bl	8007378 <_isatty_r>
 800733e:	b128      	cbz	r0, 800734c <__smakebuf_r+0x70>
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	81a3      	strh	r3, [r4, #12]
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	431d      	orrs	r5, r3
 8007350:	81a5      	strh	r5, [r4, #12]
 8007352:	e7cf      	b.n	80072f4 <__smakebuf_r+0x18>

08007354 <_fstat_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4d07      	ldr	r5, [pc, #28]	@ (8007374 <_fstat_r+0x20>)
 8007358:	2300      	movs	r3, #0
 800735a:	4604      	mov	r4, r0
 800735c:	4608      	mov	r0, r1
 800735e:	4611      	mov	r1, r2
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	f7fb fbb3 	bl	8002acc <_fstat>
 8007366:	1c43      	adds	r3, r0, #1
 8007368:	d102      	bne.n	8007370 <_fstat_r+0x1c>
 800736a:	682b      	ldr	r3, [r5, #0]
 800736c:	b103      	cbz	r3, 8007370 <_fstat_r+0x1c>
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	bd38      	pop	{r3, r4, r5, pc}
 8007372:	bf00      	nop
 8007374:	20025be0 	.word	0x20025be0

08007378 <_isatty_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4d06      	ldr	r5, [pc, #24]	@ (8007394 <_isatty_r+0x1c>)
 800737c:	2300      	movs	r3, #0
 800737e:	4604      	mov	r4, r0
 8007380:	4608      	mov	r0, r1
 8007382:	602b      	str	r3, [r5, #0]
 8007384:	f7fb fbb2 	bl	8002aec <_isatty>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_isatty_r+0x1a>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b103      	cbz	r3, 8007392 <_isatty_r+0x1a>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	20025be0 	.word	0x20025be0

08007398 <_sbrk_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4d06      	ldr	r5, [pc, #24]	@ (80073b4 <_sbrk_r+0x1c>)
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	602b      	str	r3, [r5, #0]
 80073a4:	f7fb fbba 	bl	8002b1c <_sbrk>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_sbrk_r+0x1a>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_sbrk_r+0x1a>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	20025be0 	.word	0x20025be0

080073b8 <_init>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	bf00      	nop
 80073bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	469e      	mov	lr, r3
 80073c2:	4770      	bx	lr

080073c4 <_fini>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	bf00      	nop
 80073c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ca:	bc08      	pop	{r3}
 80073cc:	469e      	mov	lr, r3
 80073ce:	4770      	bx	lr
