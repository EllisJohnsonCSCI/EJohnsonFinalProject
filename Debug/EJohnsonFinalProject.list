
EJohnsonFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036ec  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e0  08003898  08003898  00004898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a78  08004a78  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a78  08004a78  00005a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a80  08004a80  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a80  08004a80  00005a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004a88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000601c  2**0
                  CONTENTS
 10 .bss          00025958  2000001c  2000001c  0000601c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025974  20025974  0000601c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f3b  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ecc  00000000  00000000  0000ff87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  00011e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b0  00000000  00000000  000128c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c0d  00000000  00000000  00013070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd32  00000000  00000000  00038c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e060e  00000000  00000000  000449af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124fbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028f4  00000000  00000000  00125000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001278f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003880 	.word	0x08003880

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08003880 	.word	0x08003880

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f001 f966 	bl	80017b0 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f91c 	bl	8000720 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f8cf 	bl	800068c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 f9de 	bl	80008b4 <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	@ 0x30
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
 8000506:	4b5a      	ldr	r3, [pc, #360]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800050a:	4a59      	ldr	r2, [pc, #356]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800050c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000510:	6453      	str	r3, [r2, #68]	@ 0x44
 8000512:	4b57      	ldr	r3, [pc, #348]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000516:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800051a:	61bb      	str	r3, [r7, #24]
 800051c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	4b53      	ldr	r3, [pc, #332]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	4a52      	ldr	r2, [pc, #328]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	@ 0x30
 800052e:	4b50      	ldr	r3, [pc, #320]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	4b4c      	ldr	r3, [pc, #304]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a4b      	ldr	r2, [pc, #300]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b49      	ldr	r3, [pc, #292]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	4b45      	ldr	r3, [pc, #276]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a44      	ldr	r2, [pc, #272]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b42      	ldr	r3, [pc, #264]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	4b3e      	ldr	r3, [pc, #248]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	4a3d      	ldr	r2, [pc, #244]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	6313      	str	r3, [r2, #48]	@ 0x30
 8000582:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b37      	ldr	r3, [pc, #220]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	4a36      	ldr	r2, [pc, #216]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	6313      	str	r3, [r2, #48]	@ 0x30
 800059e:	4b34      	ldr	r3, [pc, #208]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	f003 0320 	and.w	r3, r3, #32
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b30      	ldr	r3, [pc, #192]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80005c6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80005ca:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80005d4:	2302      	movs	r3, #2
 80005d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80005d8:	230e      	movs	r3, #14
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	4824      	ldr	r0, [pc, #144]	@ (8000674 <LCD_GPIO_Init+0x178>)
 80005e4:	f001 faa4 	bl	8001b30 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80005e8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80005ec:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	4820      	ldr	r0, [pc, #128]	@ (8000678 <LCD_GPIO_Init+0x17c>)
 80005f6:	f001 fa9b 	bl	8001b30 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80005fa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80005fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	481d      	ldr	r0, [pc, #116]	@ (800067c <LCD_GPIO_Init+0x180>)
 8000608:	f001 fa92 	bl	8001b30 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800060c:	2348      	movs	r3, #72	@ 0x48
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	481a      	ldr	r0, [pc, #104]	@ (8000680 <LCD_GPIO_Init+0x184>)
 8000618:	f001 fa8a 	bl	8001b30 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800061c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4816      	ldr	r0, [pc, #88]	@ (8000684 <LCD_GPIO_Init+0x188>)
 800062a:	f001 fa81 	bl	8001b30 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800062e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000632:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4813      	ldr	r0, [pc, #76]	@ (8000688 <LCD_GPIO_Init+0x18c>)
 800063c:	f001 fa78 	bl	8001b30 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000640:	2303      	movs	r3, #3
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000644:	2309      	movs	r3, #9
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	480a      	ldr	r0, [pc, #40]	@ (8000678 <LCD_GPIO_Init+0x17c>)
 8000650:	f001 fa6e 	bl	8001b30 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000654:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	4809      	ldr	r0, [pc, #36]	@ (8000688 <LCD_GPIO_Init+0x18c>)
 8000662:	f001 fa65 	bl	8001b30 <HAL_GPIO_Init>
}
 8000666:	bf00      	nop
 8000668:	3730      	adds	r7, #48	@ 0x30
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40020000 	.word	0x40020000
 8000678:	40020400 	.word	0x40020400
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	40021400 	.word	0x40021400
 8000688:	40021800 	.word	0x40021800

0800068c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b090      	sub	sp, #64	@ 0x40
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800069a:	23f0      	movs	r3, #240	@ 0xf0
 800069c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80006a2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006a6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80006ac:	23ff      	movs	r3, #255	@ 0xff
 80006ae:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006ba:	2305      	movs	r3, #5
 80006bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <LTCD_Layer_Init+0x78>)
 80006c6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80006c8:	23f0      	movs	r3, #240	@ 0xf0
 80006ca:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80006cc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006d0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4806      	ldr	r0, [pc, #24]	@ (8000708 <LTCD_Layer_Init+0x7c>)
 80006ee:	f001 fdc1 	bl	8002274 <HAL_LTDC_ConfigLayer>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80006f8:	f000 fb48 	bl	8000d8c <LCD_Error_Handler>
	}
}
 80006fc:	bf00      	nop
 80006fe:	3740      	adds	r7, #64	@ 0x40
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000114 	.word	0x20000114
 8000708:	20000038 	.word	0x20000038

0800070c <clearScreen>:

void clearScreen(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  LCD_Clear(0,LCD_COLOR_WHITE);
 8000710:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f8cd 	bl	80008b4 <LCD_Clear>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <LTCD__Init>:

void LTCD__Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000724:	4b2a      	ldr	r3, [pc, #168]	@ (80007d0 <LTCD__Init+0xb0>)
 8000726:	4a2b      	ldr	r2, [pc, #172]	@ (80007d4 <LTCD__Init+0xb4>)
 8000728:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800072a:	4b29      	ldr	r3, [pc, #164]	@ (80007d0 <LTCD__Init+0xb0>)
 800072c:	2209      	movs	r2, #9
 800072e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000730:	4b27      	ldr	r3, [pc, #156]	@ (80007d0 <LTCD__Init+0xb0>)
 8000732:	2201      	movs	r2, #1
 8000734:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000736:	4b26      	ldr	r3, [pc, #152]	@ (80007d0 <LTCD__Init+0xb0>)
 8000738:	221d      	movs	r2, #29
 800073a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800073c:	4b24      	ldr	r3, [pc, #144]	@ (80007d0 <LTCD__Init+0xb0>)
 800073e:	2203      	movs	r2, #3
 8000740:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000742:	4b23      	ldr	r3, [pc, #140]	@ (80007d0 <LTCD__Init+0xb0>)
 8000744:	f240 120d 	movw	r2, #269	@ 0x10d
 8000748:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <LTCD__Init+0xb0>)
 800074c:	f240 1243 	movw	r2, #323	@ 0x143
 8000750:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000752:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <LTCD__Init+0xb0>)
 8000754:	f240 1217 	movw	r2, #279	@ 0x117
 8000758:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <LTCD__Init+0xb0>)
 800075c:	f240 1247 	movw	r2, #327	@ 0x147
 8000760:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000762:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <LTCD__Init+0xb0>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <LTCD__Init+0xb0>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <LTCD__Init+0xb0>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <LTCD__Init+0xb8>)
 800077c:	2208      	movs	r2, #8
 800077e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000780:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <LTCD__Init+0xb8>)
 8000782:	22c0      	movs	r2, #192	@ 0xc0
 8000784:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <LTCD__Init+0xb8>)
 8000788:	2204      	movs	r2, #4
 800078a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <LTCD__Init+0xb8>)
 800078e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000792:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000794:	4810      	ldr	r0, [pc, #64]	@ (80007d8 <LTCD__Init+0xb8>)
 8000796:	f002 fba7 	bl	8002ee8 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <LTCD__Init+0xb0>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <LTCD__Init+0xb0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <LTCD__Init+0xb0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ac:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <LTCD__Init+0xb0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80007b2:	f7ff fea3 	bl	80004fc <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007b6:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <LTCD__Init+0xb0>)
 80007b8:	f001 fc8c 	bl	80020d4 <HAL_LTDC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80007c2:	f000 fae3 	bl	8000d8c <LCD_Error_Handler>
	 }

	ili9341_Init();
 80007c6:	f000 fae7 	bl	8000d98 <ili9341_Init>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000038 	.word	0x20000038
 80007d4:	40016800 	.word	0x40016800
 80007d8:	200000e0 	.word	0x200000e0

080007dc <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
 80007e6:	460b      	mov	r3, r1
 80007e8:	80bb      	strh	r3, [r7, #4]
 80007ea:	4613      	mov	r3, r2
 80007ec:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80007ee:	88ba      	ldrh	r2, [r7, #4]
 80007f0:	4613      	mov	r3, r2
 80007f2:	011b      	lsls	r3, r3, #4
 80007f4:	1a9b      	subs	r3, r3, r2
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	461a      	mov	r2, r3
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	4413      	add	r3, r2
 80007fe:	4905      	ldr	r1, [pc, #20]	@ (8000814 <LCD_Draw_Pixel+0x38>)
 8000800:	887a      	ldrh	r2, [r7, #2]
 8000802:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000114 	.word	0x20000114

08000818 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	4604      	mov	r4, r0
 8000820:	4608      	mov	r0, r1
 8000822:	4611      	mov	r1, r2
 8000824:	461a      	mov	r2, r3
 8000826:	4623      	mov	r3, r4
 8000828:	80fb      	strh	r3, [r7, #6]
 800082a:	4603      	mov	r3, r0
 800082c:	80bb      	strh	r3, [r7, #4]
 800082e:	460b      	mov	r3, r1
 8000830:	807b      	strh	r3, [r7, #2]
 8000832:	4613      	mov	r3, r2
 8000834:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	81fb      	strh	r3, [r7, #14]
 800083a:	e00b      	b.n	8000854 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 800083c:	89fa      	ldrh	r2, [r7, #14]
 800083e:	88bb      	ldrh	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	b299      	uxth	r1, r3
 8000844:	883a      	ldrh	r2, [r7, #0]
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ffc7 	bl	80007dc <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800084e:	89fb      	ldrh	r3, [r7, #14]
 8000850:	3301      	adds	r3, #1
 8000852:	81fb      	strh	r3, [r7, #14]
 8000854:	89fa      	ldrh	r2, [r7, #14]
 8000856:	887b      	ldrh	r3, [r7, #2]
 8000858:	429a      	cmp	r2, r3
 800085a:	d3ef      	bcc.n	800083c <LCD_Draw_Vertical_Line+0x24>
  }
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bd90      	pop	{r4, r7, pc}

08000866 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000866:	b590      	push	{r4, r7, lr}
 8000868:	b085      	sub	sp, #20
 800086a:	af00      	add	r7, sp, #0
 800086c:	4604      	mov	r4, r0
 800086e:	4608      	mov	r0, r1
 8000870:	4611      	mov	r1, r2
 8000872:	461a      	mov	r2, r3
 8000874:	4623      	mov	r3, r4
 8000876:	80fb      	strh	r3, [r7, #6]
 8000878:	4603      	mov	r3, r0
 800087a:	80bb      	strh	r3, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	807b      	strh	r3, [r7, #2]
 8000880:	4613      	mov	r3, r2
 8000882:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000884:	2300      	movs	r3, #0
 8000886:	81fb      	strh	r3, [r7, #14]
 8000888:	e00b      	b.n	80008a2 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 800088a:	89fa      	ldrh	r2, [r7, #14]
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	4413      	add	r3, r2
 8000890:	b29b      	uxth	r3, r3
 8000892:	883a      	ldrh	r2, [r7, #0]
 8000894:	88b9      	ldrh	r1, [r7, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ffa0 	bl	80007dc <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800089c:	89fb      	ldrh	r3, [r7, #14]
 800089e:	3301      	adds	r3, #1
 80008a0:	81fb      	strh	r3, [r7, #14]
 80008a2:	89fa      	ldrh	r2, [r7, #14]
 80008a4:	887b      	ldrh	r3, [r7, #2]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d3ef      	bcc.n	800088a <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd90      	pop	{r4, r7, pc}

080008b4 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	460a      	mov	r2, r1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	4613      	mov	r3, r2
 80008c2:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10e      	bne.n	80008e8 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	e007      	b.n	80008e0 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80008d0:	4908      	ldr	r1, [pc, #32]	@ (80008f4 <LCD_Clear+0x40>)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	88ba      	ldrh	r2, [r7, #4]
 80008d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3301      	adds	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80008e6:	d3f3      	bcc.n	80008d0 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	20000114 	.word	0x20000114

080008f8 <LCD_Draw_Rectangle_Empty>:

void LCD_Draw_Rectangle_Empty(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4604      	mov	r4, r0
 8000900:	4608      	mov	r0, r1
 8000902:	4611      	mov	r1, r2
 8000904:	461a      	mov	r2, r3
 8000906:	4623      	mov	r3, r4
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	4603      	mov	r3, r0
 800090c:	80bb      	strh	r3, [r7, #4]
 800090e:	460b      	mov	r3, r1
 8000910:	807b      	strh	r3, [r7, #2]
 8000912:	4613      	mov	r3, r2
 8000914:	803b      	strh	r3, [r7, #0]
	//draw vertical x,y,height
	//draw vertical x+length,y,height
	//draw horizontal x,y,length
	//draw horizontal x,y+height,length
	LCD_Draw_Vertical_Line(Xpos,Ypos,height,color);
 8000916:	8b3b      	ldrh	r3, [r7, #24]
 8000918:	883a      	ldrh	r2, [r7, #0]
 800091a:	88b9      	ldrh	r1, [r7, #4]
 800091c:	88f8      	ldrh	r0, [r7, #6]
 800091e:	f7ff ff7b 	bl	8000818 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(Xpos+len,Ypos,height,color);
 8000922:	88fa      	ldrh	r2, [r7, #6]
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	4413      	add	r3, r2
 8000928:	b298      	uxth	r0, r3
 800092a:	8b3b      	ldrh	r3, [r7, #24]
 800092c:	883a      	ldrh	r2, [r7, #0]
 800092e:	88b9      	ldrh	r1, [r7, #4]
 8000930:	f7ff ff72 	bl	8000818 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos,len,color);
 8000934:	8b3b      	ldrh	r3, [r7, #24]
 8000936:	887a      	ldrh	r2, [r7, #2]
 8000938:	88b9      	ldrh	r1, [r7, #4]
 800093a:	88f8      	ldrh	r0, [r7, #6]
 800093c:	f7ff ff93 	bl	8000866 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos+height,len,color);
 8000940:	88ba      	ldrh	r2, [r7, #4]
 8000942:	883b      	ldrh	r3, [r7, #0]
 8000944:	4413      	add	r3, r2
 8000946:	b299      	uxth	r1, r3
 8000948:	8b3b      	ldrh	r3, [r7, #24]
 800094a:	887a      	ldrh	r2, [r7, #2]
 800094c:	88f8      	ldrh	r0, [r7, #6]
 800094e:	f7ff ff8a 	bl	8000866 <LCD_Draw_Horizontal_Line>
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bd90      	pop	{r4, r7, pc}

0800095a <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 800095a:	b590      	push	{r4, r7, lr}
 800095c:	b085      	sub	sp, #20
 800095e:	af00      	add	r7, sp, #0
 8000960:	4604      	mov	r4, r0
 8000962:	4608      	mov	r0, r1
 8000964:	4611      	mov	r1, r2
 8000966:	461a      	mov	r2, r3
 8000968:	4623      	mov	r3, r4
 800096a:	80fb      	strh	r3, [r7, #6]
 800096c:	4603      	mov	r3, r0
 800096e:	80bb      	strh	r3, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
 8000974:	4613      	mov	r3, r2
 8000976:	803b      	strh	r3, [r7, #0]
	for(int i = 0; i < len; i++){
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	e00c      	b.n	8000998 <LCD_Draw_Rectangle_Fill+0x3e>
		//Draw a bunch of vertical lines from left to right
		LCD_Draw_Vertical_Line(Xpos+i,Ypos,height,color);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	b29a      	uxth	r2, r3
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	4413      	add	r3, r2
 8000986:	b298      	uxth	r0, r3
 8000988:	8c3b      	ldrh	r3, [r7, #32]
 800098a:	883a      	ldrh	r2, [r7, #0]
 800098c:	88b9      	ldrh	r1, [r7, #4]
 800098e:	f7ff ff43 	bl	8000818 <LCD_Draw_Vertical_Line>
	for(int i = 0; i < len; i++){
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3301      	adds	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	887b      	ldrh	r3, [r7, #2]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbee      	blt.n	800097e <LCD_Draw_Rectangle_Fill+0x24>
	}
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd90      	pop	{r4, r7, pc}

080009aa <LCD_Draw_OBlock>:

void LCD_Draw_OBlock(uint16_t Xpos, uint16_t Ypos){
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b084      	sub	sp, #16
 80009ae:	af02      	add	r7, sp, #8
 80009b0:	4603      	mov	r3, r0
 80009b2:	460a      	mov	r2, r1
 80009b4:	80fb      	strh	r3, [r7, #6]
 80009b6:	4613      	mov	r3, r2
 80009b8:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH*2,LCD_COLOR_YELLOW);
 80009ba:	88b9      	ldrh	r1, [r7, #4]
 80009bc:	88f8      	ldrh	r0, [r7, #6]
 80009be:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	233c      	movs	r3, #60	@ 0x3c
 80009c6:	223c      	movs	r2, #60	@ 0x3c
 80009c8:	f7ff ffc7 	bl	800095a <LCD_Draw_Rectangle_Fill>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <LCD_Draw_IBlock>:
void LCD_Draw_IBlock(uint16_t Xpos, uint16_t Ypos){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af02      	add	r7, sp, #8
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	80fb      	strh	r3, [r7, #6]
 80009e0:	4613      	mov	r3, r2
 80009e2:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*4,LCD_COLOR_CYAN);
 80009e4:	88b9      	ldrh	r1, [r7, #4]
 80009e6:	88f8      	ldrh	r0, [r7, #6]
 80009e8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2378      	movs	r3, #120	@ 0x78
 80009f0:	221e      	movs	r2, #30
 80009f2:	f7ff ffb2 	bl	800095a <LCD_Draw_Rectangle_Fill>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <LCD_Draw_SBlock>:
void LCD_Draw_SBlock(uint16_t Xpos, uint16_t Ypos){
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b084      	sub	sp, #16
 8000a02:	af02      	add	r7, sp, #8
 8000a04:	4603      	mov	r3, r0
 8000a06:	460a      	mov	r2, r1
 8000a08:	80fb      	strh	r3, [r7, #6]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_RED);
 8000a0e:	88b9      	ldrh	r1, [r7, #4]
 8000a10:	88f8      	ldrh	r0, [r7, #6]
 8000a12:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	231e      	movs	r3, #30
 8000a1a:	223c      	movs	r2, #60	@ 0x3c
 8000a1c:	f7ff ff9d 	bl	800095a <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_RED);
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	3b1e      	subs	r3, #30
 8000a24:	b298      	uxth	r0, r3
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	331e      	adds	r3, #30
 8000a2a:	b299      	uxth	r1, r3
 8000a2c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	231e      	movs	r3, #30
 8000a34:	223c      	movs	r2, #60	@ 0x3c
 8000a36:	f7ff ff90 	bl	800095a <LCD_Draw_Rectangle_Fill>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <LCD_Draw_ZBlock>:
void LCD_Draw_ZBlock(uint16_t Xpos, uint16_t Ypos){
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b084      	sub	sp, #16
 8000a46:	af02      	add	r7, sp, #8
 8000a48:	4603      	mov	r3, r0
 8000a4a:	460a      	mov	r2, r1
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_GREEN);
 8000a52:	88b9      	ldrh	r1, [r7, #4]
 8000a54:	88f8      	ldrh	r0, [r7, #6]
 8000a56:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	231e      	movs	r3, #30
 8000a5e:	223c      	movs	r2, #60	@ 0x3c
 8000a60:	f7ff ff7b 	bl	800095a <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_GREEN);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	331e      	adds	r3, #30
 8000a68:	b298      	uxth	r0, r3
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	331e      	adds	r3, #30
 8000a6e:	b299      	uxth	r1, r3
 8000a70:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	231e      	movs	r3, #30
 8000a78:	223c      	movs	r2, #60	@ 0x3c
 8000a7a:	f7ff ff6e 	bl	800095a <LCD_Draw_Rectangle_Fill>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <LCD_Draw_LBlock>:
void LCD_Draw_LBlock(uint16_t Xpos, uint16_t Ypos){
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b084      	sub	sp, #16
 8000a8a:	af02      	add	r7, sp, #8
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	460a      	mov	r2, r1
 8000a90:	80fb      	strh	r3, [r7, #6]
 8000a92:	4613      	mov	r3, r2
 8000a94:	80bb      	strh	r3, [r7, #4]
	//orange
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_BLUE2);
 8000a96:	88b9      	ldrh	r1, [r7, #4]
 8000a98:	88f8      	ldrh	r0, [r7, #6]
 8000a9a:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	235a      	movs	r3, #90	@ 0x5a
 8000aa2:	221e      	movs	r2, #30
 8000aa4:	f7ff ff59 	bl	800095a <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+(BLOCK_LENGTH*2),BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_BLUE2);
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	331e      	adds	r3, #30
 8000aac:	b298      	uxth	r0, r3
 8000aae:	88bb      	ldrh	r3, [r7, #4]
 8000ab0:	333c      	adds	r3, #60	@ 0x3c
 8000ab2:	b299      	uxth	r1, r3
 8000ab4:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	231e      	movs	r3, #30
 8000abc:	221e      	movs	r2, #30
 8000abe:	f7ff ff4c 	bl	800095a <LCD_Draw_Rectangle_Fill>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <LCD_Draw_JBlock>:
void LCD_Draw_JBlock(uint16_t Xpos, uint16_t Ypos){
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b084      	sub	sp, #16
 8000ace:	af02      	add	r7, sp, #8
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	460a      	mov	r2, r1
 8000ad4:	80fb      	strh	r3, [r7, #6]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	80bb      	strh	r3, [r7, #4]
	//pink
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_MAGENTA);
 8000ada:	88b9      	ldrh	r1, [r7, #4]
 8000adc:	88f8      	ldrh	r0, [r7, #6]
 8000ade:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	235a      	movs	r3, #90	@ 0x5a
 8000ae6:	221e      	movs	r2, #30
 8000ae8:	f7ff ff37 	bl	800095a <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+(BLOCK_LENGTH*2),BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_MAGENTA);
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	3b1e      	subs	r3, #30
 8000af0:	b298      	uxth	r0, r3
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	333c      	adds	r3, #60	@ 0x3c
 8000af6:	b299      	uxth	r1, r3
 8000af8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	231e      	movs	r3, #30
 8000b00:	221e      	movs	r2, #30
 8000b02:	f7ff ff2a 	bl	800095a <LCD_Draw_Rectangle_Fill>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <LCD_Draw_TBlock>:
void LCD_Draw_TBlock(uint16_t Xpos, uint16_t Ypos){
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b084      	sub	sp, #16
 8000b12:	af02      	add	r7, sp, #8
 8000b14:	4603      	mov	r3, r0
 8000b16:	460a      	mov	r2, r1
 8000b18:	80fb      	strh	r3, [r7, #6]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	80bb      	strh	r3, [r7, #4]
	//purple
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*3,BLOCK_LENGTH,LCD_COLOR_GREY);
 8000b1e:	88b9      	ldrh	r1, [r7, #4]
 8000b20:	88f8      	ldrh	r0, [r7, #6]
 8000b22:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	231e      	movs	r3, #30
 8000b2a:	225a      	movs	r2, #90	@ 0x5a
 8000b2c:	f7ff ff15 	bl	800095a <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_GREY);
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	331e      	adds	r3, #30
 8000b34:	b298      	uxth	r0, r3
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	331e      	adds	r3, #30
 8000b3a:	b299      	uxth	r1, r3
 8000b3c:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	231e      	movs	r3, #30
 8000b44:	221e      	movs	r2, #30
 8000b46:	f7ff ff08 	bl	800095a <LCD_Draw_Rectangle_Fill>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <LCD_SetTextColor+0x1c>)
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	8013      	strh	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	20000000 	.word	0x20000000

08000b74 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <LCD_SetFont+0x1c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000110 	.word	0x20000110

08000b94 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	603a      	str	r2, [r7, #0]
 8000b9e:	80fb      	strh	r3, [r7, #6]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	e04c      	b.n	8000c4c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	e03f      	b.n	8000c38 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <LCD_Draw_Char+0xd0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	889b      	ldrh	r3, [r3, #4]
 8000bca:	4a27      	ldr	r2, [pc, #156]	@ (8000c68 <LCD_Draw_Char+0xd4>)
 8000bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd0:	08db      	lsrs	r3, r3, #3
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	2280      	movs	r2, #128	@ 0x80
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	fa42 f303 	asr.w	r3, r2, r3
 8000be0:	400b      	ands	r3, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d104      	bne.n	8000bf0 <LCD_Draw_Char+0x5c>
 8000be6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <LCD_Draw_Char+0xd0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	889b      	ldrh	r3, [r3, #4]
 8000bec:	2b0c      	cmp	r3, #12
 8000bee:	d920      	bls.n	8000c32 <LCD_Draw_Char+0x9e>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	fa42 f303 	asr.w	r3, r2, r3
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d104      	bne.n	8000c14 <LCD_Draw_Char+0x80>
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <LCD_Draw_Char+0xd0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	889b      	ldrh	r3, [r3, #4]
 8000c10:	2b0c      	cmp	r3, #12
 8000c12:	d80e      	bhi.n	8000c32 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b298      	uxth	r0, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4a10      	ldr	r2, [pc, #64]	@ (8000c6c <LCD_Draw_Char+0xd8>)
 8000c2a:	8812      	ldrh	r2, [r2, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f7ff fdd5 	bl	80007dc <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <LCD_Draw_Char+0xd0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	889b      	ldrh	r3, [r3, #4]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d3b8      	bcc.n	8000bb8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <LCD_Draw_Char+0xd0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	88db      	ldrh	r3, [r3, #6]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d3ab      	bcc.n	8000bb2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000110 	.word	0x20000110
 8000c68:	aaaaaaab 	.word	0xaaaaaaab
 8000c6c:	20000000 	.word	0x20000000

08000c70 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	80bb      	strh	r3, [r7, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000c82:	78fb      	ldrb	r3, [r7, #3]
 8000c84:	3b20      	subs	r3, #32
 8000c86:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <LCD_DisplayChar+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	4907      	ldr	r1, [pc, #28]	@ (8000cb0 <LCD_DisplayChar+0x40>)
 8000c92:	6809      	ldr	r1, [r1, #0]
 8000c94:	88c9      	ldrh	r1, [r1, #6]
 8000c96:	fb01 f303 	mul.w	r3, r1, r3
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	441a      	add	r2, r3
 8000c9e:	88b9      	ldrh	r1, [r7, #4]
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff76 	bl	8000b94 <LCD_Draw_Char>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000110 	.word	0x20000110

08000cb4 <screen1>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void screen1(void){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af02      	add	r7, sp, #8
	clearScreen();
 8000cba:	f7ff fd27 	bl	800070c <clearScreen>

	//Show all blocks
	LCD_Draw_OBlock(90,250);
 8000cbe:	21fa      	movs	r1, #250	@ 0xfa
 8000cc0:	205a      	movs	r0, #90	@ 0x5a
 8000cc2:	f7ff fe72 	bl	80009aa <LCD_Draw_OBlock>
	LCD_Draw_IBlock(105,110);
 8000cc6:	216e      	movs	r1, #110	@ 0x6e
 8000cc8:	2069      	movs	r0, #105	@ 0x69
 8000cca:	f7ff fe83 	bl	80009d4 <LCD_Draw_IBlock>
	LCD_Draw_SBlock(170,200);
 8000cce:	21c8      	movs	r1, #200	@ 0xc8
 8000cd0:	20aa      	movs	r0, #170	@ 0xaa
 8000cd2:	f7ff fe94 	bl	80009fe <LCD_Draw_SBlock>
	LCD_Draw_ZBlock(10,200);
 8000cd6:	21c8      	movs	r1, #200	@ 0xc8
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f7ff feb2 	bl	8000a42 <LCD_Draw_ZBlock>
	LCD_Draw_LBlock(20,10);
 8000cde:	210a      	movs	r1, #10
 8000ce0:	2014      	movs	r0, #20
 8000ce2:	f7ff fed0 	bl	8000a86 <LCD_Draw_LBlock>
	LCD_Draw_JBlock(190,10);
 8000ce6:	210a      	movs	r1, #10
 8000ce8:	20be      	movs	r0, #190	@ 0xbe
 8000cea:	f7ff feee 	bl	8000aca <LCD_Draw_JBlock>
	LCD_Draw_TBlock(75,35);
 8000cee:	2123      	movs	r1, #35	@ 0x23
 8000cf0:	204b      	movs	r0, #75	@ 0x4b
 8000cf2:	f7ff ff0c 	bl	8000b0e <LCD_Draw_TBlock>

	//"Tetris"
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ff2c 	bl	8000b54 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000cfc:	4822      	ldr	r0, [pc, #136]	@ (8000d88 <screen1+0xd4>)
 8000cfe:	f7ff ff39 	bl	8000b74 <LCD_SetFont>

	LCD_DisplayChar(80,40,'T');
 8000d02:	2254      	movs	r2, #84	@ 0x54
 8000d04:	2128      	movs	r1, #40	@ 0x28
 8000d06:	2050      	movs	r0, #80	@ 0x50
 8000d08:	f7ff ffb2 	bl	8000c70 <LCD_DisplayChar>
	LCD_DisplayChar(95,40,'E');
 8000d0c:	2245      	movs	r2, #69	@ 0x45
 8000d0e:	2128      	movs	r1, #40	@ 0x28
 8000d10:	205f      	movs	r0, #95	@ 0x5f
 8000d12:	f7ff ffad 	bl	8000c70 <LCD_DisplayChar>
	LCD_DisplayChar(110,40,'T');
 8000d16:	2254      	movs	r2, #84	@ 0x54
 8000d18:	2128      	movs	r1, #40	@ 0x28
 8000d1a:	206e      	movs	r0, #110	@ 0x6e
 8000d1c:	f7ff ffa8 	bl	8000c70 <LCD_DisplayChar>
	LCD_DisplayChar(125,40,'R');
 8000d20:	2252      	movs	r2, #82	@ 0x52
 8000d22:	2128      	movs	r1, #40	@ 0x28
 8000d24:	207d      	movs	r0, #125	@ 0x7d
 8000d26:	f7ff ffa3 	bl	8000c70 <LCD_DisplayChar>
	LCD_DisplayChar(135,40,'I');
 8000d2a:	2249      	movs	r2, #73	@ 0x49
 8000d2c:	2128      	movs	r1, #40	@ 0x28
 8000d2e:	2087      	movs	r0, #135	@ 0x87
 8000d30:	f7ff ff9e 	bl	8000c70 <LCD_DisplayChar>
	LCD_DisplayChar(145,40,'S');
 8000d34:	2253      	movs	r2, #83	@ 0x53
 8000d36:	2128      	movs	r1, #40	@ 0x28
 8000d38:	2091      	movs	r0, #145	@ 0x91
 8000d3a:	f7ff ff99 	bl	8000c70 <LCD_DisplayChar>

	//Start button
	LCD_DisplayChar(95,200,'S');
 8000d3e:	2253      	movs	r2, #83	@ 0x53
 8000d40:	21c8      	movs	r1, #200	@ 0xc8
 8000d42:	205f      	movs	r0, #95	@ 0x5f
 8000d44:	f7ff ff94 	bl	8000c70 <LCD_DisplayChar>
	LCD_DisplayChar(105,200,'t');
 8000d48:	2274      	movs	r2, #116	@ 0x74
 8000d4a:	21c8      	movs	r1, #200	@ 0xc8
 8000d4c:	2069      	movs	r0, #105	@ 0x69
 8000d4e:	f7ff ff8f 	bl	8000c70 <LCD_DisplayChar>
	LCD_DisplayChar(115,200,'a');
 8000d52:	2261      	movs	r2, #97	@ 0x61
 8000d54:	21c8      	movs	r1, #200	@ 0xc8
 8000d56:	2073      	movs	r0, #115	@ 0x73
 8000d58:	f7ff ff8a 	bl	8000c70 <LCD_DisplayChar>
	LCD_DisplayChar(125,200,'r');
 8000d5c:	2272      	movs	r2, #114	@ 0x72
 8000d5e:	21c8      	movs	r1, #200	@ 0xc8
 8000d60:	207d      	movs	r0, #125	@ 0x7d
 8000d62:	f7ff ff85 	bl	8000c70 <LCD_DisplayChar>
	LCD_DisplayChar(132,200,'t');
 8000d66:	2274      	movs	r2, #116	@ 0x74
 8000d68:	21c8      	movs	r1, #200	@ 0xc8
 8000d6a:	2084      	movs	r0, #132	@ 0x84
 8000d6c:	f7ff ff80 	bl	8000c70 <LCD_DisplayChar>
	LCD_Draw_Rectangle_Empty(85,195,67,30,LCD_COLOR_BLACK);
 8000d70:	2300      	movs	r3, #0
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	231e      	movs	r3, #30
 8000d76:	2243      	movs	r2, #67	@ 0x43
 8000d78:	21c3      	movs	r1, #195	@ 0xc3
 8000d7a:	2055      	movs	r0, #85	@ 0x55
 8000d7c:	f7ff fdbc 	bl	80008f8 <LCD_Draw_Rectangle_Empty>
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000004 	.word	0x20000004

08000d8c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <LCD_Error_Handler+0x8>

08000d98 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000d9c:	f000 f9fe 	bl	800119c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000da0:	20ca      	movs	r0, #202	@ 0xca
 8000da2:	f000 f943 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000da6:	20c3      	movs	r0, #195	@ 0xc3
 8000da8:	f000 f94d 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000dac:	2008      	movs	r0, #8
 8000dae:	f000 f94a 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000db2:	2050      	movs	r0, #80	@ 0x50
 8000db4:	f000 f947 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000db8:	20cf      	movs	r0, #207	@ 0xcf
 8000dba:	f000 f937 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f941 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000dc4:	20c1      	movs	r0, #193	@ 0xc1
 8000dc6:	f000 f93e 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000dca:	2030      	movs	r0, #48	@ 0x30
 8000dcc:	f000 f93b 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000dd0:	20ed      	movs	r0, #237	@ 0xed
 8000dd2:	f000 f92b 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000dd6:	2064      	movs	r0, #100	@ 0x64
 8000dd8:	f000 f935 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f932 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000de2:	2012      	movs	r0, #18
 8000de4:	f000 f92f 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000de8:	2081      	movs	r0, #129	@ 0x81
 8000dea:	f000 f92c 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000dee:	20e8      	movs	r0, #232	@ 0xe8
 8000df0:	f000 f91c 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000df4:	2085      	movs	r0, #133	@ 0x85
 8000df6:	f000 f926 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f923 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000e00:	2078      	movs	r0, #120	@ 0x78
 8000e02:	f000 f920 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000e06:	20cb      	movs	r0, #203	@ 0xcb
 8000e08:	f000 f910 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000e0c:	2039      	movs	r0, #57	@ 0x39
 8000e0e:	f000 f91a 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000e12:	202c      	movs	r0, #44	@ 0x2c
 8000e14:	f000 f917 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f000 f914 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000e1e:	2034      	movs	r0, #52	@ 0x34
 8000e20:	f000 f911 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000e24:	2002      	movs	r0, #2
 8000e26:	f000 f90e 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000e2a:	20f7      	movs	r0, #247	@ 0xf7
 8000e2c:	f000 f8fe 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000e30:	2020      	movs	r0, #32
 8000e32:	f000 f908 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000e36:	20ea      	movs	r0, #234	@ 0xea
 8000e38:	f000 f8f8 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f000 f902 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f8ff 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000e48:	20b1      	movs	r0, #177	@ 0xb1
 8000e4a:	f000 f8ef 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 f8f9 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000e54:	201b      	movs	r0, #27
 8000e56:	f000 f8f6 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000e5a:	20b6      	movs	r0, #182	@ 0xb6
 8000e5c:	f000 f8e6 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000e60:	200a      	movs	r0, #10
 8000e62:	f000 f8f0 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000e66:	20a2      	movs	r0, #162	@ 0xa2
 8000e68:	f000 f8ed 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000e6c:	20c0      	movs	r0, #192	@ 0xc0
 8000e6e:	f000 f8dd 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000e72:	2010      	movs	r0, #16
 8000e74:	f000 f8e7 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000e78:	20c1      	movs	r0, #193	@ 0xc1
 8000e7a:	f000 f8d7 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000e7e:	2010      	movs	r0, #16
 8000e80:	f000 f8e1 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000e84:	20c5      	movs	r0, #197	@ 0xc5
 8000e86:	f000 f8d1 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000e8a:	2045      	movs	r0, #69	@ 0x45
 8000e8c:	f000 f8db 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000e90:	2015      	movs	r0, #21
 8000e92:	f000 f8d8 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000e96:	20c7      	movs	r0, #199	@ 0xc7
 8000e98:	f000 f8c8 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000e9c:	2090      	movs	r0, #144	@ 0x90
 8000e9e:	f000 f8d2 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000ea2:	2036      	movs	r0, #54	@ 0x36
 8000ea4:	f000 f8c2 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000ea8:	20c8      	movs	r0, #200	@ 0xc8
 8000eaa:	f000 f8cc 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000eae:	20f2      	movs	r0, #242	@ 0xf2
 8000eb0:	f000 f8bc 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 f8c6 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000eba:	20b0      	movs	r0, #176	@ 0xb0
 8000ebc:	f000 f8b6 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000ec0:	20c2      	movs	r0, #194	@ 0xc2
 8000ec2:	f000 f8c0 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000ec6:	20b6      	movs	r0, #182	@ 0xb6
 8000ec8:	f000 f8b0 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f000 f8ba 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000ed2:	20a7      	movs	r0, #167	@ 0xa7
 8000ed4:	f000 f8b7 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000ed8:	2027      	movs	r0, #39	@ 0x27
 8000eda:	f000 f8b4 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000ede:	2004      	movs	r0, #4
 8000ee0:	f000 f8b1 	bl	8001046 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000ee4:	202a      	movs	r0, #42	@ 0x2a
 8000ee6:	f000 f8a1 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f8ab 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 f8a8 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f8a5 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000efc:	20ef      	movs	r0, #239	@ 0xef
 8000efe:	f000 f8a2 	bl	8001046 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000f02:	202b      	movs	r0, #43	@ 0x2b
 8000f04:	f000 f892 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 f89c 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f899 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f000 f896 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000f1a:	203f      	movs	r0, #63	@ 0x3f
 8000f1c:	f000 f893 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000f20:	20f6      	movs	r0, #246	@ 0xf6
 8000f22:	f000 f883 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f000 f88d 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f88a 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000f32:	2006      	movs	r0, #6
 8000f34:	f000 f887 	bl	8001046 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000f38:	202c      	movs	r0, #44	@ 0x2c
 8000f3a:	f000 f877 	bl	800102c <ili9341_Write_Reg>
  LCD_Delay(200);
 8000f3e:	20c8      	movs	r0, #200	@ 0xc8
 8000f40:	f000 f9e8 	bl	8001314 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000f44:	2026      	movs	r0, #38	@ 0x26
 8000f46:	f000 f871 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 f87b 	bl	8001046 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000f50:	20e0      	movs	r0, #224	@ 0xe0
 8000f52:	f000 f86b 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000f56:	200f      	movs	r0, #15
 8000f58:	f000 f875 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000f5c:	2029      	movs	r0, #41	@ 0x29
 8000f5e:	f000 f872 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000f62:	2024      	movs	r0, #36	@ 0x24
 8000f64:	f000 f86f 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000f68:	200c      	movs	r0, #12
 8000f6a:	f000 f86c 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000f6e:	200e      	movs	r0, #14
 8000f70:	f000 f869 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000f74:	2009      	movs	r0, #9
 8000f76:	f000 f866 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000f7a:	204e      	movs	r0, #78	@ 0x4e
 8000f7c:	f000 f863 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000f80:	2078      	movs	r0, #120	@ 0x78
 8000f82:	f000 f860 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000f86:	203c      	movs	r0, #60	@ 0x3c
 8000f88:	f000 f85d 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000f8c:	2009      	movs	r0, #9
 8000f8e:	f000 f85a 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000f92:	2013      	movs	r0, #19
 8000f94:	f000 f857 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000f98:	2005      	movs	r0, #5
 8000f9a:	f000 f854 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000f9e:	2017      	movs	r0, #23
 8000fa0:	f000 f851 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000fa4:	2011      	movs	r0, #17
 8000fa6:	f000 f84e 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f84b 	bl	8001046 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000fb0:	20e1      	movs	r0, #225	@ 0xe1
 8000fb2:	f000 f83b 	bl	800102c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f845 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000fbc:	2016      	movs	r0, #22
 8000fbe:	f000 f842 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000fc2:	201b      	movs	r0, #27
 8000fc4:	f000 f83f 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000fc8:	2004      	movs	r0, #4
 8000fca:	f000 f83c 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000fce:	2011      	movs	r0, #17
 8000fd0:	f000 f839 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000fd4:	2007      	movs	r0, #7
 8000fd6:	f000 f836 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000fda:	2031      	movs	r0, #49	@ 0x31
 8000fdc:	f000 f833 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000fe0:	2033      	movs	r0, #51	@ 0x33
 8000fe2:	f000 f830 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000fe6:	2042      	movs	r0, #66	@ 0x42
 8000fe8:	f000 f82d 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000fec:	2005      	movs	r0, #5
 8000fee:	f000 f82a 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000ff2:	200c      	movs	r0, #12
 8000ff4:	f000 f827 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f000 f824 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000ffe:	2028      	movs	r0, #40	@ 0x28
 8001000:	f000 f821 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001004:	202f      	movs	r0, #47	@ 0x2f
 8001006:	f000 f81e 	bl	8001046 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800100a:	200f      	movs	r0, #15
 800100c:	f000 f81b 	bl	8001046 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001010:	2011      	movs	r0, #17
 8001012:	f000 f80b 	bl	800102c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001016:	20c8      	movs	r0, #200	@ 0xc8
 8001018:	f000 f97c 	bl	8001314 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800101c:	2029      	movs	r0, #41	@ 0x29
 800101e:	f000 f805 	bl	800102c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001022:	202c      	movs	r0, #44	@ 0x2c
 8001024:	f000 f802 	bl	800102c <ili9341_Write_Reg>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f949 	bl	80012d0 <LCD_IO_WriteReg>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f91a 	bl	800128c <LCD_IO_WriteData>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001064:	4819      	ldr	r0, [pc, #100]	@ (80010cc <SPI_Init+0x6c>)
 8001066:	f002 faf4 	bl	8003652 <HAL_SPI_GetState>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d12b      	bne.n	80010c8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001070:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <SPI_Init+0x6c>)
 8001072:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <SPI_Init+0x70>)
 8001074:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <SPI_Init+0x6c>)
 8001078:	2218      	movs	r2, #24
 800107a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800107c:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <SPI_Init+0x6c>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <SPI_Init+0x6c>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001088:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <SPI_Init+0x6c>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <SPI_Init+0x6c>)
 8001090:	2200      	movs	r2, #0
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001094:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <SPI_Init+0x6c>)
 8001096:	2207      	movs	r2, #7
 8001098:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800109a:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <SPI_Init+0x6c>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <SPI_Init+0x6c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <SPI_Init+0x6c>)
 80010a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ac:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <SPI_Init+0x6c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <SPI_Init+0x6c>)
 80010b6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010ba:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <SPI_Init+0x6c>)
 80010be:	f000 f833 	bl	8001128 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80010c2:	4802      	ldr	r0, [pc, #8]	@ (80010cc <SPI_Init+0x6c>)
 80010c4:	f002 f8d0 	bl	8003268 <HAL_SPI_Init>
  }
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20025914 	.word	0x20025914
 80010d0:	40015000 	.word	0x40015000

080010d4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <SPI_Write+0x34>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	1db9      	adds	r1, r7, #6
 80010e8:	2201      	movs	r2, #1
 80010ea:	4808      	ldr	r0, [pc, #32]	@ (800110c <SPI_Write+0x38>)
 80010ec:	f002 f96d 	bl	80033ca <HAL_SPI_Transmit>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80010fa:	f000 f809 	bl	8001110 <SPI_Error>
  }
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000000c 	.word	0x2000000c
 800110c:	20025914 	.word	0x20025914

08001110 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001114:	4803      	ldr	r0, [pc, #12]	@ (8001124 <SPI_Error+0x14>)
 8001116:	f002 f930 	bl	800337a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800111a:	f7ff ffa1 	bl	8001060 <SPI_Init>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20025914 	.word	0x20025914

08001128 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	@ 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <SPI_MspInit+0x6c>)
 8001136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001138:	4a16      	ldr	r2, [pc, #88]	@ (8001194 <SPI_MspInit+0x6c>)
 800113a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800113e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <SPI_MspInit+0x6c>)
 8001142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001144:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <SPI_MspInit+0x6c>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	4a0f      	ldr	r2, [pc, #60]	@ (8001194 <SPI_MspInit+0x6c>)
 8001156:	f043 0320 	orr.w	r3, r3, #32
 800115a:	6313      	str	r3, [r2, #48]	@ 0x30
 800115c:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <SPI_MspInit+0x6c>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001168:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001172:	2302      	movs	r3, #2
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001176:	2301      	movs	r3, #1
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800117a:	2305      	movs	r3, #5
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <SPI_MspInit+0x70>)
 8001186:	f000 fcd3 	bl	8001b30 <HAL_GPIO_Init>
}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	@ 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40021400 	.word	0x40021400

0800119c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80011a2:	4b36      	ldr	r3, [pc, #216]	@ (800127c <LCD_IO_Init+0xe0>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d164      	bne.n	8001274 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80011aa:	4b34      	ldr	r3, [pc, #208]	@ (800127c <LCD_IO_Init+0xe0>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <LCD_IO_Init+0xe4>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b8:	4a31      	ldr	r2, [pc, #196]	@ (8001280 <LCD_IO_Init+0xe4>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001280 <LCD_IO_Init+0xe4>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80011cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	4827      	ldr	r0, [pc, #156]	@ (8001284 <LCD_IO_Init+0xe8>)
 80011e6:	f000 fca3 	bl	8001b30 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b24      	ldr	r3, [pc, #144]	@ (8001280 <LCD_IO_Init+0xe4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a23      	ldr	r2, [pc, #140]	@ (8001280 <LCD_IO_Init+0xe4>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <LCD_IO_Init+0xe4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4619      	mov	r1, r3
 800121e:	4819      	ldr	r0, [pc, #100]	@ (8001284 <LCD_IO_Init+0xe8>)
 8001220:	f000 fc86 	bl	8001b30 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <LCD_IO_Init+0xe4>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <LCD_IO_Init+0xe4>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6313      	str	r3, [r2, #48]	@ 0x30
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <LCD_IO_Init+0xe4>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001240:	2304      	movs	r3, #4
 8001242:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800124c:	2302      	movs	r3, #2
 800124e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4619      	mov	r1, r3
 8001256:	480c      	ldr	r0, [pc, #48]	@ (8001288 <LCD_IO_Init+0xec>)
 8001258:	f000 fc6a 	bl	8001b30 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 800125c:	2200      	movs	r2, #0
 800125e:	2104      	movs	r1, #4
 8001260:	4809      	ldr	r0, [pc, #36]	@ (8001288 <LCD_IO_Init+0xec>)
 8001262:	f000 ff1d 	bl	80020a0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001266:	2201      	movs	r2, #1
 8001268:	2104      	movs	r1, #4
 800126a:	4807      	ldr	r0, [pc, #28]	@ (8001288 <LCD_IO_Init+0xec>)
 800126c:	f000 ff18 	bl	80020a0 <HAL_GPIO_WritePin>

    SPI_Init();
 8001270:	f7ff fef6 	bl	8001060 <SPI_Init>
  }
}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2002596c 	.word	0x2002596c
 8001280:	40023800 	.word	0x40023800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40020800 	.word	0x40020800

0800128c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129c:	480a      	ldr	r0, [pc, #40]	@ (80012c8 <LCD_IO_WriteData+0x3c>)
 800129e:	f000 feff 	bl	80020a0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80012a2:	2200      	movs	r2, #0
 80012a4:	2104      	movs	r1, #4
 80012a6:	4809      	ldr	r0, [pc, #36]	@ (80012cc <LCD_IO_WriteData+0x40>)
 80012a8:	f000 fefa 	bl	80020a0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff10 	bl	80010d4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80012b4:	2201      	movs	r2, #1
 80012b6:	2104      	movs	r1, #4
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <LCD_IO_WriteData+0x40>)
 80012ba:	f000 fef1 	bl	80020a0 <HAL_GPIO_WritePin>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40020800 	.word	0x40020800

080012d0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e0:	480a      	ldr	r0, [pc, #40]	@ (800130c <LCD_IO_WriteReg+0x3c>)
 80012e2:	f000 fedd 	bl	80020a0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80012e6:	2200      	movs	r2, #0
 80012e8:	2104      	movs	r1, #4
 80012ea:	4809      	ldr	r0, [pc, #36]	@ (8001310 <LCD_IO_WriteReg+0x40>)
 80012ec:	f000 fed8 	bl	80020a0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff feed 	bl	80010d4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80012fa:	2201      	movs	r2, #1
 80012fc:	2104      	movs	r1, #4
 80012fe:	4804      	ldr	r0, [pc, #16]	@ (8001310 <LCD_IO_WriteReg+0x40>)
 8001300:	f000 fece 	bl	80020a0 <HAL_GPIO_WritePin>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40020800 	.word	0x40020800

08001314 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fafd 	bl	800191c <HAL_Delay>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132e:	f000 fa83 	bl	8001838 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 8001332:	f000 f80b 	bl	800134c <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8001336:	f7ff f8d1 	bl	80004dc <ApplicationInit>
  // Enabling touch screen errors here? I2C breaks

  //LCD_Visual_Demo();

  HAL_Delay(5000);
 800133a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800133e:	f000 faed 	bl	800191c <HAL_Delay>

  screen1();
 8001342:	f7ff fcb7 	bl	8000cb4 <screen1>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8001346:	bf00      	nop
 8001348:	e7fd      	b.n	8001346 <main+0x1c>
	...

0800134c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b092      	sub	sp, #72	@ 0x48
 8001350:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <SystemClockOverride+0x7c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	4a1b      	ldr	r2, [pc, #108]	@ (80013c8 <SystemClockOverride+0x7c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	@ 0x40
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <SystemClockOverride+0x7c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136e:	2301      	movs	r3, #1
 8001370:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001376:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001380:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001382:	2308      	movs	r3, #8
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001386:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800138c:	2302      	movs	r3, #2
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001390:	2307      	movs	r3, #7
 8001392:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4618      	mov	r0, r3
 8001398:	f001 f942 	bl	8002620 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800139c:	230f      	movs	r3, #15
 800139e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2302      	movs	r3, #2
 80013a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b2:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80013b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013b8:	2105      	movs	r1, #5
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 fba8 	bl	8002b10 <HAL_RCC_ClockConfig>
}
 80013c0:	bf00      	nop
 80013c2:	3748      	adds	r7, #72	@ 0x48
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <Error_Handler+0x8>

080013d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <HAL_MspInit+0x4c>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <HAL_MspInit+0x4c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	4a08      	ldr	r2, [pc, #32]	@ (8001424 <HAL_MspInit+0x4c>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	@ 0x40
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_MspInit+0x4c>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001416:	2007      	movs	r0, #7
 8001418:	f000 fb56 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800

08001428 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b09a      	sub	sp, #104	@ 0x68
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	2230      	movs	r2, #48	@ 0x30
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f9ed 	bl	8003828 <memset>
  if(hltdc->Instance==LTDC)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a81      	ldr	r2, [pc, #516]	@ (8001658 <HAL_LTDC_MspInit+0x230>)
 8001454:	4293      	cmp	r3, r2
 8001456:	f040 80fa 	bne.w	800164e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800145a:	2308      	movs	r3, #8
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800145e:	2332      	movs	r3, #50	@ 0x32
 8001460:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001462:	2302      	movs	r3, #2
 8001464:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001466:	2300      	movs	r3, #0
 8001468:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fd3a 	bl	8002ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800147a:	f7ff ffa7 	bl	80013cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
 8001482:	4b76      	ldr	r3, [pc, #472]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	4a75      	ldr	r2, [pc, #468]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 8001488:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800148c:	6453      	str	r3, [r2, #68]	@ 0x44
 800148e:	4b73      	ldr	r3, [pc, #460]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001496:	623b      	str	r3, [r7, #32]
 8001498:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	4b6f      	ldr	r3, [pc, #444]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a6e      	ldr	r2, [pc, #440]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b6c      	ldr	r3, [pc, #432]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	4b68      	ldr	r3, [pc, #416]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a67      	ldr	r2, [pc, #412]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b65      	ldr	r3, [pc, #404]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	4b61      	ldr	r3, [pc, #388]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a60      	ldr	r2, [pc, #384]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b5e      	ldr	r3, [pc, #376]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b5a      	ldr	r3, [pc, #360]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a59      	ldr	r2, [pc, #356]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 80014f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b57      	ldr	r3, [pc, #348]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b53      	ldr	r3, [pc, #332]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a52      	ldr	r2, [pc, #328]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b50      	ldr	r3, [pc, #320]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	4b4c      	ldr	r3, [pc, #304]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a4b      	ldr	r2, [pc, #300]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b49      	ldr	r3, [pc, #292]	@ (800165c <HAL_LTDC_MspInit+0x234>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001546:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001554:	230e      	movs	r3, #14
 8001556:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800155c:	4619      	mov	r1, r3
 800155e:	4840      	ldr	r0, [pc, #256]	@ (8001660 <HAL_LTDC_MspInit+0x238>)
 8001560:	f000 fae6 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001564:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001568:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001576:	230e      	movs	r3, #14
 8001578:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800157e:	4619      	mov	r1, r3
 8001580:	4838      	ldr	r0, [pc, #224]	@ (8001664 <HAL_LTDC_MspInit+0x23c>)
 8001582:	f000 fad5 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001586:	2303      	movs	r3, #3
 8001588:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001596:	2309      	movs	r3, #9
 8001598:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800159e:	4619      	mov	r1, r3
 80015a0:	4831      	ldr	r0, [pc, #196]	@ (8001668 <HAL_LTDC_MspInit+0x240>)
 80015a2:	f000 fac5 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80015a6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80015aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015b8:	230e      	movs	r3, #14
 80015ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015c0:	4619      	mov	r1, r3
 80015c2:	4829      	ldr	r0, [pc, #164]	@ (8001668 <HAL_LTDC_MspInit+0x240>)
 80015c4:	f000 fab4 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80015c8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80015cc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015da:	230e      	movs	r3, #14
 80015dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015e2:	4619      	mov	r1, r3
 80015e4:	4821      	ldr	r0, [pc, #132]	@ (800166c <HAL_LTDC_MspInit+0x244>)
 80015e6:	f000 faa3 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80015ea:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80015ee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015fc:	230e      	movs	r3, #14
 80015fe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001600:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001604:	4619      	mov	r1, r3
 8001606:	481a      	ldr	r0, [pc, #104]	@ (8001670 <HAL_LTDC_MspInit+0x248>)
 8001608:	f000 fa92 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800160c:	2348      	movs	r3, #72	@ 0x48
 800160e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800161c:	230e      	movs	r3, #14
 800161e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001620:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001624:	4619      	mov	r1, r3
 8001626:	4813      	ldr	r0, [pc, #76]	@ (8001674 <HAL_LTDC_MspInit+0x24c>)
 8001628:	f000 fa82 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800162c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001630:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800163e:	2309      	movs	r3, #9
 8001640:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001642:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001646:	4619      	mov	r1, r3
 8001648:	4808      	ldr	r0, [pc, #32]	@ (800166c <HAL_LTDC_MspInit+0x244>)
 800164a:	f000 fa71 	bl	8001b30 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800164e:	bf00      	nop
 8001650:	3768      	adds	r7, #104	@ 0x68
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40016800 	.word	0x40016800
 800165c:	40023800 	.word	0x40023800
 8001660:	40021400 	.word	0x40021400
 8001664:	40020000 	.word	0x40020000
 8001668:	40020400 	.word	0x40020400
 800166c:	40021800 	.word	0x40021800
 8001670:	40020800 	.word	0x40020800
 8001674:	40020c00 	.word	0x40020c00

08001678 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a19      	ldr	r2, [pc, #100]	@ (80016fc <HAL_SPI_MspInit+0x84>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d12c      	bne.n	80016f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_SPI_MspInit+0x88>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	4a17      	ldr	r2, [pc, #92]	@ (8001700 <HAL_SPI_MspInit+0x88>)
 80016a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_SPI_MspInit+0x88>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <HAL_SPI_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a10      	ldr	r2, [pc, #64]	@ (8001700 <HAL_SPI_MspInit+0x88>)
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <HAL_SPI_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80016d2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016e4:	2305      	movs	r3, #5
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <HAL_SPI_MspInit+0x8c>)
 80016f0:	f000 fa1e 	bl	8001b30 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	@ 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40015000 	.word	0x40015000
 8001700:	40023800 	.word	0x40023800
 8001704:	40021400 	.word	0x40021400

08001708 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <HAL_SPI_MspDeInit+0x30>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d10a      	bne.n	8001730 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800171a:	4b08      	ldr	r3, [pc, #32]	@ (800173c <HAL_SPI_MspDeInit+0x34>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	4a07      	ldr	r2, [pc, #28]	@ (800173c <HAL_SPI_MspDeInit+0x34>)
 8001720:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001724:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001726:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <HAL_SPI_MspDeInit+0x38>)
 800172c:	f000 fbac 	bl	8001e88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40015000 	.word	0x40015000
 800173c:	40023800 	.word	0x40023800
 8001740:	40021400 	.word	0x40021400

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <NMI_Handler+0x4>

0800174c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <MemManage_Handler+0x4>

0800175c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <UsageFault_Handler+0x4>

0800176c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179a:	f000 f89f 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_DAC_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800181c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e8:	f7ff ffea 	bl	80017c0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	@ (8001820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	@ (8001824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	@ (8001830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001812:	f002 f811 	bl	8003838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001816:	f7ff fd88 	bl	800132a <main>
  bx  lr    
 800181a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800181c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001828:	08004a88 	.word	0x08004a88
  ldr r2, =_sbss
 800182c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001830:	20025974 	.word	0x20025974

08001834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC_IRQHandler>
	...

08001838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800183c:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <HAL_Init+0x40>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <HAL_Init+0x40>)
 800184e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <HAL_Init+0x40>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 f931 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	2000      	movs	r0, #0
 8001868:	f000 f808 	bl	800187c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7ff fdb4 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_InitTick+0x54>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x58>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f93b 	bl	8001b16 <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018b8:	f000 f911 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <HAL_InitTick+0x5c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000010 	.word	0x20000010
 80018d4:	20000018 	.word	0x20000018
 80018d8:	20000014 	.word	0x20000014

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000018 	.word	0x20000018
 8001900:	20025970 	.word	0x20025970

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20025970 	.word	0x20025970

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffde 	bl	8001904 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000018 	.word	0x20000018

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	@ (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff47 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff5c 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff8e 	bl	8001a1c <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffb0 	bl	8001a84 <SysTick_Config>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	e177      	b.n	8001e3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	f040 8166 	bne.w	8001e36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d005      	beq.n	8001b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d130      	bne.n	8001be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 0201 	and.w	r2, r3, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d017      	beq.n	8001c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d123      	bne.n	8001c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	08da      	lsrs	r2, r3, #3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3208      	adds	r2, #8
 8001c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	69b9      	ldr	r1, [r7, #24]
 8001c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0203 	and.w	r2, r3, #3
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80c0 	beq.w	8001e36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b66      	ldr	r3, [pc, #408]	@ (8001e54 <HAL_GPIO_Init+0x324>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	4a65      	ldr	r2, [pc, #404]	@ (8001e54 <HAL_GPIO_Init+0x324>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc6:	4b63      	ldr	r3, [pc, #396]	@ (8001e54 <HAL_GPIO_Init+0x324>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd2:	4a61      	ldr	r2, [pc, #388]	@ (8001e58 <HAL_GPIO_Init+0x328>)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	220f      	movs	r2, #15
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a58      	ldr	r2, [pc, #352]	@ (8001e5c <HAL_GPIO_Init+0x32c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d037      	beq.n	8001d6e <HAL_GPIO_Init+0x23e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a57      	ldr	r2, [pc, #348]	@ (8001e60 <HAL_GPIO_Init+0x330>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d031      	beq.n	8001d6a <HAL_GPIO_Init+0x23a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a56      	ldr	r2, [pc, #344]	@ (8001e64 <HAL_GPIO_Init+0x334>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d02b      	beq.n	8001d66 <HAL_GPIO_Init+0x236>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a55      	ldr	r2, [pc, #340]	@ (8001e68 <HAL_GPIO_Init+0x338>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d025      	beq.n	8001d62 <HAL_GPIO_Init+0x232>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a54      	ldr	r2, [pc, #336]	@ (8001e6c <HAL_GPIO_Init+0x33c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01f      	beq.n	8001d5e <HAL_GPIO_Init+0x22e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a53      	ldr	r2, [pc, #332]	@ (8001e70 <HAL_GPIO_Init+0x340>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d019      	beq.n	8001d5a <HAL_GPIO_Init+0x22a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a52      	ldr	r2, [pc, #328]	@ (8001e74 <HAL_GPIO_Init+0x344>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d013      	beq.n	8001d56 <HAL_GPIO_Init+0x226>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a51      	ldr	r2, [pc, #324]	@ (8001e78 <HAL_GPIO_Init+0x348>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00d      	beq.n	8001d52 <HAL_GPIO_Init+0x222>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a50      	ldr	r2, [pc, #320]	@ (8001e7c <HAL_GPIO_Init+0x34c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d007      	beq.n	8001d4e <HAL_GPIO_Init+0x21e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4f      	ldr	r2, [pc, #316]	@ (8001e80 <HAL_GPIO_Init+0x350>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d101      	bne.n	8001d4a <HAL_GPIO_Init+0x21a>
 8001d46:	2309      	movs	r3, #9
 8001d48:	e012      	b.n	8001d70 <HAL_GPIO_Init+0x240>
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	e010      	b.n	8001d70 <HAL_GPIO_Init+0x240>
 8001d4e:	2308      	movs	r3, #8
 8001d50:	e00e      	b.n	8001d70 <HAL_GPIO_Init+0x240>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00c      	b.n	8001d70 <HAL_GPIO_Init+0x240>
 8001d56:	2306      	movs	r3, #6
 8001d58:	e00a      	b.n	8001d70 <HAL_GPIO_Init+0x240>
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	e008      	b.n	8001d70 <HAL_GPIO_Init+0x240>
 8001d5e:	2304      	movs	r3, #4
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x240>
 8001d62:	2303      	movs	r3, #3
 8001d64:	e004      	b.n	8001d70 <HAL_GPIO_Init+0x240>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_Init+0x240>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x240>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f002 0203 	and.w	r2, r2, #3
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	4093      	lsls	r3, r2
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d80:	4935      	ldr	r1, [pc, #212]	@ (8001e58 <HAL_GPIO_Init+0x328>)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e84 <HAL_GPIO_Init+0x354>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db2:	4a34      	ldr	r2, [pc, #208]	@ (8001e84 <HAL_GPIO_Init+0x354>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db8:	4b32      	ldr	r3, [pc, #200]	@ (8001e84 <HAL_GPIO_Init+0x354>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ddc:	4a29      	ldr	r2, [pc, #164]	@ (8001e84 <HAL_GPIO_Init+0x354>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de2:	4b28      	ldr	r3, [pc, #160]	@ (8001e84 <HAL_GPIO_Init+0x354>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e06:	4a1f      	ldr	r2, [pc, #124]	@ (8001e84 <HAL_GPIO_Init+0x354>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <HAL_GPIO_Init+0x354>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e30:	4a14      	ldr	r2, [pc, #80]	@ (8001e84 <HAL_GPIO_Init+0x354>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	2b0f      	cmp	r3, #15
 8001e40:	f67f ae84 	bls.w	8001b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3724      	adds	r7, #36	@ 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40021400 	.word	0x40021400
 8001e74:	40021800 	.word	0x40021800
 8001e78:	40021c00 	.word	0x40021c00
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40022400 	.word	0x40022400
 8001e84:	40013c00 	.word	0x40013c00

08001e88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e0d9      	b.n	8002058 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	f040 80c9 	bne.w	8002052 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001ec0:	4a6b      	ldr	r2, [pc, #428]	@ (8002070 <HAL_GPIO_DeInit+0x1e8>)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ecc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a63      	ldr	r2, [pc, #396]	@ (8002074 <HAL_GPIO_DeInit+0x1ec>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d037      	beq.n	8001f5a <HAL_GPIO_DeInit+0xd2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a62      	ldr	r2, [pc, #392]	@ (8002078 <HAL_GPIO_DeInit+0x1f0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d031      	beq.n	8001f56 <HAL_GPIO_DeInit+0xce>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a61      	ldr	r2, [pc, #388]	@ (800207c <HAL_GPIO_DeInit+0x1f4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d02b      	beq.n	8001f52 <HAL_GPIO_DeInit+0xca>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a60      	ldr	r2, [pc, #384]	@ (8002080 <HAL_GPIO_DeInit+0x1f8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d025      	beq.n	8001f4e <HAL_GPIO_DeInit+0xc6>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a5f      	ldr	r2, [pc, #380]	@ (8002084 <HAL_GPIO_DeInit+0x1fc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01f      	beq.n	8001f4a <HAL_GPIO_DeInit+0xc2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a5e      	ldr	r2, [pc, #376]	@ (8002088 <HAL_GPIO_DeInit+0x200>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d019      	beq.n	8001f46 <HAL_GPIO_DeInit+0xbe>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a5d      	ldr	r2, [pc, #372]	@ (800208c <HAL_GPIO_DeInit+0x204>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_DeInit+0xba>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a5c      	ldr	r2, [pc, #368]	@ (8002090 <HAL_GPIO_DeInit+0x208>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00d      	beq.n	8001f3e <HAL_GPIO_DeInit+0xb6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a5b      	ldr	r2, [pc, #364]	@ (8002094 <HAL_GPIO_DeInit+0x20c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d007      	beq.n	8001f3a <HAL_GPIO_DeInit+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a5a      	ldr	r2, [pc, #360]	@ (8002098 <HAL_GPIO_DeInit+0x210>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_GPIO_DeInit+0xae>
 8001f32:	2309      	movs	r3, #9
 8001f34:	e012      	b.n	8001f5c <HAL_GPIO_DeInit+0xd4>
 8001f36:	230a      	movs	r3, #10
 8001f38:	e010      	b.n	8001f5c <HAL_GPIO_DeInit+0xd4>
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	e00e      	b.n	8001f5c <HAL_GPIO_DeInit+0xd4>
 8001f3e:	2307      	movs	r3, #7
 8001f40:	e00c      	b.n	8001f5c <HAL_GPIO_DeInit+0xd4>
 8001f42:	2306      	movs	r3, #6
 8001f44:	e00a      	b.n	8001f5c <HAL_GPIO_DeInit+0xd4>
 8001f46:	2305      	movs	r3, #5
 8001f48:	e008      	b.n	8001f5c <HAL_GPIO_DeInit+0xd4>
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_DeInit+0xd4>
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e004      	b.n	8001f5c <HAL_GPIO_DeInit+0xd4>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_DeInit+0xd4>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_GPIO_DeInit+0xd4>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	f002 0203 	and.w	r2, r2, #3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4093      	lsls	r3, r2
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d132      	bne.n	8001fd2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800209c <HAL_GPIO_DeInit+0x214>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	4949      	ldr	r1, [pc, #292]	@ (800209c <HAL_GPIO_DeInit+0x214>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001f7a:	4b48      	ldr	r3, [pc, #288]	@ (800209c <HAL_GPIO_DeInit+0x214>)
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4946      	ldr	r1, [pc, #280]	@ (800209c <HAL_GPIO_DeInit+0x214>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001f88:	4b44      	ldr	r3, [pc, #272]	@ (800209c <HAL_GPIO_DeInit+0x214>)
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4942      	ldr	r1, [pc, #264]	@ (800209c <HAL_GPIO_DeInit+0x214>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001f96:	4b41      	ldr	r3, [pc, #260]	@ (800209c <HAL_GPIO_DeInit+0x214>)
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	493f      	ldr	r1, [pc, #252]	@ (800209c <HAL_GPIO_DeInit+0x214>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8002070 <HAL_GPIO_DeInit+0x1e8>)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	482a      	ldr	r0, [pc, #168]	@ (8002070 <HAL_GPIO_DeInit+0x1e8>)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	089b      	lsrs	r3, r3, #2
 8001fca:	400a      	ands	r2, r1
 8001fcc:	3302      	adds	r3, #2
 8001fce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2103      	movs	r1, #3
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	08d2      	lsrs	r2, r2, #3
 8002008:	4019      	ands	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3208      	adds	r2, #8
 800200e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2103      	movs	r1, #3
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	2101      	movs	r1, #1
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	401a      	ands	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2103      	movs	r1, #3
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b0f      	cmp	r3, #15
 800205c:	f67f af22 	bls.w	8001ea4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40013800 	.word	0x40013800
 8002074:	40020000 	.word	0x40020000
 8002078:	40020400 	.word	0x40020400
 800207c:	40020800 	.word	0x40020800
 8002080:	40020c00 	.word	0x40020c00
 8002084:	40021000 	.word	0x40021000
 8002088:	40021400 	.word	0x40021400
 800208c:	40021800 	.word	0x40021800
 8002090:	40021c00 	.word	0x40021c00
 8002094:	40022000 	.word	0x40022000
 8002098:	40022400 	.word	0x40022400
 800209c:	40013c00 	.word	0x40013c00

080020a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020bc:	e003      	b.n	80020c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	041a      	lsls	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	619a      	str	r2, [r3, #24]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0bf      	b.n	8002266 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff f994 	bl	8001428 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002116:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6999      	ldr	r1, [r3, #24]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800212c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b4a      	ldr	r3, [pc, #296]	@ (8002270 <HAL_LTDC_Init+0x19c>)
 8002148:	400b      	ands	r3, r1
 800214a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6899      	ldr	r1, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68d9      	ldr	r1, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b3e      	ldr	r3, [pc, #248]	@ (8002270 <HAL_LTDC_Init+0x19c>)
 8002176:	400b      	ands	r3, r1
 8002178:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	041b      	lsls	r3, r3, #16
 8002180:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68d9      	ldr	r1, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1a      	ldr	r2, [r3, #32]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6919      	ldr	r1, [r3, #16]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b33      	ldr	r3, [pc, #204]	@ (8002270 <HAL_LTDC_Init+0x19c>)
 80021a4:	400b      	ands	r3, r1
 80021a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6919      	ldr	r1, [r3, #16]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6959      	ldr	r1, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <HAL_LTDC_Init+0x19c>)
 80021d2:	400b      	ands	r3, r1
 80021d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021da:	041b      	lsls	r3, r3, #16
 80021dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6959      	ldr	r1, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002216:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0206 	orr.w	r2, r2, #6
 8002242:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	f000f800 	.word	0xf000f800

08002274 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002274:	b5b0      	push	{r4, r5, r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_LTDC_ConfigLayer+0x1a>
 800228a:	2302      	movs	r3, #2
 800228c:	e02c      	b.n	80022e8 <HAL_LTDC_ConfigLayer+0x74>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2134      	movs	r1, #52	@ 0x34
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f811 	bl	80022f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2201      	movs	r2, #1
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bdb0      	pop	{r4, r5, r7, pc}

080022f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	0c1b      	lsrs	r3, r3, #16
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	4413      	add	r3, r2
 800230e:	041b      	lsls	r3, r3, #16
 8002310:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	01db      	lsls	r3, r3, #7
 800231c:	4413      	add	r3, r2
 800231e:	3384      	adds	r3, #132	@ 0x84
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	4611      	mov	r1, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	01d2      	lsls	r2, r2, #7
 800232c:	440a      	add	r2, r1
 800232e:	3284      	adds	r2, #132	@ 0x84
 8002330:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002334:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002346:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002348:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	01db      	lsls	r3, r3, #7
 8002354:	440b      	add	r3, r1
 8002356:	3384      	adds	r3, #132	@ 0x84
 8002358:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800235e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800236e:	4413      	add	r3, r2
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	01db      	lsls	r3, r3, #7
 800237e:	4413      	add	r3, r2
 8002380:	3384      	adds	r3, #132	@ 0x84
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	4611      	mov	r1, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	01d2      	lsls	r2, r2, #7
 800238e:	440a      	add	r2, r1
 8002390:	3284      	adds	r2, #132	@ 0x84
 8002392:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002396:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a6:	4413      	add	r3, r2
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	01db      	lsls	r3, r3, #7
 80023b4:	440b      	add	r3, r1
 80023b6:	3384      	adds	r3, #132	@ 0x84
 80023b8:	4619      	mov	r1, r3
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	01db      	lsls	r3, r3, #7
 80023ca:	4413      	add	r3, r2
 80023cc:	3384      	adds	r3, #132	@ 0x84
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	4611      	mov	r1, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	01d2      	lsls	r2, r2, #7
 80023da:	440a      	add	r2, r1
 80023dc:	3284      	adds	r2, #132	@ 0x84
 80023de:	f023 0307 	bic.w	r3, r3, #7
 80023e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	01db      	lsls	r3, r3, #7
 80023ee:	4413      	add	r3, r2
 80023f0:	3384      	adds	r3, #132	@ 0x84
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	061b      	lsls	r3, r3, #24
 8002414:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	01db      	lsls	r3, r3, #7
 8002420:	4413      	add	r3, r2
 8002422:	3384      	adds	r3, #132	@ 0x84
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	01db      	lsls	r3, r3, #7
 8002430:	4413      	add	r3, r2
 8002432:	3384      	adds	r3, #132	@ 0x84
 8002434:	461a      	mov	r2, r3
 8002436:	2300      	movs	r3, #0
 8002438:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002440:	461a      	mov	r2, r3
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	431a      	orrs	r2, r3
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	431a      	orrs	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	01db      	lsls	r3, r3, #7
 8002454:	440b      	add	r3, r1
 8002456:	3384      	adds	r3, #132	@ 0x84
 8002458:	4619      	mov	r1, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	01db      	lsls	r3, r3, #7
 800246a:	4413      	add	r3, r2
 800246c:	3384      	adds	r3, #132	@ 0x84
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	4611      	mov	r1, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	01d2      	lsls	r2, r2, #7
 800247a:	440a      	add	r2, r1
 800247c:	3284      	adds	r2, #132	@ 0x84
 800247e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002482:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	01db      	lsls	r3, r3, #7
 800248e:	4413      	add	r3, r2
 8002490:	3384      	adds	r3, #132	@ 0x84
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	01db      	lsls	r3, r3, #7
 80024a4:	4413      	add	r3, r2
 80024a6:	3384      	adds	r3, #132	@ 0x84
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	4611      	mov	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	01d2      	lsls	r2, r2, #7
 80024b4:	440a      	add	r2, r1
 80024b6:	3284      	adds	r2, #132	@ 0x84
 80024b8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024bc:	f023 0307 	bic.w	r3, r3, #7
 80024c0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	69da      	ldr	r2, [r3, #28]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	68f9      	ldr	r1, [r7, #12]
 80024cc:	6809      	ldr	r1, [r1, #0]
 80024ce:	4608      	mov	r0, r1
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	01c9      	lsls	r1, r1, #7
 80024d4:	4401      	add	r1, r0
 80024d6:	3184      	adds	r1, #132	@ 0x84
 80024d8:	4313      	orrs	r3, r2
 80024da:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	01db      	lsls	r3, r3, #7
 80024e6:	4413      	add	r3, r2
 80024e8:	3384      	adds	r3, #132	@ 0x84
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	01db      	lsls	r3, r3, #7
 80024f6:	4413      	add	r3, r2
 80024f8:	3384      	adds	r3, #132	@ 0x84
 80024fa:	461a      	mov	r2, r3
 80024fc:	2300      	movs	r3, #0
 80024fe:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	01db      	lsls	r3, r3, #7
 800250a:	4413      	add	r3, r2
 800250c:	3384      	adds	r3, #132	@ 0x84
 800250e:	461a      	mov	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800251e:	2304      	movs	r3, #4
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e01b      	b.n	800255c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d102      	bne.n	8002532 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800252c:	2303      	movs	r3, #3
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	e014      	b.n	800255c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b04      	cmp	r3, #4
 8002538:	d00b      	beq.n	8002552 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800253e:	2b02      	cmp	r3, #2
 8002540:	d007      	beq.n	8002552 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002546:	2b03      	cmp	r3, #3
 8002548:	d003      	beq.n	8002552 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800254e:	2b07      	cmp	r3, #7
 8002550:	d102      	bne.n	8002558 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002552:	2302      	movs	r3, #2
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e001      	b.n	800255c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002558:	2301      	movs	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	01db      	lsls	r3, r3, #7
 8002566:	4413      	add	r3, r2
 8002568:	3384      	adds	r3, #132	@ 0x84
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	4611      	mov	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	01d2      	lsls	r2, r2, #7
 8002576:	440a      	add	r2, r1
 8002578:	3284      	adds	r2, #132	@ 0x84
 800257a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800257e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	1acb      	subs	r3, r1, r3
 8002596:	69f9      	ldr	r1, [r7, #28]
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800259e:	68f9      	ldr	r1, [r7, #12]
 80025a0:	6809      	ldr	r1, [r1, #0]
 80025a2:	4608      	mov	r0, r1
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	01c9      	lsls	r1, r1, #7
 80025a8:	4401      	add	r1, r0
 80025aa:	3184      	adds	r1, #132	@ 0x84
 80025ac:	4313      	orrs	r3, r2
 80025ae:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	01db      	lsls	r3, r3, #7
 80025ba:	4413      	add	r3, r2
 80025bc:	3384      	adds	r3, #132	@ 0x84
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	4611      	mov	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	01d2      	lsls	r2, r2, #7
 80025ca:	440a      	add	r2, r1
 80025cc:	3284      	adds	r2, #132	@ 0x84
 80025ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025d2:	f023 0307 	bic.w	r3, r3, #7
 80025d6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	01db      	lsls	r3, r3, #7
 80025e2:	4413      	add	r3, r2
 80025e4:	3384      	adds	r3, #132	@ 0x84
 80025e6:	461a      	mov	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	01db      	lsls	r3, r3, #7
 80025f8:	4413      	add	r3, r2
 80025fa:	3384      	adds	r3, #132	@ 0x84
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	4611      	mov	r1, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	01d2      	lsls	r2, r2, #7
 8002608:	440a      	add	r2, r1
 800260a:	3284      	adds	r2, #132	@ 0x84
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6013      	str	r3, [r2, #0]
}
 8002612:	bf00      	nop
 8002614:	3724      	adds	r7, #36	@ 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e267      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d075      	beq.n	800272a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800263e:	4b88      	ldr	r3, [pc, #544]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b04      	cmp	r3, #4
 8002648:	d00c      	beq.n	8002664 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264a:	4b85      	ldr	r3, [pc, #532]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002652:	2b08      	cmp	r3, #8
 8002654:	d112      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002656:	4b82      	ldr	r3, [pc, #520]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002662:	d10b      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	4b7e      	ldr	r3, [pc, #504]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d05b      	beq.n	8002728 <HAL_RCC_OscConfig+0x108>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d157      	bne.n	8002728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e242      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0x74>
 8002686:	4b76      	ldr	r3, [pc, #472]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a75      	ldr	r2, [pc, #468]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e01d      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x98>
 800269e:	4b70      	ldr	r3, [pc, #448]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 80026b8:	4b69      	ldr	r3, [pc, #420]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a68      	ldr	r2, [pc, #416]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a65      	ldr	r2, [pc, #404]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff f914 	bl	8001904 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff f910 	bl	8001904 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	@ 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e207      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0xc0>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff f900 	bl	8001904 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff f8fc 	bl	8001904 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	@ 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1f3      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	4b51      	ldr	r3, [pc, #324]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0xe8>
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d063      	beq.n	80027fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002736:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002742:	4b47      	ldr	r3, [pc, #284]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800274a:	2b08      	cmp	r3, #8
 800274c:	d11c      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b44      	ldr	r3, [pc, #272]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1c7      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002772:	4b3b      	ldr	r3, [pc, #236]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4937      	ldr	r1, [pc, #220]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	e03a      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002790:	4b34      	ldr	r3, [pc, #208]	@ (8002864 <HAL_RCC_OscConfig+0x244>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7ff f8b5 	bl	8001904 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279e:	f7ff f8b1 	bl	8001904 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1a8      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b28      	ldr	r3, [pc, #160]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4925      	ldr	r1, [pc, #148]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
 80027d0:	e015      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d2:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <HAL_RCC_OscConfig+0x244>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7ff f894 	bl	8001904 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e0:	f7ff f890 	bl	8001904 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e187      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d036      	beq.n	8002878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002812:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <HAL_RCC_OscConfig+0x248>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7ff f874 	bl	8001904 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002820:	f7ff f870 	bl	8001904 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e167      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002832:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x200>
 800283e:	e01b      	b.n	8002878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002840:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <HAL_RCC_OscConfig+0x248>)
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7ff f85d 	bl	8001904 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	e00e      	b.n	800286c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284e:	f7ff f859 	bl	8001904 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d907      	bls.n	800286c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e150      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
 8002860:	40023800 	.word	0x40023800
 8002864:	42470000 	.word	0x42470000
 8002868:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b88      	ldr	r3, [pc, #544]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ea      	bne.n	800284e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8097 	beq.w	80029b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b81      	ldr	r3, [pc, #516]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b6:	4b77      	ldr	r3, [pc, #476]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d118      	bne.n	80028f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c2:	4b74      	ldr	r3, [pc, #464]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a73      	ldr	r2, [pc, #460]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ce:	f7ff f819 	bl	8001904 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d6:	f7ff f815 	bl	8001904 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e10c      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x2ea>
 80028fc:	4b64      	ldr	r3, [pc, #400]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002900:	4a63      	ldr	r2, [pc, #396]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6713      	str	r3, [r2, #112]	@ 0x70
 8002908:	e01c      	b.n	8002944 <HAL_RCC_OscConfig+0x324>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x30c>
 8002912:	4b5f      	ldr	r3, [pc, #380]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002916:	4a5e      	ldr	r2, [pc, #376]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6713      	str	r3, [r2, #112]	@ 0x70
 800291e:	4b5c      	ldr	r3, [pc, #368]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002922:	4a5b      	ldr	r2, [pc, #364]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6713      	str	r3, [r2, #112]	@ 0x70
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0x324>
 800292c:	4b58      	ldr	r3, [pc, #352]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	4a57      	ldr	r2, [pc, #348]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	@ 0x70
 8002938:	4b55      	ldr	r3, [pc, #340]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293c:	4a54      	ldr	r2, [pc, #336]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800293e:	f023 0304 	bic.w	r3, r3, #4
 8002942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d015      	beq.n	8002978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe ffda 	bl	8001904 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	e00a      	b.n	800296a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe ffd6 	bl	8001904 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0cb      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296a:	4b49      	ldr	r3, [pc, #292]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ee      	beq.n	8002954 <HAL_RCC_OscConfig+0x334>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002978:	f7fe ffc4 	bl	8001904 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297e:	e00a      	b.n	8002996 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002980:	f7fe ffc0 	bl	8001904 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e0b5      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002996:	4b3e      	ldr	r3, [pc, #248]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ee      	bne.n	8002980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a8:	4b39      	ldr	r3, [pc, #228]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	4a38      	ldr	r2, [pc, #224]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a1 	beq.w	8002b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029be:	4b34      	ldr	r3, [pc, #208]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d05c      	beq.n	8002a84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d141      	bne.n	8002a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b31      	ldr	r3, [pc, #196]	@ (8002a98 <HAL_RCC_OscConfig+0x478>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe ff94 	bl	8001904 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe ff90 	bl	8001904 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e087      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b27      	ldr	r3, [pc, #156]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	3b01      	subs	r3, #1
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	491b      	ldr	r1, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a28:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <HAL_RCC_OscConfig+0x478>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe ff69 	bl	8001904 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a36:	f7fe ff65 	bl	8001904 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e05c      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x416>
 8002a54:	e054      	b.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <HAL_RCC_OscConfig+0x478>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe ff52 	bl	8001904 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe ff4e 	bl	8001904 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e045      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x444>
 8002a82:	e03d      	b.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e038      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000
 8002a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_RCC_OscConfig+0x4ec>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d028      	beq.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d121      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d11a      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d111      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800

08002b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0cc      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b68      	ldr	r3, [pc, #416]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d90c      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b65      	ldr	r3, [pc, #404]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b63      	ldr	r3, [pc, #396]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0b8      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b64:	4b59      	ldr	r3, [pc, #356]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a58      	ldr	r2, [pc, #352]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a52      	ldr	r2, [pc, #328]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b50      	ldr	r3, [pc, #320]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	494d      	ldr	r1, [pc, #308]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d044      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b47      	ldr	r3, [pc, #284]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d119      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e07f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d003      	beq.n	8002bce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e067      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4934      	ldr	r1, [pc, #208]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c00:	f7fe fe80 	bl	8001904 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7fe fe7c 	bl	8001904 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e04f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b25      	ldr	r3, [pc, #148]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d20c      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e032      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4916      	ldr	r1, [pc, #88]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c82:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	490e      	ldr	r1, [pc, #56]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c96:	f000 f821 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	490a      	ldr	r1, [pc, #40]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	5ccb      	ldrb	r3, [r1, r3]
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	4a09      	ldr	r2, [pc, #36]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cb2:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fde0 	bl	800187c <HAL_InitTick>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023c00 	.word	0x40023c00
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08004a68 	.word	0x08004a68
 8002cd4:	20000010 	.word	0x20000010
 8002cd8:	20000014 	.word	0x20000014

08002cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce0:	b094      	sub	sp, #80	@ 0x50
 8002ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf4:	4b79      	ldr	r3, [pc, #484]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d00d      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x40>
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	f200 80e1 	bhi.w	8002ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x34>
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d0e:	e0db      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b73      	ldr	r3, [pc, #460]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d14:	e0db      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d16:	4b73      	ldr	r3, [pc, #460]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d1a:	e0d8      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d26:	4b6d      	ldr	r3, [pc, #436]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d063      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d32:	4b6a      	ldr	r3, [pc, #424]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	2200      	movs	r2, #0
 8002d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d46:	2300      	movs	r3, #0
 8002d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d4e:	4622      	mov	r2, r4
 8002d50:	462b      	mov	r3, r5
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	0159      	lsls	r1, r3, #5
 8002d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d60:	0150      	lsls	r0, r2, #5
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4621      	mov	r1, r4
 8002d68:	1a51      	subs	r1, r2, r1
 8002d6a:	6139      	str	r1, [r7, #16]
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d80:	4659      	mov	r1, fp
 8002d82:	018b      	lsls	r3, r1, #6
 8002d84:	4651      	mov	r1, sl
 8002d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	018a      	lsls	r2, r1, #6
 8002d8e:	4651      	mov	r1, sl
 8002d90:	ebb2 0801 	subs.w	r8, r2, r1
 8002d94:	4659      	mov	r1, fp
 8002d96:	eb63 0901 	sbc.w	r9, r3, r1
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dae:	4690      	mov	r8, r2
 8002db0:	4699      	mov	r9, r3
 8002db2:	4623      	mov	r3, r4
 8002db4:	eb18 0303 	adds.w	r3, r8, r3
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	462b      	mov	r3, r5
 8002dbc:	eb49 0303 	adc.w	r3, r9, r3
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dce:	4629      	mov	r1, r5
 8002dd0:	024b      	lsls	r3, r1, #9
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd8:	4621      	mov	r1, r4
 8002dda:	024a      	lsls	r2, r1, #9
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de2:	2200      	movs	r2, #0
 8002de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dec:	f7fd f9fe 	bl	80001ec <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4613      	mov	r3, r2
 8002df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002df8:	e058      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfa:	4b38      	ldr	r3, [pc, #224]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	2200      	movs	r2, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	4611      	mov	r1, r2
 8002e06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e14:	4642      	mov	r2, r8
 8002e16:	464b      	mov	r3, r9
 8002e18:	f04f 0000 	mov.w	r0, #0
 8002e1c:	f04f 0100 	mov.w	r1, #0
 8002e20:	0159      	lsls	r1, r3, #5
 8002e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e26:	0150      	lsls	r0, r2, #5
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e32:	4649      	mov	r1, r9
 8002e34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e50:	eb63 050b 	sbc.w	r5, r3, fp
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	00eb      	lsls	r3, r5, #3
 8002e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e62:	00e2      	lsls	r2, r4, #3
 8002e64:	4614      	mov	r4, r2
 8002e66:	461d      	mov	r5, r3
 8002e68:	4643      	mov	r3, r8
 8002e6a:	18e3      	adds	r3, r4, r3
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	464b      	mov	r3, r9
 8002e70:	eb45 0303 	adc.w	r3, r5, r3
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e82:	4629      	mov	r1, r5
 8002e84:	028b      	lsls	r3, r1, #10
 8002e86:	4621      	mov	r1, r4
 8002e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	028a      	lsls	r2, r1, #10
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e96:	2200      	movs	r2, #0
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	61fa      	str	r2, [r7, #28]
 8002e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea0:	f7fd f9a4 	bl	80001ec <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ebc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ec6:	e002      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3750      	adds	r7, #80	@ 0x50
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	00f42400 	.word	0x00f42400
 8002ee4:	007a1200 	.word	0x007a1200

08002ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d075      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f1c:	4b91      	ldr	r3, [pc, #580]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f22:	f7fe fcef 	bl	8001904 <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f2a:	f7fe fceb 	bl	8001904 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e189      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f3c:	4b8a      	ldr	r3, [pc, #552]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	019a      	lsls	r2, r3, #6
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	071b      	lsls	r3, r3, #28
 8002f60:	4981      	ldr	r1, [pc, #516]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01f      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f74:	4b7c      	ldr	r3, [pc, #496]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f7a:	0f1b      	lsrs	r3, r3, #28
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	019a      	lsls	r2, r3, #6
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	061b      	lsls	r3, r3, #24
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	071b      	lsls	r3, r3, #28
 8002f94:	4974      	ldr	r1, [pc, #464]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f9c:	4b72      	ldr	r3, [pc, #456]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fa2:	f023 021f 	bic.w	r2, r3, #31
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	496e      	ldr	r1, [pc, #440]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	019a      	lsls	r2, r3, #6
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	061b      	lsls	r3, r3, #24
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	071b      	lsls	r3, r3, #28
 8002fd4:	4964      	ldr	r1, [pc, #400]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fdc:	4b61      	ldr	r3, [pc, #388]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fe2:	f7fe fc8f 	bl	8001904 <HAL_GetTick>
 8002fe6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fea:	f7fe fc8b 	bl	8001904 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e129      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ffc:	4b5a      	ldr	r3, [pc, #360]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800301c:	2b00      	cmp	r3, #0
 800301e:	d079      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003020:	4b52      	ldr	r3, [pc, #328]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003026:	f7fe fc6d 	bl	8001904 <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800302e:	f7fe fc69 	bl	8001904 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e107      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003040:	4b49      	ldr	r3, [pc, #292]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800304c:	d0ef      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d020      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800305a:	4b43      	ldr	r3, [pc, #268]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003060:	0f1b      	lsrs	r3, r3, #28
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	019a      	lsls	r2, r3, #6
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	431a      	orrs	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	071b      	lsls	r3, r3, #28
 800307a:	493b      	ldr	r1, [pc, #236]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003082:	4b39      	ldr	r3, [pc, #228]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003084:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003088:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	3b01      	subs	r3, #1
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	4934      	ldr	r1, [pc, #208]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01e      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ae:	0e1b      	lsrs	r3, r3, #24
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	019a      	lsls	r2, r3, #6
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	061b      	lsls	r3, r3, #24
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	071b      	lsls	r3, r3, #28
 80030c8:	4927      	ldr	r1, [pc, #156]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030d0:	4b25      	ldr	r3, [pc, #148]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	4922      	ldr	r1, [pc, #136]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030e6:	4b21      	ldr	r3, [pc, #132]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030ec:	f7fe fc0a 	bl	8001904 <HAL_GetTick>
 80030f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030f4:	f7fe fc06 	bl	8001904 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0a4      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003106:	4b18      	ldr	r3, [pc, #96]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800310e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003112:	d1ef      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 808b 	beq.w	8003238 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	4a0f      	ldr	r2, [pc, #60]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	@ 0x40
 8003132:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800313e:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a0b      	ldr	r2, [pc, #44]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003148:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800314a:	f7fe fbdb 	bl	8001904 <HAL_GetTick>
 800314e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003150:	e010      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003152:	f7fe fbd7 	bl	8001904 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d909      	bls.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e075      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003164:	42470068 	.word	0x42470068
 8003168:	40023800 	.word	0x40023800
 800316c:	42470070 	.word	0x42470070
 8003170:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003174:	4b38      	ldr	r3, [pc, #224]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0e8      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003180:	4b36      	ldr	r3, [pc, #216]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003184:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003188:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d02f      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	429a      	cmp	r2, r3
 800319c:	d028      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800319e:	4b2f      	ldr	r3, [pc, #188]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80031b4:	4a29      	ldr	r2, [pc, #164]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031ba:	4b28      	ldr	r3, [pc, #160]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d114      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fb9d 	bl	8001904 <HAL_GetTick>
 80031ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fe fb99 	bl	8001904 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e035      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e4:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ee      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031fc:	d10d      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80031fe:	4b17      	ldr	r3, [pc, #92]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800320e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003212:	4912      	ldr	r1, [pc, #72]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]
 8003218:	e005      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800321a:	4b10      	ldr	r3, [pc, #64]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	4a0f      	ldr	r2, [pc, #60]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003220:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003224:	6093      	str	r3, [r2, #8]
 8003226:	4b0d      	ldr	r3, [pc, #52]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003228:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003232:	490a      	ldr	r1, [pc, #40]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003234:	4313      	orrs	r3, r2
 8003236:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	d004      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800324a:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800324c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40007000 	.word	0x40007000
 800325c:	40023800 	.word	0x40023800
 8003260:	42470e40 	.word	0x42470e40
 8003264:	424711e0 	.word	0x424711e0

08003268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e07b      	b.n	8003372 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d108      	bne.n	8003294 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800328a:	d009      	beq.n	80032a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	61da      	str	r2, [r3, #28]
 8003292:	e005      	b.n	80032a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe f9dc 	bl	8001678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003324:	ea42 0103 	orr.w	r1, r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	f003 0104 	and.w	r1, r3, #4
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	f003 0210 	and.w	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003360:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e01a      	b.n	80033c2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033a2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7fe f9af 	bl	8001708 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b088      	sub	sp, #32
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033da:	f7fe fa93 	bl	8001904 <HAL_GetTick>
 80033de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d001      	beq.n	80033f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80033f0:	2302      	movs	r3, #2
 80033f2:	e12a      	b.n	800364a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_SPI_Transmit+0x36>
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e122      	b.n	800364a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_SPI_Transmit+0x48>
 800340e:	2302      	movs	r3, #2
 8003410:	e11b      	b.n	800364a <HAL_SPI_Transmit+0x280>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2203      	movs	r2, #3
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	88fa      	ldrh	r2, [r7, #6]
 8003432:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	88fa      	ldrh	r2, [r7, #6]
 8003438:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003460:	d10f      	bne.n	8003482 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003470:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003480:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348c:	2b40      	cmp	r3, #64	@ 0x40
 800348e:	d007      	beq.n	80034a0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034a8:	d152      	bne.n	8003550 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_Transmit+0xee>
 80034b2:	8b7b      	ldrh	r3, [r7, #26]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d145      	bne.n	8003544 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034bc:	881a      	ldrh	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	1c9a      	adds	r2, r3, #2
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034dc:	e032      	b.n	8003544 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d112      	bne.n	8003512 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	881a      	ldrh	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	1c9a      	adds	r2, r3, #2
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003510:	e018      	b.n	8003544 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003512:	f7fe f9f7 	bl	8001904 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d803      	bhi.n	800352a <HAL_SPI_Transmit+0x160>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003528:	d102      	bne.n	8003530 <HAL_SPI_Transmit+0x166>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e082      	b.n	800364a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1c7      	bne.n	80034de <HAL_SPI_Transmit+0x114>
 800354e:	e053      	b.n	80035f8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_SPI_Transmit+0x194>
 8003558:	8b7b      	ldrh	r3, [r7, #26]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d147      	bne.n	80035ee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	330c      	adds	r3, #12
 8003568:	7812      	ldrb	r2, [r2, #0]
 800356a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003584:	e033      	b.n	80035ee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b02      	cmp	r3, #2
 8003592:	d113      	bne.n	80035bc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	330c      	adds	r3, #12
 800359e:	7812      	ldrb	r2, [r2, #0]
 80035a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80035ba:	e018      	b.n	80035ee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035bc:	f7fe f9a2 	bl	8001904 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d803      	bhi.n	80035d4 <HAL_SPI_Transmit+0x20a>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035d2:	d102      	bne.n	80035da <HAL_SPI_Transmit+0x210>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e02d      	b.n	800364a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1c6      	bne.n	8003586 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	6839      	ldr	r1, [r7, #0]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f8bf 	bl	8003780 <SPI_EndRxTxTransaction>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003648:	2300      	movs	r3, #0
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003660:	b2db      	uxtb	r3, r3
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	4613      	mov	r3, r2
 800367e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003680:	f7fe f940 	bl	8001904 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	4413      	add	r3, r2
 800368e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003690:	f7fe f938 	bl	8001904 <HAL_GetTick>
 8003694:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003696:	4b39      	ldr	r3, [pc, #228]	@ (800377c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	015b      	lsls	r3, r3, #5
 800369c:	0d1b      	lsrs	r3, r3, #20
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	fb02 f303 	mul.w	r3, r2, r3
 80036a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036a6:	e054      	b.n	8003752 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ae:	d050      	beq.n	8003752 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036b0:	f7fe f928 	bl	8001904 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d902      	bls.n	80036c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d13d      	bne.n	8003742 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036de:	d111      	bne.n	8003704 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e8:	d004      	beq.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f2:	d107      	bne.n	8003704 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003702:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800370c:	d10f      	bne.n	800372e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800372c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e017      	b.n	8003772 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3b01      	subs	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	bf0c      	ite	eq
 8003762:	2301      	moveq	r3, #1
 8003764:	2300      	movne	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	429a      	cmp	r2, r3
 800376e:	d19b      	bne.n	80036a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000010 	.word	0x20000010

08003780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2201      	movs	r2, #1
 8003794:	2102      	movs	r1, #2
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7ff ff6a 	bl	8003670 <SPI_WaitFlagStateUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a6:	f043 0220 	orr.w	r2, r3, #32
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e032      	b.n	8003818 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <SPI_EndRxTxTransaction+0xa0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003824 <SPI_EndRxTxTransaction+0xa4>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	0d5b      	lsrs	r3, r3, #21
 80037be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037d0:	d112      	bne.n	80037f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2200      	movs	r2, #0
 80037da:	2180      	movs	r1, #128	@ 0x80
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f7ff ff47 	bl	8003670 <SPI_WaitFlagStateUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d016      	beq.n	8003816 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ec:	f043 0220 	orr.w	r2, r3, #32
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e00f      	b.n	8003818 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3b01      	subs	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380e:	2b80      	cmp	r3, #128	@ 0x80
 8003810:	d0f2      	beq.n	80037f8 <SPI_EndRxTxTransaction+0x78>
 8003812:	e000      	b.n	8003816 <SPI_EndRxTxTransaction+0x96>
        break;
 8003814:	bf00      	nop
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000010 	.word	0x20000010
 8003824:	165e9f81 	.word	0x165e9f81

08003828 <memset>:
 8003828:	4402      	add	r2, r0
 800382a:	4603      	mov	r3, r0
 800382c:	4293      	cmp	r3, r2
 800382e:	d100      	bne.n	8003832 <memset+0xa>
 8003830:	4770      	bx	lr
 8003832:	f803 1b01 	strb.w	r1, [r3], #1
 8003836:	e7f9      	b.n	800382c <memset+0x4>

08003838 <__libc_init_array>:
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	4d0d      	ldr	r5, [pc, #52]	@ (8003870 <__libc_init_array+0x38>)
 800383c:	4c0d      	ldr	r4, [pc, #52]	@ (8003874 <__libc_init_array+0x3c>)
 800383e:	1b64      	subs	r4, r4, r5
 8003840:	10a4      	asrs	r4, r4, #2
 8003842:	2600      	movs	r6, #0
 8003844:	42a6      	cmp	r6, r4
 8003846:	d109      	bne.n	800385c <__libc_init_array+0x24>
 8003848:	4d0b      	ldr	r5, [pc, #44]	@ (8003878 <__libc_init_array+0x40>)
 800384a:	4c0c      	ldr	r4, [pc, #48]	@ (800387c <__libc_init_array+0x44>)
 800384c:	f000 f818 	bl	8003880 <_init>
 8003850:	1b64      	subs	r4, r4, r5
 8003852:	10a4      	asrs	r4, r4, #2
 8003854:	2600      	movs	r6, #0
 8003856:	42a6      	cmp	r6, r4
 8003858:	d105      	bne.n	8003866 <__libc_init_array+0x2e>
 800385a:	bd70      	pop	{r4, r5, r6, pc}
 800385c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003860:	4798      	blx	r3
 8003862:	3601      	adds	r6, #1
 8003864:	e7ee      	b.n	8003844 <__libc_init_array+0xc>
 8003866:	f855 3b04 	ldr.w	r3, [r5], #4
 800386a:	4798      	blx	r3
 800386c:	3601      	adds	r6, #1
 800386e:	e7f2      	b.n	8003856 <__libc_init_array+0x1e>
 8003870:	08004a80 	.word	0x08004a80
 8003874:	08004a80 	.word	0x08004a80
 8003878:	08004a80 	.word	0x08004a80
 800387c:	08004a84 	.word	0x08004a84

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
