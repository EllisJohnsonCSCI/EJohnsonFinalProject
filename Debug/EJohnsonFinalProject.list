
EJohnsonFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001270  080066a8  080066a8  000076a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007918  08007918  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  08007918  08007918  00008918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007920  08007920  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007920  08007920  00008920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007924  08007924  00008924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007928  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009078  2**0
                  CONTENTS
 10 .bss          00025b20  20000078  20000078  00009078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025b98  20025b98  00009078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2a8  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c62  00000000  00000000  00018350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  0001afb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6a  00000000  00000000  0001bee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e0b  00000000  00000000  0001ca4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012bcc  00000000  00000000  00043855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1a97  00000000  00000000  00056421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00137eb8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000447c  00000000  00000000  00137efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0013c378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006690 	.word	0x08006690

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006690 	.word	0x08006690

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:


/* GENERAL */

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f001 ff32 	bl	80023ec <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 faa2 	bl	8000ad0 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fa55 	bl	8000a3c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fb64 	bl	8000c64 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fdf2 	bl	8001184 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <ApplicationInit+0x34>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 f807 	bl	80005b8 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS

	#if USE_INTERRUPT_FOR_BUTTON == 1
	buttonInitInterrupt();
 80005aa:	f000 f8fd 	bl	80007a8 <buttonInitInterrupt>
	#endif
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000098 	.word	0x20000098

080005b8 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005d0:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005d2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005d6:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e8:	4a0c      	ldr	r2, [pc, #48]	@ (800061c <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	4619      	mov	r1, r3
 8000600:	4807      	ldr	r0, [pc, #28]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000602:	f002 f9f7 	bl	80029f4 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000606:	2028      	movs	r0, #40	@ 0x28
 8000608:	f002 f9a5 	bl	8002956 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800060e:	4a06      	ldr	r2, [pc, #24]	@ (8000628 <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000610:	601a      	str	r2, [r3, #0]

}
 8000612:	bf00      	nop
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40020000 	.word	0x40020000
 8000624:	200000a0 	.word	0x200000a0
 8000628:	0600000f 	.word	0x0600000f

0800062c <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universal interrupt guard
 8000632:	2028      	movs	r0, #40	@ 0x28
 8000634:	f002 f99d 	bl	8002972 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000638:	2300      	movs	r3, #0
 800063a:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 800063c:	4b52      	ldr	r3, [pc, #328]	@ (8000788 <EXTI15_10_IRQHandler+0x15c>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000642:	e006      	b.n	8000652 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000644:	204c      	movs	r0, #76	@ 0x4c
 8000646:	f001 fc40 	bl	8001eca <STMPE811_Read>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b4e      	ldr	r3, [pc, #312]	@ (8000788 <EXTI15_10_IRQHandler+0x15c>)
 8000650:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000652:	4b4d      	ldr	r3, [pc, #308]	@ (8000788 <EXTI15_10_IRQHandler+0x15c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f4      	beq.n	8000644 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800065a:	200a      	movs	r0, #10
 800065c:	f000 fda8 	bl	80011b0 <ReadRegisterFromTouchModule>
 8000660:	4603      	mov	r3, r0
 8000662:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000664:	2100      	movs	r1, #0
 8000666:	200a      	movs	r0, #10
 8000668:	f000 fdb0 	bl	80011cc <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 800066c:	200b      	movs	r0, #11
 800066e:	f000 fd9f 	bl	80011b0 <ReadRegisterFromTouchModule>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b45      	ldr	r3, [pc, #276]	@ (800078c <EXTI15_10_IRQHandler+0x160>)
 8000678:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800067a:	4b44      	ldr	r3, [pc, #272]	@ (800078c <EXTI15_10_IRQHandler+0x160>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000684:	797b      	ldrb	r3, [r7, #5]
 8000686:	4619      	mov	r1, r3
 8000688:	200b      	movs	r0, #11
 800068a:	f000 fd9f 	bl	80011cc <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800068e:	2040      	movs	r0, #64	@ 0x40
 8000690:	f000 fd8e 	bl	80011b0 <ReadRegisterFromTouchModule>
 8000694:	4603      	mov	r3, r0
 8000696:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000698:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	da01      	bge.n	80006a4 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 80006a0:	2301      	movs	r3, #1
 80006a2:	71fb      	strb	r3, [r7, #7]
	}

	/* - ACTION TO EXECUTE DUE TO INTERRUPT - */

	switch(screenCount){
 80006a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000790 <EXTI15_10_IRQHandler+0x164>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <EXTI15_10_IRQHandler+0x86>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d011      	beq.n	80006d4 <EXTI15_10_IRQHandler+0xa8>
		break;

	// Consider third screen if we include menu/replay button

	default:
		break;
 80006b0:	e04a      	b.n	8000748 <EXTI15_10_IRQHandler+0x11c>
		if(TM_STMPE811_TouchInRectangle(&StaticTouchData, 70, 160, 100, 100)){
 80006b2:	4b38      	ldr	r3, [pc, #224]	@ (8000794 <EXTI15_10_IRQHandler+0x168>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	2b45      	cmp	r3, #69	@ 0x45
 80006b8:	d906      	bls.n	80006c8 <EXTI15_10_IRQHandler+0x9c>
 80006ba:	4b36      	ldr	r3, [pc, #216]	@ (8000794 <EXTI15_10_IRQHandler+0x168>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	2ba9      	cmp	r3, #169	@ 0xa9
 80006c0:	d802      	bhi.n	80006c8 <EXTI15_10_IRQHandler+0x9c>
 80006c2:	4b34      	ldr	r3, [pc, #208]	@ (8000794 <EXTI15_10_IRQHandler+0x168>)
 80006c4:	885b      	ldrh	r3, [r3, #2]
 80006c6:	2b9f      	cmp	r3, #159	@ 0x9f
		screenCount = 1;
 80006c8:	4b31      	ldr	r3, [pc, #196]	@ (8000790 <EXTI15_10_IRQHandler+0x164>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
		screen2();
 80006ce:	f000 fd35 	bl	800113c <screen2>
		break;
 80006d2:	e039      	b.n	8000748 <EXTI15_10_IRQHandler+0x11c>
		if(isTouchDetected) // Touch has been detected
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d030      	beq.n	800073c <EXTI15_10_IRQHandler+0x110>
			printf("\nPressed");
 80006da:	482f      	ldr	r0, [pc, #188]	@ (8000798 <EXTI15_10_IRQHandler+0x16c>)
 80006dc:	f005 f90c 	bl	80058f8 <iprintf>
			DetermineTouchPosition(&StaticTouchData);
 80006e0:	482c      	ldr	r0, [pc, #176]	@ (8000794 <EXTI15_10_IRQHandler+0x168>)
 80006e2:	f000 fd5a 	bl	800119a <DetermineTouchPosition>
			printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 80006e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000794 <EXTI15_10_IRQHandler+0x168>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4b29      	ldr	r3, [pc, #164]	@ (8000794 <EXTI15_10_IRQHandler+0x168>)
 80006ee:	885b      	ldrh	r3, [r3, #2]
 80006f0:	461a      	mov	r2, r3
 80006f2:	482a      	ldr	r0, [pc, #168]	@ (800079c <EXTI15_10_IRQHandler+0x170>)
 80006f4:	f005 f900 	bl	80058f8 <iprintf>
			if(TM_STMPE811_TouchInRectangle(&StaticTouchData, 0, 0, 125, 320)){
 80006f8:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <EXTI15_10_IRQHandler+0x168>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	2b7c      	cmp	r3, #124	@ 0x7c
 80006fe:	d80a      	bhi.n	8000716 <EXTI15_10_IRQHandler+0xea>
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <EXTI15_10_IRQHandler+0x168>)
 8000702:	885b      	ldrh	r3, [r3, #2]
 8000704:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000708:	d205      	bcs.n	8000716 <EXTI15_10_IRQHandler+0xea>
				LCD_Clear(0, LCD_COLOR_RED);
 800070a:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800070e:	2000      	movs	r0, #0
 8000710:	f000 faa8 	bl	8000c64 <LCD_Clear>
		break;
 8000714:	e017      	b.n	8000746 <EXTI15_10_IRQHandler+0x11a>
			else if(TM_STMPE811_TouchInRectangle(&StaticTouchData, 125, 0, 125, 320)){
 8000716:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <EXTI15_10_IRQHandler+0x168>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	2b7c      	cmp	r3, #124	@ 0x7c
 800071c:	d913      	bls.n	8000746 <EXTI15_10_IRQHandler+0x11a>
 800071e:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <EXTI15_10_IRQHandler+0x168>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	2bf9      	cmp	r3, #249	@ 0xf9
 8000724:	d80f      	bhi.n	8000746 <EXTI15_10_IRQHandler+0x11a>
 8000726:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <EXTI15_10_IRQHandler+0x168>)
 8000728:	885b      	ldrh	r3, [r3, #2]
 800072a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800072e:	d20a      	bcs.n	8000746 <EXTI15_10_IRQHandler+0x11a>
				LCD_Clear(0, LCD_COLOR_GREEN);
 8000730:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000734:	2000      	movs	r0, #0
 8000736:	f000 fa95 	bl	8000c64 <LCD_Clear>
		break;
 800073a:	e004      	b.n	8000746 <EXTI15_10_IRQHandler+0x11a>
			printf("\nNot pressed \n");
 800073c:	4818      	ldr	r0, [pc, #96]	@ (80007a0 <EXTI15_10_IRQHandler+0x174>)
 800073e:	f005 f943 	bl	80059c8 <puts>
			screen2();
 8000742:	f000 fcfb 	bl	800113c <screen2>
		break;
 8000746:	bf00      	nop
	}


	/* - I think everything below here is just taking care of interrupt bits - */

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000748:	2101      	movs	r1, #1
 800074a:	204b      	movs	r0, #75	@ 0x4b
 800074c:	f001 fbce 	bl	8001eec <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000750:	2100      	movs	r1, #0
 8000752:	204b      	movs	r0, #75	@ 0x4b
 8000754:	f001 fbca 	bl	8001eec <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	4619      	mov	r1, r3
 800075c:	200a      	movs	r0, #10
 800075e:	f000 fd35 	bl	80011cc <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000762:	2103      	movs	r1, #3
 8000764:	480f      	ldr	r0, [pc, #60]	@ (80007a4 <EXTI15_10_IRQHandler+0x178>)
 8000766:	f002 f92d 	bl	80029c4 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800076a:	2028      	movs	r0, #40	@ 0x28
 800076c:	f002 f91b 	bl	80029a6 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000770:	2028      	movs	r0, #40	@ 0x28
 8000772:	f002 f8f0 	bl	8002956 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	4619      	mov	r1, r3
 800077a:	200b      	movs	r0, #11
 800077c:	f000 fd26 	bl	80011cc <WriteDataToTouchModule>

}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000ac 	.word	0x200000ac
 800078c:	200000a8 	.word	0x200000a8
 8000790:	20000094 	.word	0x20000094
 8000794:	20000098 	.word	0x20000098
 8000798:	080066cc 	.word	0x080066cc
 800079c:	080066d8 	.word	0x080066d8
 80007a0:	080066ec 	.word	0x080066ec
 80007a4:	200000a0 	.word	0x200000a0

080007a8 <buttonInitInterrupt>:
	}
}
#endif

#if USE_INTERRUPT_FOR_BUTTON == 1
void buttonInitInterrupt(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	Button_InterruptInit();
 80007ac:	f000 f832 	bl	8000814 <Button_InterruptInit>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <EXTI0_IRQHandler>:
#endif

void EXTI0_IRQHandler(){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	IRQ_DisableInterrupt(EXTI0_IRQ_NUMBER);
 80007b8:	2006      	movs	r0, #6
 80007ba:	f000 f859 	bl	8000870 <IRQ_DisableInterrupt>
	addSchedulerEvent(ROTATE_BLOCK_EVENT);
 80007be:	2002      	movs	r0, #2
 80007c0:	f000 fd16 	bl	80011f0 <addSchedulerEvent>
	LCD_Clear(0, LCD_COLOR_RED);
 80007c4:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fa4b 	bl	8000c64 <LCD_Clear>
	ClearPendingEXTIInterrupt(BUTTON_PIN);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 f85c 	bl	800088c <ClearPendingEXTIInterrupt>
	IRQ_EnableInterrupt(EXTI0_IRQ_NUMBER);
 80007d4:	2006      	movs	r0, #6
 80007d6:	f000 f83d 	bl	8000854 <IRQ_EnableInterrupt>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <Button_ClockEnable>:

	Button_ClockEnable();
	HAL_GPIO_Init(BUTTON_PORT, &ButtonConfig);
}

void Button_ClockEnable(){
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <Button_ClockEnable+0x30>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <Button_ClockEnable+0x30>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <Button_ClockEnable+0x30>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <Button_InterruptInit>:
	else{
		return false;
	}
}

void Button_InterruptInit(){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef ButtonConfig = {};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

	ButtonConfig.Pin = BUTTON_PIN;
 8000828:	2301      	movs	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
	ButtonConfig.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
	ButtonConfig.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]

	Button_ClockEnable();
 8000834:	f7ff ffd4 	bl	80007e0 <Button_ClockEnable>
	HAL_GPIO_Init(BUTTON_PORT, &ButtonConfig);
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <Button_InterruptInit+0x3c>)
 800083e:	f002 f8d9 	bl	80029f4 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQ_NUMBER);
 8000842:	2006      	movs	r0, #6
 8000844:	f002 f887 	bl	8002956 <HAL_NVIC_EnableIRQ>
}
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40020000 	.word	0x40020000

08000854 <IRQ_EnableInterrupt>:
#include "../Inc/InterruptControl.h"


// FUNCTIONS

void IRQ_EnableInterrupt(uint8_t IRQ){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_EnableIRQ(IRQ);
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	4618      	mov	r0, r3
 8000864:	f002 f877 	bl	8002956 <HAL_NVIC_EnableIRQ>
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <IRQ_DisableInterrupt>:
void IRQ_DisableInterrupt(uint8_t IRQ){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(IRQ);
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	4618      	mov	r0, r3
 8000880:	f002 f877 	bl	8002972 <HAL_NVIC_DisableIRQ>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <ClearPendingEXTIInterrupt>:
}
void IRQ_SetPendingInterrupt(uint8_t IRQ){
	HAL_NVIC_SetPendingIRQ(IRQ);
}

void ClearPendingEXTIInterrupt(uint8_t pinNum){
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	EXTI_HandleTypeDef handleType;
	// get handleType from somewhere?
	HAL_EXTI_ClearPending(&handleType, pinNum);
 8000896:	79fa      	ldrb	r2, [r7, #7]
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4611      	mov	r1, r2
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 f890 	bl	80029c4 <HAL_EXTI_ClearPending>
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	@ 0x30
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	4a59      	ldr	r2, [pc, #356]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c2:	4b57      	ldr	r3, [pc, #348]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	4b53      	ldr	r3, [pc, #332]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a52      	ldr	r2, [pc, #328]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b50      	ldr	r3, [pc, #320]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a4b      	ldr	r2, [pc, #300]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b49      	ldr	r3, [pc, #292]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b45      	ldr	r3, [pc, #276]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a44      	ldr	r2, [pc, #272]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b42      	ldr	r3, [pc, #264]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b3e      	ldr	r3, [pc, #248]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b3b      	ldr	r3, [pc, #236]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b37      	ldr	r3, [pc, #220]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a36      	ldr	r2, [pc, #216]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000948:	f043 0320 	orr.w	r3, r3, #32
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b34      	ldr	r3, [pc, #208]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0320 	and.w	r3, r3, #32
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b30      	ldr	r3, [pc, #192]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a2f      	ldr	r2, [pc, #188]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000976:	f641 0358 	movw	r3, #6232	@ 0x1858
 800097a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000984:	2302      	movs	r3, #2
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000988:	230e      	movs	r3, #14
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4824      	ldr	r0, [pc, #144]	@ (8000a24 <LCD_GPIO_Init+0x178>)
 8000994:	f002 f82e 	bl	80029f4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000998:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800099c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4820      	ldr	r0, [pc, #128]	@ (8000a28 <LCD_GPIO_Init+0x17c>)
 80009a6:	f002 f825 	bl	80029f4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80009aa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	481d      	ldr	r0, [pc, #116]	@ (8000a2c <LCD_GPIO_Init+0x180>)
 80009b8:	f002 f81c 	bl	80029f4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80009bc:	2348      	movs	r3, #72	@ 0x48
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	481a      	ldr	r0, [pc, #104]	@ (8000a30 <LCD_GPIO_Init+0x184>)
 80009c8:	f002 f814 	bl	80029f4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80009cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4816      	ldr	r0, [pc, #88]	@ (8000a34 <LCD_GPIO_Init+0x188>)
 80009da:	f002 f80b 	bl	80029f4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80009de:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80009e2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <LCD_GPIO_Init+0x18c>)
 80009ec:	f002 f802 	bl	80029f4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80009f0:	2303      	movs	r3, #3
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80009f4:	2309      	movs	r3, #9
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	480a      	ldr	r0, [pc, #40]	@ (8000a28 <LCD_GPIO_Init+0x17c>)
 8000a00:	f001 fff8 	bl	80029f4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <LCD_GPIO_Init+0x18c>)
 8000a12:	f001 ffef 	bl	80029f4 <HAL_GPIO_Init>
}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	@ 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40021400 	.word	0x40021400
 8000a38:	40021800 	.word	0x40021800

08000a3c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b090      	sub	sp, #64	@ 0x40
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000a4a:	23f0      	movs	r3, #240	@ 0xf0
 8000a4c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000a52:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a56:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000a5c:	23ff      	movs	r3, #255	@ 0xff
 8000a5e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <LTCD_Layer_Init+0x78>)
 8000a76:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000a78:	23f0      	movs	r3, #240	@ 0xf0
 8000a7a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000a7c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a80:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <LTCD_Layer_Init+0x7c>)
 8000a9e:	f003 fb6f 	bl	8004180 <HAL_LTDC_ConfigLayer>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000aa8:	f000 fb66 	bl	8001178 <LCD_Error_Handler>
	}
}
 8000aac:	bf00      	nop
 8000aae:	3740      	adds	r7, #64	@ 0x40
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000018c 	.word	0x2000018c
 8000ab8:	200000b0 	.word	0x200000b0

08000abc <clearScreen>:

void clearScreen(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  LCD_Clear(0,LCD_COLOR_WHITE);
 8000ac0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 f8cd 	bl	8000c64 <LCD_Clear>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <LTCD__Init>:

void LTCD__Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b80 <LTCD__Init+0xb0>)
 8000ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8000b84 <LTCD__Init+0xb4>)
 8000ad8:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ada:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <LTCD__Init+0xb0>)
 8000adc:	2209      	movs	r2, #9
 8000ade:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	@ (8000b80 <LTCD__Init+0xb0>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <LTCD__Init+0xb0>)
 8000ae8:	221d      	movs	r2, #29
 8000aea:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000aec:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <LTCD__Init+0xb0>)
 8000aee:	2203      	movs	r2, #3
 8000af0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000af2:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <LTCD__Init+0xb0>)
 8000af4:	f240 120d 	movw	r2, #269	@ 0x10d
 8000af8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <LTCD__Init+0xb0>)
 8000afc:	f240 1243 	movw	r2, #323	@ 0x143
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b04:	f240 1217 	movw	r2, #279	@ 0x117
 8000b08:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b0c:	f240 1247 	movw	r2, #327	@ 0x147
 8000b10:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <LTCD__Init+0xb8>)
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <LTCD__Init+0xb8>)
 8000b32:	22c0      	movs	r2, #192	@ 0xc0
 8000b34:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <LTCD__Init+0xb8>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <LTCD__Init+0xb8>)
 8000b3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b42:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b44:	4810      	ldr	r0, [pc, #64]	@ (8000b88 <LTCD__Init+0xb8>)
 8000b46:	f004 f975 	bl	8004e34 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b62:	f7ff fea3 	bl	80008ac <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b66:	4806      	ldr	r0, [pc, #24]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b68:	f003 fa3a 	bl	8003fe0 <HAL_LTDC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b72:	f000 fb01 	bl	8001178 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b76:	f000 fb4d 	bl	8001214 <ili9341_Init>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000b0 	.word	0x200000b0
 8000b84:	40016800 	.word	0x40016800
 8000b88:	20000158 	.word	0x20000158

08000b8c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
 8000b96:	460b      	mov	r3, r1
 8000b98:	80bb      	strh	r3, [r7, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000b9e:	88ba      	ldrh	r2, [r7, #4]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	1a9b      	subs	r3, r3, r2
 8000ba6:	011b      	lsls	r3, r3, #4
 8000ba8:	461a      	mov	r2, r3
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	4413      	add	r3, r2
 8000bae:	4905      	ldr	r1, [pc, #20]	@ (8000bc4 <LCD_Draw_Pixel+0x38>)
 8000bb0:	887a      	ldrh	r2, [r7, #2]
 8000bb2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	2000018c 	.word	0x2000018c

08000bc8 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4623      	mov	r3, r4
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80bb      	strh	r3, [r7, #4]
 8000bde:	460b      	mov	r3, r1
 8000be0:	807b      	strh	r3, [r7, #2]
 8000be2:	4613      	mov	r3, r2
 8000be4:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	81fb      	strh	r3, [r7, #14]
 8000bea:	e00b      	b.n	8000c04 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000bec:	89fa      	ldrh	r2, [r7, #14]
 8000bee:	88bb      	ldrh	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b299      	uxth	r1, r3
 8000bf4:	883a      	ldrh	r2, [r7, #0]
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffc7 	bl	8000b8c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000bfe:	89fb      	ldrh	r3, [r7, #14]
 8000c00:	3301      	adds	r3, #1
 8000c02:	81fb      	strh	r3, [r7, #14]
 8000c04:	89fa      	ldrh	r2, [r7, #14]
 8000c06:	887b      	ldrh	r3, [r7, #2]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d3ef      	bcc.n	8000bec <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd90      	pop	{r4, r7, pc}

08000c16 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000c16:	b590      	push	{r4, r7, lr}
 8000c18:	b085      	sub	sp, #20
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	4608      	mov	r0, r1
 8000c20:	4611      	mov	r1, r2
 8000c22:	461a      	mov	r2, r3
 8000c24:	4623      	mov	r3, r4
 8000c26:	80fb      	strh	r3, [r7, #6]
 8000c28:	4603      	mov	r3, r0
 8000c2a:	80bb      	strh	r3, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
 8000c30:	4613      	mov	r3, r2
 8000c32:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	81fb      	strh	r3, [r7, #14]
 8000c38:	e00b      	b.n	8000c52 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000c3a:	89fa      	ldrh	r2, [r7, #14]
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	883a      	ldrh	r2, [r7, #0]
 8000c44:	88b9      	ldrh	r1, [r7, #4]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ffa0 	bl	8000b8c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000c4c:	89fb      	ldrh	r3, [r7, #14]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	81fb      	strh	r3, [r7, #14]
 8000c52:	89fa      	ldrh	r2, [r7, #14]
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3ef      	bcc.n	8000c3a <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}

08000c64 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	460a      	mov	r2, r1
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	4613      	mov	r3, r2
 8000c72:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10e      	bne.n	8000c98 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	e007      	b.n	8000c90 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000c80:	4908      	ldr	r1, [pc, #32]	@ (8000ca4 <LCD_Clear+0x40>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	88ba      	ldrh	r2, [r7, #4]
 8000c86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000c96:	d3f3      	bcc.n	8000c80 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	2000018c 	.word	0x2000018c

08000ca8 <LCD_Draw_Rectangle_Empty>:

void LCD_Draw_Rectangle_Empty(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	80fb      	strh	r3, [r7, #6]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	80bb      	strh	r3, [r7, #4]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	807b      	strh	r3, [r7, #2]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	803b      	strh	r3, [r7, #0]
	//draw vertical x,y,height
	//draw vertical x+length,y,height
	//draw horizontal x,y,length
	//draw horizontal x,y+height,length
	LCD_Draw_Vertical_Line(Xpos,Ypos,height,color);
 8000cc6:	8b3b      	ldrh	r3, [r7, #24]
 8000cc8:	883a      	ldrh	r2, [r7, #0]
 8000cca:	88b9      	ldrh	r1, [r7, #4]
 8000ccc:	88f8      	ldrh	r0, [r7, #6]
 8000cce:	f7ff ff7b 	bl	8000bc8 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(Xpos+len,Ypos,height,color);
 8000cd2:	88fa      	ldrh	r2, [r7, #6]
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b298      	uxth	r0, r3
 8000cda:	8b3b      	ldrh	r3, [r7, #24]
 8000cdc:	883a      	ldrh	r2, [r7, #0]
 8000cde:	88b9      	ldrh	r1, [r7, #4]
 8000ce0:	f7ff ff72 	bl	8000bc8 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos,len,color);
 8000ce4:	8b3b      	ldrh	r3, [r7, #24]
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	88b9      	ldrh	r1, [r7, #4]
 8000cea:	88f8      	ldrh	r0, [r7, #6]
 8000cec:	f7ff ff93 	bl	8000c16 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos+height,len,color);
 8000cf0:	88ba      	ldrh	r2, [r7, #4]
 8000cf2:	883b      	ldrh	r3, [r7, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b299      	uxth	r1, r3
 8000cf8:	8b3b      	ldrh	r3, [r7, #24]
 8000cfa:	887a      	ldrh	r2, [r7, #2]
 8000cfc:	88f8      	ldrh	r0, [r7, #6]
 8000cfe:	f7ff ff8a 	bl	8000c16 <LCD_Draw_Horizontal_Line>
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd90      	pop	{r4, r7, pc}

08000d0a <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 8000d0a:	b590      	push	{r4, r7, lr}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4604      	mov	r4, r0
 8000d12:	4608      	mov	r0, r1
 8000d14:	4611      	mov	r1, r2
 8000d16:	461a      	mov	r2, r3
 8000d18:	4623      	mov	r3, r4
 8000d1a:	80fb      	strh	r3, [r7, #6]
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	80bb      	strh	r3, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
 8000d24:	4613      	mov	r3, r2
 8000d26:	803b      	strh	r3, [r7, #0]
	for(int i = 0; i < len; i++){
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e00c      	b.n	8000d48 <LCD_Draw_Rectangle_Fill+0x3e>
		//Draw a bunch of vertical lines from left to right
		LCD_Draw_Vertical_Line(Xpos+i,Ypos,height,color);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	4413      	add	r3, r2
 8000d36:	b298      	uxth	r0, r3
 8000d38:	8c3b      	ldrh	r3, [r7, #32]
 8000d3a:	883a      	ldrh	r2, [r7, #0]
 8000d3c:	88b9      	ldrh	r1, [r7, #4]
 8000d3e:	f7ff ff43 	bl	8000bc8 <LCD_Draw_Vertical_Line>
	for(int i = 0; i < len; i++){
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbee      	blt.n	8000d2e <LCD_Draw_Rectangle_Fill+0x24>
	}
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd90      	pop	{r4, r7, pc}

08000d5a <LCD_Draw_OBlock>:

void LCD_Draw_OBlock(uint16_t Xpos, uint16_t Ypos){
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af02      	add	r7, sp, #8
 8000d60:	4603      	mov	r3, r0
 8000d62:	460a      	mov	r2, r1
 8000d64:	80fb      	strh	r3, [r7, #6]
 8000d66:	4613      	mov	r3, r2
 8000d68:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH*2,LCD_COLOR_YELLOW);
 8000d6a:	88b9      	ldrh	r1, [r7, #4]
 8000d6c:	88f8      	ldrh	r0, [r7, #6]
 8000d6e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	233c      	movs	r3, #60	@ 0x3c
 8000d76:	223c      	movs	r2, #60	@ 0x3c
 8000d78:	f7ff ffc7 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <LCD_Draw_IBlock>:
void LCD_Draw_IBlock(uint16_t Xpos, uint16_t Ypos){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	80fb      	strh	r3, [r7, #6]
 8000d90:	4613      	mov	r3, r2
 8000d92:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*4,LCD_COLOR_CYAN);
 8000d94:	88b9      	ldrh	r1, [r7, #4]
 8000d96:	88f8      	ldrh	r0, [r7, #6]
 8000d98:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2378      	movs	r3, #120	@ 0x78
 8000da0:	221e      	movs	r2, #30
 8000da2:	f7ff ffb2 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <LCD_Draw_SBlock>:
void LCD_Draw_SBlock(uint16_t Xpos, uint16_t Ypos){
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af02      	add	r7, sp, #8
 8000db4:	4603      	mov	r3, r0
 8000db6:	460a      	mov	r2, r1
 8000db8:	80fb      	strh	r3, [r7, #6]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_RED);
 8000dbe:	88b9      	ldrh	r1, [r7, #4]
 8000dc0:	88f8      	ldrh	r0, [r7, #6]
 8000dc2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	231e      	movs	r3, #30
 8000dca:	223c      	movs	r2, #60	@ 0x3c
 8000dcc:	f7ff ff9d 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_RED);
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	3b1e      	subs	r3, #30
 8000dd4:	b298      	uxth	r0, r3
 8000dd6:	88bb      	ldrh	r3, [r7, #4]
 8000dd8:	331e      	adds	r3, #30
 8000dda:	b299      	uxth	r1, r3
 8000ddc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	231e      	movs	r3, #30
 8000de4:	223c      	movs	r2, #60	@ 0x3c
 8000de6:	f7ff ff90 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <LCD_Draw_ZBlock>:
void LCD_Draw_ZBlock(uint16_t Xpos, uint16_t Ypos){
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af02      	add	r7, sp, #8
 8000df8:	4603      	mov	r3, r0
 8000dfa:	460a      	mov	r2, r1
 8000dfc:	80fb      	strh	r3, [r7, #6]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_GREEN);
 8000e02:	88b9      	ldrh	r1, [r7, #4]
 8000e04:	88f8      	ldrh	r0, [r7, #6]
 8000e06:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	231e      	movs	r3, #30
 8000e0e:	223c      	movs	r2, #60	@ 0x3c
 8000e10:	f7ff ff7b 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_GREEN);
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	331e      	adds	r3, #30
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	331e      	adds	r3, #30
 8000e1e:	b299      	uxth	r1, r3
 8000e20:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	231e      	movs	r3, #30
 8000e28:	223c      	movs	r2, #60	@ 0x3c
 8000e2a:	f7ff ff6e 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <LCD_Draw_LBlock>:
void LCD_Draw_LBlock(uint16_t Xpos, uint16_t Ypos){
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af02      	add	r7, sp, #8
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	460a      	mov	r2, r1
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4613      	mov	r3, r2
 8000e44:	80bb      	strh	r3, [r7, #4]
	//orange
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_BLUE2);
 8000e46:	88b9      	ldrh	r1, [r7, #4]
 8000e48:	88f8      	ldrh	r0, [r7, #6]
 8000e4a:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	235a      	movs	r3, #90	@ 0x5a
 8000e52:	221e      	movs	r2, #30
 8000e54:	f7ff ff59 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+(BLOCK_LENGTH*2),BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_BLUE2);
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	331e      	adds	r3, #30
 8000e5c:	b298      	uxth	r0, r3
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	333c      	adds	r3, #60	@ 0x3c
 8000e62:	b299      	uxth	r1, r3
 8000e64:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	231e      	movs	r3, #30
 8000e6c:	221e      	movs	r2, #30
 8000e6e:	f7ff ff4c 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <LCD_Draw_JBlock>:
void LCD_Draw_JBlock(uint16_t Xpos, uint16_t Ypos){
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af02      	add	r7, sp, #8
 8000e80:	4603      	mov	r3, r0
 8000e82:	460a      	mov	r2, r1
 8000e84:	80fb      	strh	r3, [r7, #6]
 8000e86:	4613      	mov	r3, r2
 8000e88:	80bb      	strh	r3, [r7, #4]
	//pink
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_MAGENTA);
 8000e8a:	88b9      	ldrh	r1, [r7, #4]
 8000e8c:	88f8      	ldrh	r0, [r7, #6]
 8000e8e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	235a      	movs	r3, #90	@ 0x5a
 8000e96:	221e      	movs	r2, #30
 8000e98:	f7ff ff37 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+(BLOCK_LENGTH*2),BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_MAGENTA);
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	3b1e      	subs	r3, #30
 8000ea0:	b298      	uxth	r0, r3
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	333c      	adds	r3, #60	@ 0x3c
 8000ea6:	b299      	uxth	r1, r3
 8000ea8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	231e      	movs	r3, #30
 8000eb0:	221e      	movs	r2, #30
 8000eb2:	f7ff ff2a 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <LCD_Draw_TBlock>:
void LCD_Draw_TBlock(uint16_t Xpos, uint16_t Ypos){
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	af02      	add	r7, sp, #8
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	460a      	mov	r2, r1
 8000ec8:	80fb      	strh	r3, [r7, #6]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	80bb      	strh	r3, [r7, #4]
	//purple
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*3,BLOCK_LENGTH,LCD_COLOR_GREY);
 8000ece:	88b9      	ldrh	r1, [r7, #4]
 8000ed0:	88f8      	ldrh	r0, [r7, #6]
 8000ed2:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	231e      	movs	r3, #30
 8000eda:	225a      	movs	r2, #90	@ 0x5a
 8000edc:	f7ff ff15 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_GREY);
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	331e      	adds	r3, #30
 8000ee4:	b298      	uxth	r0, r3
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	331e      	adds	r3, #30
 8000eea:	b299      	uxth	r1, r3
 8000eec:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	231e      	movs	r3, #30
 8000ef4:	221e      	movs	r2, #30
 8000ef6:	f7ff ff08 	bl	8000d0a <LCD_Draw_Rectangle_Fill>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <LCD_SetTextColor+0x1c>)
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	8013      	strh	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	20000000 	.word	0x20000000

08000f24 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000f2c:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <LCD_SetFont+0x1c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000188 	.word	0x20000188

08000f44 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	603a      	str	r2, [r7, #0]
 8000f4e:	80fb      	strh	r3, [r7, #6]
 8000f50:	460b      	mov	r3, r1
 8000f52:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	e04c      	b.n	8000ffc <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	e03f      	b.n	8000fe8 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	4619      	mov	r1, r3
 8000f74:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <LCD_Draw_Char+0xd0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	4a27      	ldr	r2, [pc, #156]	@ (8001018 <LCD_Draw_Char+0xd4>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	08db      	lsrs	r3, r3, #3
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	2280      	movs	r2, #128	@ 0x80
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	fa42 f303 	asr.w	r3, r2, r3
 8000f90:	400b      	ands	r3, r1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d104      	bne.n	8000fa0 <LCD_Draw_Char+0x5c>
 8000f96:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <LCD_Draw_Char+0xd0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	889b      	ldrh	r3, [r3, #4]
 8000f9c:	2b0c      	cmp	r3, #12
 8000f9e:	d920      	bls.n	8000fe2 <LCD_Draw_Char+0x9e>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	fa42 f303 	asr.w	r3, r2, r3
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d104      	bne.n	8000fc4 <LCD_Draw_Char+0x80>
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <LCD_Draw_Char+0xd0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	889b      	ldrh	r3, [r3, #4]
 8000fc0:	2b0c      	cmp	r3, #12
 8000fc2:	d80e      	bhi.n	8000fe2 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b298      	uxth	r0, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	88bb      	ldrh	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	4a10      	ldr	r2, [pc, #64]	@ (800101c <LCD_Draw_Char+0xd8>)
 8000fda:	8812      	ldrh	r2, [r2, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fdd5 	bl	8000b8c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <LCD_Draw_Char+0xd0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	889b      	ldrh	r3, [r3, #4]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d3b8      	bcc.n	8000f68 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <LCD_Draw_Char+0xd0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	88db      	ldrh	r3, [r3, #6]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4293      	cmp	r3, r2
 8001008:	d3ab      	bcc.n	8000f62 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000188 	.word	0x20000188
 8001018:	aaaaaaab 	.word	0xaaaaaaab
 800101c:	20000000 	.word	0x20000000

08001020 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
 800102a:	460b      	mov	r3, r1
 800102c:	80bb      	strh	r3, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	3b20      	subs	r3, #32
 8001036:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001038:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <LCD_DisplayChar+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	4907      	ldr	r1, [pc, #28]	@ (8001060 <LCD_DisplayChar+0x40>)
 8001042:	6809      	ldr	r1, [r1, #0]
 8001044:	88c9      	ldrh	r1, [r1, #6]
 8001046:	fb01 f303 	mul.w	r3, r1, r3
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	441a      	add	r2, r3
 800104e:	88b9      	ldrh	r1, [r7, #4]
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff76 	bl	8000f44 <LCD_Draw_Char>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000188 	.word	0x20000188

08001064 <screen1>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void screen1(void){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af02      	add	r7, sp, #8
	clearScreen();
 800106a:	f7ff fd27 	bl	8000abc <clearScreen>

	//Show all blocks
	LCD_Draw_OBlock(90,250);
 800106e:	21fa      	movs	r1, #250	@ 0xfa
 8001070:	205a      	movs	r0, #90	@ 0x5a
 8001072:	f7ff fe72 	bl	8000d5a <LCD_Draw_OBlock>
	LCD_Draw_IBlock(105,110);
 8001076:	216e      	movs	r1, #110	@ 0x6e
 8001078:	2069      	movs	r0, #105	@ 0x69
 800107a:	f7ff fe83 	bl	8000d84 <LCD_Draw_IBlock>
	LCD_Draw_SBlock(170,200);
 800107e:	21c8      	movs	r1, #200	@ 0xc8
 8001080:	20aa      	movs	r0, #170	@ 0xaa
 8001082:	f7ff fe94 	bl	8000dae <LCD_Draw_SBlock>
	LCD_Draw_ZBlock(10,200);
 8001086:	21c8      	movs	r1, #200	@ 0xc8
 8001088:	200a      	movs	r0, #10
 800108a:	f7ff feb2 	bl	8000df2 <LCD_Draw_ZBlock>
	LCD_Draw_LBlock(20,10);
 800108e:	210a      	movs	r1, #10
 8001090:	2014      	movs	r0, #20
 8001092:	f7ff fed0 	bl	8000e36 <LCD_Draw_LBlock>
	LCD_Draw_JBlock(190,10);
 8001096:	210a      	movs	r1, #10
 8001098:	20be      	movs	r0, #190	@ 0xbe
 800109a:	f7ff feee 	bl	8000e7a <LCD_Draw_JBlock>
	LCD_Draw_TBlock(75,35);
 800109e:	2123      	movs	r1, #35	@ 0x23
 80010a0:	204b      	movs	r0, #75	@ 0x4b
 80010a2:	f7ff ff0c 	bl	8000ebe <LCD_Draw_TBlock>

	//"Tetris"
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff ff2c 	bl	8000f04 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80010ac:	4822      	ldr	r0, [pc, #136]	@ (8001138 <screen1+0xd4>)
 80010ae:	f7ff ff39 	bl	8000f24 <LCD_SetFont>

	LCD_DisplayChar(80,40,'T');
 80010b2:	2254      	movs	r2, #84	@ 0x54
 80010b4:	2128      	movs	r1, #40	@ 0x28
 80010b6:	2050      	movs	r0, #80	@ 0x50
 80010b8:	f7ff ffb2 	bl	8001020 <LCD_DisplayChar>
	LCD_DisplayChar(95,40,'E');
 80010bc:	2245      	movs	r2, #69	@ 0x45
 80010be:	2128      	movs	r1, #40	@ 0x28
 80010c0:	205f      	movs	r0, #95	@ 0x5f
 80010c2:	f7ff ffad 	bl	8001020 <LCD_DisplayChar>
	LCD_DisplayChar(110,40,'T');
 80010c6:	2254      	movs	r2, #84	@ 0x54
 80010c8:	2128      	movs	r1, #40	@ 0x28
 80010ca:	206e      	movs	r0, #110	@ 0x6e
 80010cc:	f7ff ffa8 	bl	8001020 <LCD_DisplayChar>
	LCD_DisplayChar(125,40,'R');
 80010d0:	2252      	movs	r2, #82	@ 0x52
 80010d2:	2128      	movs	r1, #40	@ 0x28
 80010d4:	207d      	movs	r0, #125	@ 0x7d
 80010d6:	f7ff ffa3 	bl	8001020 <LCD_DisplayChar>
	LCD_DisplayChar(135,40,'I');
 80010da:	2249      	movs	r2, #73	@ 0x49
 80010dc:	2128      	movs	r1, #40	@ 0x28
 80010de:	2087      	movs	r0, #135	@ 0x87
 80010e0:	f7ff ff9e 	bl	8001020 <LCD_DisplayChar>
	LCD_DisplayChar(145,40,'S');
 80010e4:	2253      	movs	r2, #83	@ 0x53
 80010e6:	2128      	movs	r1, #40	@ 0x28
 80010e8:	2091      	movs	r0, #145	@ 0x91
 80010ea:	f7ff ff99 	bl	8001020 <LCD_DisplayChar>

	//Start button
	LCD_DisplayChar(95,200,'S');
 80010ee:	2253      	movs	r2, #83	@ 0x53
 80010f0:	21c8      	movs	r1, #200	@ 0xc8
 80010f2:	205f      	movs	r0, #95	@ 0x5f
 80010f4:	f7ff ff94 	bl	8001020 <LCD_DisplayChar>
	LCD_DisplayChar(105,200,'t');
 80010f8:	2274      	movs	r2, #116	@ 0x74
 80010fa:	21c8      	movs	r1, #200	@ 0xc8
 80010fc:	2069      	movs	r0, #105	@ 0x69
 80010fe:	f7ff ff8f 	bl	8001020 <LCD_DisplayChar>
	LCD_DisplayChar(115,200,'a');
 8001102:	2261      	movs	r2, #97	@ 0x61
 8001104:	21c8      	movs	r1, #200	@ 0xc8
 8001106:	2073      	movs	r0, #115	@ 0x73
 8001108:	f7ff ff8a 	bl	8001020 <LCD_DisplayChar>
	LCD_DisplayChar(125,200,'r');
 800110c:	2272      	movs	r2, #114	@ 0x72
 800110e:	21c8      	movs	r1, #200	@ 0xc8
 8001110:	207d      	movs	r0, #125	@ 0x7d
 8001112:	f7ff ff85 	bl	8001020 <LCD_DisplayChar>
	LCD_DisplayChar(132,200,'t');
 8001116:	2274      	movs	r2, #116	@ 0x74
 8001118:	21c8      	movs	r1, #200	@ 0xc8
 800111a:	2084      	movs	r0, #132	@ 0x84
 800111c:	f7ff ff80 	bl	8001020 <LCD_DisplayChar>
	LCD_Draw_Rectangle_Empty(70,160,100,100,LCD_COLOR_BLACK);
 8001120:	2300      	movs	r3, #0
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2364      	movs	r3, #100	@ 0x64
 8001126:	2264      	movs	r2, #100	@ 0x64
 8001128:	21a0      	movs	r1, #160	@ 0xa0
 800112a:	2046      	movs	r0, #70	@ 0x46
 800112c:	f7ff fdbc 	bl	8000ca8 <LCD_Draw_Rectangle_Empty>
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000004 	.word	0x20000004

0800113c <screen2>:

void screen2(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af02      	add	r7, sp, #8
	//320 = bottom of screen
	//250 = right of screen
	//10 tall x 6 wide
	//30*10 = 300
	//30*6 = 180
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fede 	bl	8000f04 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001148:	480a      	ldr	r0, [pc, #40]	@ (8001174 <screen2+0x38>)
 800114a:	f7ff feeb 	bl	8000f24 <LCD_SetFont>

	clearScreen();
 800114e:	f7ff fcb5 	bl	8000abc <clearScreen>

	LCD_DisplayChar(110,40,'2');
 8001152:	2232      	movs	r2, #50	@ 0x32
 8001154:	2128      	movs	r1, #40	@ 0x28
 8001156:	206e      	movs	r0, #110	@ 0x6e
 8001158:	f7ff ff62 	bl	8001020 <LCD_DisplayChar>

	// Border
	LCD_Draw_Rectangle_Empty(30,10,180,300,LCD_COLOR_BLACK);
 800115c:	2300      	movs	r3, #0
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001164:	22b4      	movs	r2, #180	@ 0xb4
 8001166:	210a      	movs	r1, #10
 8001168:	201e      	movs	r0, #30
 800116a:	f7ff fd9d 	bl	8000ca8 <LCD_Draw_Rectangle_Empty>

	// Ensure timer works
		//Counts, overflows, triggers interrupt, 3 sec intervals
	//open .ioc, open firmware for system clock override, compare the two
	//ioc has apb prescalers corresponding to divider members of clock config struct
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000004 	.word	0x20000004

08001178 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <LCD_Error_Handler+0x8>

08001184 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001188:	f000 fdd8 	bl	8001d3c <STMPE811_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b02      	cmp	r3, #2
 8001190:	d001      	beq.n	8001196 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialization
 8001192:	bf00      	nop
 8001194:	e7fd      	b.n	8001192 <InitializeLCDTouch+0xe>
  }
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}

0800119a <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 feb4 	bl	8001f10 <STMPE811_DetermineTouchPosition>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fe84 	bl	8001eca <STMPE811_Read>
 80011c2:	4603      	mov	r3, r0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 80011dc:	79ba      	ldrb	r2, [r7, #6]
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fe82 	bl	8001eec <STMPE811_Write>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <addSchedulerEvent>:

uint32_t getScheduledEvents(){
	return scheduledEvents;
}

void addSchedulerEvent(uint32_t eventToSchedule){
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	scheduledEvents |= eventToSchedule; // Set
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <addSchedulerEvent+0x20>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4313      	orrs	r3, r2
 8001200:	4a03      	ldr	r2, [pc, #12]	@ (8001210 <addSchedulerEvent+0x20>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	2002598c 	.word	0x2002598c

08001214 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001218:	f000 f9fe 	bl	8001618 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800121c:	20ca      	movs	r0, #202	@ 0xca
 800121e:	f000 f943 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001222:	20c3      	movs	r0, #195	@ 0xc3
 8001224:	f000 f94d 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001228:	2008      	movs	r0, #8
 800122a:	f000 f94a 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800122e:	2050      	movs	r0, #80	@ 0x50
 8001230:	f000 f947 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001234:	20cf      	movs	r0, #207	@ 0xcf
 8001236:	f000 f937 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f941 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001240:	20c1      	movs	r0, #193	@ 0xc1
 8001242:	f000 f93e 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001246:	2030      	movs	r0, #48	@ 0x30
 8001248:	f000 f93b 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800124c:	20ed      	movs	r0, #237	@ 0xed
 800124e:	f000 f92b 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001252:	2064      	movs	r0, #100	@ 0x64
 8001254:	f000 f935 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 f932 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800125e:	2012      	movs	r0, #18
 8001260:	f000 f92f 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001264:	2081      	movs	r0, #129	@ 0x81
 8001266:	f000 f92c 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800126a:	20e8      	movs	r0, #232	@ 0xe8
 800126c:	f000 f91c 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001270:	2085      	movs	r0, #133	@ 0x85
 8001272:	f000 f926 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001276:	2000      	movs	r0, #0
 8001278:	f000 f923 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800127c:	2078      	movs	r0, #120	@ 0x78
 800127e:	f000 f920 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001282:	20cb      	movs	r0, #203	@ 0xcb
 8001284:	f000 f910 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001288:	2039      	movs	r0, #57	@ 0x39
 800128a:	f000 f91a 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800128e:	202c      	movs	r0, #44	@ 0x2c
 8001290:	f000 f917 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001294:	2000      	movs	r0, #0
 8001296:	f000 f914 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800129a:	2034      	movs	r0, #52	@ 0x34
 800129c:	f000 f911 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80012a0:	2002      	movs	r0, #2
 80012a2:	f000 f90e 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80012a6:	20f7      	movs	r0, #247	@ 0xf7
 80012a8:	f000 f8fe 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80012ac:	2020      	movs	r0, #32
 80012ae:	f000 f908 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80012b2:	20ea      	movs	r0, #234	@ 0xea
 80012b4:	f000 f8f8 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 f902 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f8ff 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80012c4:	20b1      	movs	r0, #177	@ 0xb1
 80012c6:	f000 f8ef 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f8f9 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80012d0:	201b      	movs	r0, #27
 80012d2:	f000 f8f6 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80012d6:	20b6      	movs	r0, #182	@ 0xb6
 80012d8:	f000 f8e6 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80012dc:	200a      	movs	r0, #10
 80012de:	f000 f8f0 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80012e2:	20a2      	movs	r0, #162	@ 0xa2
 80012e4:	f000 f8ed 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80012e8:	20c0      	movs	r0, #192	@ 0xc0
 80012ea:	f000 f8dd 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80012ee:	2010      	movs	r0, #16
 80012f0:	f000 f8e7 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80012f4:	20c1      	movs	r0, #193	@ 0xc1
 80012f6:	f000 f8d7 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80012fa:	2010      	movs	r0, #16
 80012fc:	f000 f8e1 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001300:	20c5      	movs	r0, #197	@ 0xc5
 8001302:	f000 f8d1 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001306:	2045      	movs	r0, #69	@ 0x45
 8001308:	f000 f8db 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800130c:	2015      	movs	r0, #21
 800130e:	f000 f8d8 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001312:	20c7      	movs	r0, #199	@ 0xc7
 8001314:	f000 f8c8 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001318:	2090      	movs	r0, #144	@ 0x90
 800131a:	f000 f8d2 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800131e:	2036      	movs	r0, #54	@ 0x36
 8001320:	f000 f8c2 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001324:	20c8      	movs	r0, #200	@ 0xc8
 8001326:	f000 f8cc 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800132a:	20f2      	movs	r0, #242	@ 0xf2
 800132c:	f000 f8bc 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001330:	2000      	movs	r0, #0
 8001332:	f000 f8c6 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001336:	20b0      	movs	r0, #176	@ 0xb0
 8001338:	f000 f8b6 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800133c:	20c2      	movs	r0, #194	@ 0xc2
 800133e:	f000 f8c0 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001342:	20b6      	movs	r0, #182	@ 0xb6
 8001344:	f000 f8b0 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001348:	200a      	movs	r0, #10
 800134a:	f000 f8ba 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800134e:	20a7      	movs	r0, #167	@ 0xa7
 8001350:	f000 f8b7 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001354:	2027      	movs	r0, #39	@ 0x27
 8001356:	f000 f8b4 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800135a:	2004      	movs	r0, #4
 800135c:	f000 f8b1 	bl	80014c2 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001360:	202a      	movs	r0, #42	@ 0x2a
 8001362:	f000 f8a1 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001366:	2000      	movs	r0, #0
 8001368:	f000 f8ab 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800136c:	2000      	movs	r0, #0
 800136e:	f000 f8a8 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001372:	2000      	movs	r0, #0
 8001374:	f000 f8a5 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001378:	20ef      	movs	r0, #239	@ 0xef
 800137a:	f000 f8a2 	bl	80014c2 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800137e:	202b      	movs	r0, #43	@ 0x2b
 8001380:	f000 f892 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001384:	2000      	movs	r0, #0
 8001386:	f000 f89c 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f899 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001390:	2001      	movs	r0, #1
 8001392:	f000 f896 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001396:	203f      	movs	r0, #63	@ 0x3f
 8001398:	f000 f893 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800139c:	20f6      	movs	r0, #246	@ 0xf6
 800139e:	f000 f883 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f000 f88d 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f000 f88a 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80013ae:	2006      	movs	r0, #6
 80013b0:	f000 f887 	bl	80014c2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80013b4:	202c      	movs	r0, #44	@ 0x2c
 80013b6:	f000 f877 	bl	80014a8 <ili9341_Write_Reg>
  LCD_Delay(200);
 80013ba:	20c8      	movs	r0, #200	@ 0xc8
 80013bc:	f000 f9e8 	bl	8001790 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80013c0:	2026      	movs	r0, #38	@ 0x26
 80013c2:	f000 f871 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 f87b 	bl	80014c2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80013cc:	20e0      	movs	r0, #224	@ 0xe0
 80013ce:	f000 f86b 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80013d2:	200f      	movs	r0, #15
 80013d4:	f000 f875 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80013d8:	2029      	movs	r0, #41	@ 0x29
 80013da:	f000 f872 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80013de:	2024      	movs	r0, #36	@ 0x24
 80013e0:	f000 f86f 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80013e4:	200c      	movs	r0, #12
 80013e6:	f000 f86c 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80013ea:	200e      	movs	r0, #14
 80013ec:	f000 f869 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80013f0:	2009      	movs	r0, #9
 80013f2:	f000 f866 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80013f6:	204e      	movs	r0, #78	@ 0x4e
 80013f8:	f000 f863 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80013fc:	2078      	movs	r0, #120	@ 0x78
 80013fe:	f000 f860 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001402:	203c      	movs	r0, #60	@ 0x3c
 8001404:	f000 f85d 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001408:	2009      	movs	r0, #9
 800140a:	f000 f85a 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800140e:	2013      	movs	r0, #19
 8001410:	f000 f857 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001414:	2005      	movs	r0, #5
 8001416:	f000 f854 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800141a:	2017      	movs	r0, #23
 800141c:	f000 f851 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001420:	2011      	movs	r0, #17
 8001422:	f000 f84e 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f84b 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800142c:	20e1      	movs	r0, #225	@ 0xe1
 800142e:	f000 f83b 	bl	80014a8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f845 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001438:	2016      	movs	r0, #22
 800143a:	f000 f842 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800143e:	201b      	movs	r0, #27
 8001440:	f000 f83f 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001444:	2004      	movs	r0, #4
 8001446:	f000 f83c 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800144a:	2011      	movs	r0, #17
 800144c:	f000 f839 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001450:	2007      	movs	r0, #7
 8001452:	f000 f836 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001456:	2031      	movs	r0, #49	@ 0x31
 8001458:	f000 f833 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800145c:	2033      	movs	r0, #51	@ 0x33
 800145e:	f000 f830 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001462:	2042      	movs	r0, #66	@ 0x42
 8001464:	f000 f82d 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001468:	2005      	movs	r0, #5
 800146a:	f000 f82a 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800146e:	200c      	movs	r0, #12
 8001470:	f000 f827 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001474:	200a      	movs	r0, #10
 8001476:	f000 f824 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800147a:	2028      	movs	r0, #40	@ 0x28
 800147c:	f000 f821 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001480:	202f      	movs	r0, #47	@ 0x2f
 8001482:	f000 f81e 	bl	80014c2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001486:	200f      	movs	r0, #15
 8001488:	f000 f81b 	bl	80014c2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800148c:	2011      	movs	r0, #17
 800148e:	f000 f80b 	bl	80014a8 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001492:	20c8      	movs	r0, #200	@ 0xc8
 8001494:	f000 f97c 	bl	8001790 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001498:	2029      	movs	r0, #41	@ 0x29
 800149a:	f000 f805 	bl	80014a8 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800149e:	202c      	movs	r0, #44	@ 0x2c
 80014a0:	f000 f802 	bl	80014a8 <ili9341_Write_Reg>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f949 	bl	800174c <LCD_IO_WriteReg>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f91a 	bl	8001708 <LCD_IO_WriteData>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80014e0:	4819      	ldr	r0, [pc, #100]	@ (8001548 <SPI_Init+0x6c>)
 80014e2:	f004 f85c 	bl	800559e <HAL_SPI_GetState>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d12b      	bne.n	8001544 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80014ec:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <SPI_Init+0x6c>)
 80014ee:	4a17      	ldr	r2, [pc, #92]	@ (800154c <SPI_Init+0x70>)
 80014f0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <SPI_Init+0x6c>)
 80014f4:	2218      	movs	r2, #24
 80014f6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <SPI_Init+0x6c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80014fe:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <SPI_Init+0x6c>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001504:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <SPI_Init+0x6c>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800150a:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <SPI_Init+0x6c>)
 800150c:	2200      	movs	r2, #0
 800150e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <SPI_Init+0x6c>)
 8001512:	2207      	movs	r2, #7
 8001514:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <SPI_Init+0x6c>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <SPI_Init+0x6c>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <SPI_Init+0x6c>)
 8001524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001528:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <SPI_Init+0x6c>)
 800152c:	2200      	movs	r2, #0
 800152e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <SPI_Init+0x6c>)
 8001532:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001536:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001538:	4803      	ldr	r0, [pc, #12]	@ (8001548 <SPI_Init+0x6c>)
 800153a:	f000 f833 	bl	80015a4 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800153e:	4802      	ldr	r0, [pc, #8]	@ (8001548 <SPI_Init+0x6c>)
 8001540:	f003 fe38 	bl	80051b4 <HAL_SPI_Init>
  }
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20025990 	.word	0x20025990
 800154c:	40015000 	.word	0x40015000

08001550 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <SPI_Write+0x34>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1db9      	adds	r1, r7, #6
 8001564:	2201      	movs	r2, #1
 8001566:	4808      	ldr	r0, [pc, #32]	@ (8001588 <SPI_Write+0x38>)
 8001568:	f003 fed5 	bl	8005316 <HAL_SPI_Transmit>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001576:	f000 f809 	bl	800158c <SPI_Error>
  }
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000000c 	.word	0x2000000c
 8001588:	20025990 	.word	0x20025990

0800158c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001590:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <SPI_Error+0x14>)
 8001592:	f003 fe98 	bl	80052c6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001596:	f7ff ffa1 	bl	80014dc <SPI_Init>
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20025990 	.word	0x20025990

080015a4 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <SPI_MspInit+0x6c>)
 80015b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b4:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <SPI_MspInit+0x6c>)
 80015b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <SPI_MspInit+0x6c>)
 80015be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <SPI_MspInit+0x6c>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001610 <SPI_MspInit+0x6c>)
 80015d2:	f043 0320 	orr.w	r3, r3, #32
 80015d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <SPI_MspInit+0x6c>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015dc:	f003 0320 	and.w	r3, r3, #32
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80015e4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80015f2:	2301      	movs	r3, #1
 80015f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80015f6:	2305      	movs	r3, #5
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <SPI_MspInit+0x70>)
 8001602:	f001 f9f7 	bl	80029f4 <HAL_GPIO_Init>
}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	@ 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40021400 	.word	0x40021400

08001618 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800161e:	4b36      	ldr	r3, [pc, #216]	@ (80016f8 <LCD_IO_Init+0xe0>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d164      	bne.n	80016f0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <LCD_IO_Init+0xe0>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <LCD_IO_Init+0xe4>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001634:	4a31      	ldr	r2, [pc, #196]	@ (80016fc <LCD_IO_Init+0xe4>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	6313      	str	r3, [r2, #48]	@ 0x30
 800163c:	4b2f      	ldr	r3, [pc, #188]	@ (80016fc <LCD_IO_Init+0xe4>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001648:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800164c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	4619      	mov	r1, r3
 8001660:	4827      	ldr	r0, [pc, #156]	@ (8001700 <LCD_IO_Init+0xe8>)
 8001662:	f001 f9c7 	bl	80029f4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <LCD_IO_Init+0xe4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a23      	ldr	r2, [pc, #140]	@ (80016fc <LCD_IO_Init+0xe4>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <LCD_IO_Init+0xe4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001686:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4619      	mov	r1, r3
 800169a:	4819      	ldr	r0, [pc, #100]	@ (8001700 <LCD_IO_Init+0xe8>)
 800169c:	f001 f9aa 	bl	80029f4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <LCD_IO_Init+0xe4>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a8:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <LCD_IO_Init+0xe4>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <LCD_IO_Init+0xe4>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80016bc:	2304      	movs	r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	4619      	mov	r1, r3
 80016d2:	480c      	ldr	r0, [pc, #48]	@ (8001704 <LCD_IO_Init+0xec>)
 80016d4:	f001 f98e 	bl	80029f4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80016d8:	2200      	movs	r2, #0
 80016da:	2104      	movs	r1, #4
 80016dc:	4809      	ldr	r0, [pc, #36]	@ (8001704 <LCD_IO_Init+0xec>)
 80016de:	f001 fc41 	bl	8002f64 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80016e2:	2201      	movs	r2, #1
 80016e4:	2104      	movs	r1, #4
 80016e6:	4807      	ldr	r0, [pc, #28]	@ (8001704 <LCD_IO_Init+0xec>)
 80016e8:	f001 fc3c 	bl	8002f64 <HAL_GPIO_WritePin>

    SPI_Init();
 80016ec:	f7ff fef6 	bl	80014dc <SPI_Init>
  }
}
 80016f0:	bf00      	nop
 80016f2:	3720      	adds	r7, #32
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200259e8 	.word	0x200259e8
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020c00 	.word	0x40020c00
 8001704:	40020800 	.word	0x40020800

08001708 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001718:	480a      	ldr	r0, [pc, #40]	@ (8001744 <LCD_IO_WriteData+0x3c>)
 800171a:	f001 fc23 	bl	8002f64 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800171e:	2200      	movs	r2, #0
 8001720:	2104      	movs	r1, #4
 8001722:	4809      	ldr	r0, [pc, #36]	@ (8001748 <LCD_IO_WriteData+0x40>)
 8001724:	f001 fc1e 	bl	8002f64 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff10 	bl	8001550 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001730:	2201      	movs	r2, #1
 8001732:	2104      	movs	r1, #4
 8001734:	4804      	ldr	r0, [pc, #16]	@ (8001748 <LCD_IO_WriteData+0x40>)
 8001736:	f001 fc15 	bl	8002f64 <HAL_GPIO_WritePin>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40020800 	.word	0x40020800

0800174c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800175c:	480a      	ldr	r0, [pc, #40]	@ (8001788 <LCD_IO_WriteReg+0x3c>)
 800175e:	f001 fc01 	bl	8002f64 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001762:	2200      	movs	r2, #0
 8001764:	2104      	movs	r1, #4
 8001766:	4809      	ldr	r0, [pc, #36]	@ (800178c <LCD_IO_WriteReg+0x40>)
 8001768:	f001 fbfc 	bl	8002f64 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff feed 	bl	8001550 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001776:	2201      	movs	r2, #1
 8001778:	2104      	movs	r1, #4
 800177a:	4804      	ldr	r0, [pc, #16]	@ (800178c <LCD_IO_WriteReg+0x40>)
 800177c:	f001 fbf2 	bl	8002f64 <HAL_GPIO_WritePin>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40020c00 	.word	0x40020c00
 800178c:	40020800 	.word	0x40020800

08001790 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 ff7f 	bl	800269c <HAL_Delay>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017aa:	f000 ff05 	bl	80025b8 <HAL_Init>

	// The default system configuration function is "suspect" so we need to make our own clock configuration
	// Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
	SystemClockOverride();
 80017ae:	f000 f80b 	bl	80017c8 <SystemClockOverride>

	ApplicationInit(); // Initializes the LCD functionality
 80017b2:	f7fe fee5 	bl	8000580 <ApplicationInit>

	HAL_Delay(5000);
 80017b6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80017ba:	f000 ff6f 	bl	800269c <HAL_Delay>

	screen1();
 80017be:	f7ff fc51 	bl	8001064 <screen1>

	while(1){
 80017c2:	bf00      	nop
 80017c4:	e7fd      	b.n	80017c2 <main+0x1c>
	...

080017c8 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b092      	sub	sp, #72	@ 0x48
 80017cc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <SystemClockOverride+0x7c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001844 <SystemClockOverride+0x7c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017de:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <SystemClockOverride+0x7c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ea:	2301      	movs	r3, #1
 80017ec:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017f2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017fe:	2308      	movs	r3, #8
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001802:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001806:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001808:	2302      	movs	r3, #2
 800180a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800180c:	2307      	movs	r3, #7
 800180e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fe8a 	bl	800452c <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001818:	230f      	movs	r3, #15
 800181a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181c:	2302      	movs	r3, #2
 800181e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001824:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001828:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800182a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800182e:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001830:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001834:	2105      	movs	r1, #5
 8001836:	4618      	mov	r0, r3
 8001838:	f003 f8f0 	bl	8004a1c <HAL_RCC_ClockConfig>
}
 800183c:	bf00      	nop
 800183e:	3748      	adds	r7, #72	@ 0x48
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40023800 	.word	0x40023800

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <Error_Handler+0x8>

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <HAL_MspInit+0x4c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	4a0f      	ldr	r2, [pc, #60]	@ (80018a0 <HAL_MspInit+0x4c>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001868:	6453      	str	r3, [r2, #68]	@ 0x44
 800186a:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <HAL_MspInit+0x4c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_MspInit+0x4c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <HAL_MspInit+0x4c>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	@ 0x40
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_MspInit+0x4c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001892:	2007      	movs	r0, #7
 8001894:	f001 f838 	bl	8002908 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	@ 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a29      	ldr	r2, [pc, #164]	@ (8001968 <HAL_I2C_MspInit+0xc4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d14b      	bne.n	800195e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b28      	ldr	r3, [pc, #160]	@ (800196c <HAL_I2C_MspInit+0xc8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a27      	ldr	r2, [pc, #156]	@ (800196c <HAL_I2C_MspInit+0xc8>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b25      	ldr	r3, [pc, #148]	@ (800196c <HAL_I2C_MspInit+0xc8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b21      	ldr	r3, [pc, #132]	@ (800196c <HAL_I2C_MspInit+0xc8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a20      	ldr	r2, [pc, #128]	@ (800196c <HAL_I2C_MspInit+0xc8>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b1e      	ldr	r3, [pc, #120]	@ (800196c <HAL_I2C_MspInit+0xc8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80018fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001904:	2312      	movs	r3, #18
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001910:	2304      	movs	r3, #4
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4815      	ldr	r0, [pc, #84]	@ (8001970 <HAL_I2C_MspInit+0xcc>)
 800191c:	f001 f86a 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001926:	2312      	movs	r3, #18
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001932:	2304      	movs	r3, #4
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	480d      	ldr	r0, [pc, #52]	@ (8001974 <HAL_I2C_MspInit+0xd0>)
 800193e:	f001 f859 	bl	80029f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_I2C_MspInit+0xc8>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	4a08      	ldr	r2, [pc, #32]	@ (800196c <HAL_I2C_MspInit+0xc8>)
 800194c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001950:	6413      	str	r3, [r2, #64]	@ 0x40
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_I2C_MspInit+0xc8>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	@ 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40005c00 	.word	0x40005c00
 800196c:	40023800 	.word	0x40023800
 8001970:	40020800 	.word	0x40020800
 8001974:	40020000 	.word	0x40020000

08001978 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b09a      	sub	sp, #104	@ 0x68
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001994:	2230      	movs	r2, #48	@ 0x30
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f004 f8f5 	bl	8005b88 <memset>
  if(hltdc->Instance==LTDC)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a81      	ldr	r2, [pc, #516]	@ (8001ba8 <HAL_LTDC_MspInit+0x230>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	f040 80fa 	bne.w	8001b9e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80019aa:	2308      	movs	r3, #8
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80019ae:	2332      	movs	r3, #50	@ 0x32
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80019b6:	2300      	movs	r3, #0
 80019b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fa38 	bl	8004e34 <HAL_RCCEx_PeriphCLKConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80019ca:	f7ff ff3d 	bl	8001848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
 80019d2:	4b76      	ldr	r3, [pc, #472]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a75      	ldr	r2, [pc, #468]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 80019d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b73      	ldr	r3, [pc, #460]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019e6:	623b      	str	r3, [r7, #32]
 80019e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	4b6f      	ldr	r3, [pc, #444]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a6e      	ldr	r2, [pc, #440]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 80019f4:	f043 0320 	orr.w	r3, r3, #32
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b6c      	ldr	r3, [pc, #432]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	4b68      	ldr	r3, [pc, #416]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a67      	ldr	r2, [pc, #412]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b65      	ldr	r3, [pc, #404]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	4b61      	ldr	r3, [pc, #388]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a60      	ldr	r2, [pc, #384]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b5e      	ldr	r3, [pc, #376]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b5a      	ldr	r3, [pc, #360]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a59      	ldr	r2, [pc, #356]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b57      	ldr	r3, [pc, #348]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b53      	ldr	r3, [pc, #332]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a52      	ldr	r2, [pc, #328]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b50      	ldr	r3, [pc, #320]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a4b      	ldr	r2, [pc, #300]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b49      	ldr	r3, [pc, #292]	@ (8001bac <HAL_LTDC_MspInit+0x234>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a96:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001aa4:	230e      	movs	r3, #14
 8001aa6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001aa8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aac:	4619      	mov	r1, r3
 8001aae:	4840      	ldr	r0, [pc, #256]	@ (8001bb0 <HAL_LTDC_MspInit+0x238>)
 8001ab0:	f000 ffa0 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001ab4:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001ab8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ac6:	230e      	movs	r3, #14
 8001ac8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4838      	ldr	r0, [pc, #224]	@ (8001bb4 <HAL_LTDC_MspInit+0x23c>)
 8001ad2:	f000 ff8f 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ae6:	2309      	movs	r3, #9
 8001ae8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aee:	4619      	mov	r1, r3
 8001af0:	4831      	ldr	r0, [pc, #196]	@ (8001bb8 <HAL_LTDC_MspInit+0x240>)
 8001af2:	f000 ff7f 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001af6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001afa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b08:	230e      	movs	r3, #14
 8001b0a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b10:	4619      	mov	r1, r3
 8001b12:	4829      	ldr	r0, [pc, #164]	@ (8001bb8 <HAL_LTDC_MspInit+0x240>)
 8001b14:	f000 ff6e 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001b18:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001b1c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b2a:	230e      	movs	r3, #14
 8001b2c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b32:	4619      	mov	r1, r3
 8001b34:	4821      	ldr	r0, [pc, #132]	@ (8001bbc <HAL_LTDC_MspInit+0x244>)
 8001b36:	f000 ff5d 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001b3a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001b3e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b4c:	230e      	movs	r3, #14
 8001b4e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b54:	4619      	mov	r1, r3
 8001b56:	481a      	ldr	r0, [pc, #104]	@ (8001bc0 <HAL_LTDC_MspInit+0x248>)
 8001b58:	f000 ff4c 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001b5c:	2348      	movs	r3, #72	@ 0x48
 8001b5e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b6c:	230e      	movs	r3, #14
 8001b6e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b74:	4619      	mov	r1, r3
 8001b76:	4813      	ldr	r0, [pc, #76]	@ (8001bc4 <HAL_LTDC_MspInit+0x24c>)
 8001b78:	f000 ff3c 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001b7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b80:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b8e:	2309      	movs	r3, #9
 8001b90:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b92:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b96:	4619      	mov	r1, r3
 8001b98:	4808      	ldr	r0, [pc, #32]	@ (8001bbc <HAL_LTDC_MspInit+0x244>)
 8001b9a:	f000 ff2b 	bl	80029f4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3768      	adds	r7, #104	@ 0x68
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40016800 	.word	0x40016800
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40021400 	.word	0x40021400
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40021800 	.word	0x40021800
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020c00 	.word	0x40020c00

08001bc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <HAL_SPI_MspInit+0x84>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12c      	bne.n	8001c44 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <HAL_SPI_MspInit+0x88>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <HAL_SPI_MspInit+0x88>)
 8001bf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_SPI_MspInit+0x88>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_SPI_MspInit+0x88>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4a10      	ldr	r2, [pc, #64]	@ (8001c50 <HAL_SPI_MspInit+0x88>)
 8001c10:	f043 0320 	orr.w	r3, r3, #32
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <HAL_SPI_MspInit+0x88>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001c22:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c34:	2305      	movs	r3, #5
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <HAL_SPI_MspInit+0x8c>)
 8001c40:	f000 fed8 	bl	80029f4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	@ 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40015000 	.word	0x40015000
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40021400 	.word	0x40021400

08001c58 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <HAL_SPI_MspDeInit+0x30>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10a      	bne.n	8001c80 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001c6a:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <HAL_SPI_MspDeInit+0x34>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <HAL_SPI_MspDeInit+0x34>)
 8001c70:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c74:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001c76:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001c7a:	4805      	ldr	r0, [pc, #20]	@ (8001c90 <HAL_SPI_MspDeInit+0x38>)
 8001c7c:	f001 f866 	bl	8002d4c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40015000 	.word	0x40015000
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40021400 	.word	0x40021400

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <NMI_Handler+0x4>

08001c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <HardFault_Handler+0x4>

08001ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <MemManage_Handler+0x4>

08001cac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cea:	f000 fcb7 	bl	800265c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_DAC_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	@ (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001d42:	f000 f9dd 	bl	8002100 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001d46:	f000 f99d 	bl	8002084 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	2103      	movs	r1, #3
 8001d4e:	2082      	movs	r0, #130	@ 0x82
 8001d50:	f000 fa2a 	bl	80021a8 <I2C3_Write>
    HAL_Delay(5);
 8001d54:	2005      	movs	r0, #5
 8001d56:	f000 fca1 	bl	800269c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2103      	movs	r1, #3
 8001d5e:	2082      	movs	r0, #130	@ 0x82
 8001d60:	f000 fa22 	bl	80021a8 <I2C3_Write>
    HAL_Delay(2);
 8001d64:	2002      	movs	r0, #2
 8001d66:	f000 fc99 	bl	800269c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001d6a:	1cba      	adds	r2, r7, #2
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2082      	movs	r0, #130	@ 0x82
 8001d72:	f000 fa69 	bl	8002248 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001d7c:	887b      	ldrh	r3, [r7, #2]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	f640 0211 	movw	r2, #2065	@ 0x811
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d001      	beq.n	8001d96 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e095      	b.n	8001ec2 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001d96:	2202      	movs	r2, #2
 8001d98:	2103      	movs	r1, #3
 8001d9a:	2082      	movs	r0, #130	@ 0x82
 8001d9c:	f000 fa04 	bl	80021a8 <I2C3_Write>
    HAL_Delay(5);
 8001da0:	2005      	movs	r0, #5
 8001da2:	f000 fc7b 	bl	800269c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2103      	movs	r1, #3
 8001daa:	2082      	movs	r0, #130	@ 0x82
 8001dac:	f000 f9fc 	bl	80021a8 <I2C3_Write>
    HAL_Delay(2);
 8001db0:	2002      	movs	r0, #2
 8001db2:	f000 fc73 	bl	800269c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001db6:	2004      	movs	r0, #4
 8001db8:	f000 f887 	bl	8001eca <STMPE811_Read>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8001dc0:	797b      	ldrb	r3, [r7, #5]
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001dc8:	797b      	ldrb	r3, [r7, #5]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2104      	movs	r1, #4
 8001dce:	2082      	movs	r0, #130	@ 0x82
 8001dd0:	f000 f9ea 	bl	80021a8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001dd4:	2004      	movs	r0, #4
 8001dd6:	f000 f878 	bl	8001eca <STMPE811_Read>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8001dde:	797b      	ldrb	r3, [r7, #5]
 8001de0:	f023 0302 	bic.w	r3, r3, #2
 8001de4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001de6:	797b      	ldrb	r3, [r7, #5]
 8001de8:	461a      	mov	r2, r3
 8001dea:	2104      	movs	r1, #4
 8001dec:	2082      	movs	r0, #130	@ 0x82
 8001dee:	f000 f9db 	bl	80021a8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8001df2:	2249      	movs	r2, #73	@ 0x49
 8001df4:	2120      	movs	r1, #32
 8001df6:	2082      	movs	r0, #130	@ 0x82
 8001df8:	f000 f9d6 	bl	80021a8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f000 fc4d 	bl	800269c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8001e02:	2201      	movs	r2, #1
 8001e04:	2121      	movs	r1, #33	@ 0x21
 8001e06:	2082      	movs	r0, #130	@ 0x82
 8001e08:	f000 f9ce 	bl	80021a8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8001e0c:	2017      	movs	r0, #23
 8001e0e:	f000 f85c 	bl	8001eca <STMPE811_Read>
 8001e12:	4603      	mov	r3, r0
 8001e14:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8001e16:	797b      	ldrb	r3, [r7, #5]
 8001e18:	f043 031e 	orr.w	r3, r3, #30
 8001e1c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8001e1e:	797b      	ldrb	r3, [r7, #5]
 8001e20:	461a      	mov	r2, r3
 8001e22:	2117      	movs	r1, #23
 8001e24:	2082      	movs	r0, #130	@ 0x82
 8001e26:	f000 f9bf 	bl	80021a8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8001e2a:	229a      	movs	r2, #154	@ 0x9a
 8001e2c:	2141      	movs	r1, #65	@ 0x41
 8001e2e:	2082      	movs	r0, #130	@ 0x82
 8001e30:	f000 f9ba 	bl	80021a8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8001e34:	2201      	movs	r2, #1
 8001e36:	214a      	movs	r1, #74	@ 0x4a
 8001e38:	2082      	movs	r0, #130	@ 0x82
 8001e3a:	f000 f9b5 	bl	80021a8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	214b      	movs	r1, #75	@ 0x4b
 8001e42:	2082      	movs	r0, #130	@ 0x82
 8001e44:	f000 f9b0 	bl	80021a8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	214b      	movs	r1, #75	@ 0x4b
 8001e4c:	2082      	movs	r0, #130	@ 0x82
 8001e4e:	f000 f9ab 	bl	80021a8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8001e52:	2201      	movs	r2, #1
 8001e54:	2156      	movs	r1, #86	@ 0x56
 8001e56:	2082      	movs	r0, #130	@ 0x82
 8001e58:	f000 f9a6 	bl	80021a8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2158      	movs	r1, #88	@ 0x58
 8001e60:	2082      	movs	r0, #130	@ 0x82
 8001e62:	f000 f9a1 	bl	80021a8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8001e66:	2203      	movs	r2, #3
 8001e68:	2140      	movs	r1, #64	@ 0x40
 8001e6a:	2082      	movs	r0, #130	@ 0x82
 8001e6c:	f000 f99c 	bl	80021a8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001e70:	22ff      	movs	r2, #255	@ 0xff
 8001e72:	210b      	movs	r1, #11
 8001e74:	2082      	movs	r0, #130	@ 0x82
 8001e76:	f000 f997 	bl	80021a8 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8001e7a:	f000 f8c1 	bl	8002000 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8001e7e:	2009      	movs	r0, #9
 8001e80:	f000 f823 	bl	8001eca <STMPE811_Read>
 8001e84:	4603      	mov	r3, r0
 8001e86:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8001e88:	797b      	ldrb	r3, [r7, #5]
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8001e90:	797b      	ldrb	r3, [r7, #5]
 8001e92:	461a      	mov	r2, r3
 8001e94:	2109      	movs	r1, #9
 8001e96:	2082      	movs	r0, #130	@ 0x82
 8001e98:	f000 f986 	bl	80021a8 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8001e9c:	200a      	movs	r0, #10
 8001e9e:	f000 f814 	bl	8001eca <STMPE811_Read>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8001ea6:	797b      	ldrb	r3, [r7, #5]
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8001eae:	797b      	ldrb	r3, [r7, #5]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	210a      	movs	r1, #10
 8001eb4:	2082      	movs	r0, #130	@ 0x82
 8001eb6:	f000 f977 	bl	80021a8 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8001eba:	20c8      	movs	r0, #200	@ 0xc8
 8001ebc:	f000 fbee 	bl	800269c <HAL_Delay>

    return STMPE811_State_Ok;
 8001ec0:	2302      	movs	r3, #2

}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8001ed4:	f107 020f 	add.w	r2, r7, #15
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4619      	mov	r1, r3
 8001edc:	2082      	movs	r0, #130	@ 0x82
 8001ede:	f000 f98d 	bl	80021fc <I2C3_Read>

    return readData;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8001efc:	79ba      	ldrb	r2, [r7, #6]
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	4619      	mov	r1, r3
 8001f02:	2082      	movs	r0, #130	@ 0x82
 8001f04:	f000 f950 	bl	80021a8 <I2C3_Write>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	799b      	ldrb	r3, [r3, #6]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d117      	bne.n	8001f50 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f9b1 	bl	800228c <TM_STMPE811_ReadX>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	885b      	ldrh	r3, [r3, #2]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fa04 	bl	8002348 <TM_STMPE811_ReadY>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001f46:	3301      	adds	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	805a      	strh	r2, [r3, #2]
 8001f4e:	e048      	b.n	8001fe2 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	799b      	ldrb	r3, [r3, #6]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d112      	bne.n	8001f7e <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f995 	bl	800228c <TM_STMPE811_ReadX>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	885b      	ldrh	r3, [r3, #2]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f9ea 	bl	8002348 <TM_STMPE811_ReadY>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	805a      	strh	r2, [r3, #2]
 8001f7c:	e031      	b.n	8001fe2 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	799b      	ldrb	r3, [r3, #6]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d115      	bne.n	8001fb2 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	885b      	ldrh	r3, [r3, #2]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f97e 	bl	800228c <TM_STMPE811_ReadX>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f9d3 	bl	8002348 <TM_STMPE811_ReadY>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001fa8:	3301      	adds	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	801a      	strh	r2, [r3, #0]
 8001fb0:	e017      	b.n	8001fe2 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	799b      	ldrb	r3, [r3, #6]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d113      	bne.n	8001fe2 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f964 	bl	800228c <TM_STMPE811_ReadX>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 f9b7 	bl	8002348 <TM_STMPE811_ReadY>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	214b      	movs	r1, #75	@ 0x4b
 8001fe6:	2082      	movs	r0, #130	@ 0x82
 8001fe8:	f000 f8de 	bl	80021a8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001fec:	2200      	movs	r2, #0
 8001fee:	214b      	movs	r1, #75	@ 0x4b
 8001ff0:	2082      	movs	r0, #130	@ 0x82
 8001ff2:	f000 f8d9 	bl	80021a8 <I2C3_Write>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <enableInterruptSupportForTouch+0x5c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a13      	ldr	r2, [pc, #76]	@ (800205c <enableInterruptSupportForTouch+0x5c>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <enableInterruptSupportForTouch+0x5c>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002030:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002034:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002036:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800203a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002040:	2302      	movs	r3, #2
 8002042:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4805      	ldr	r0, [pc, #20]	@ (8002060 <enableInterruptSupportForTouch+0x60>)
 800204a:	f000 fcd3 	bl	80029f4 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 800204e:	2028      	movs	r0, #40	@ 0x28
 8002050:	f7ff fe56 	bl	8001d00 <__NVIC_EnableIRQ>

}
 8002054:	bf00      	nop
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	40020000 	.word	0x40020000

08002064 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20025a40 	.word	0x20025a40

08002084 <I2C3_Init>:

static void I2C3_Init()
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <I2C3_Init+0x6c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	4a17      	ldr	r2, [pc, #92]	@ (80020f0 <I2C3_Init+0x6c>)
 8002094:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002098:	6413      	str	r3, [r2, #64]	@ 0x40
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <I2C3_Init+0x6c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80020a6:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <I2C3_Init+0x70>)
 80020a8:	4a13      	ldr	r2, [pc, #76]	@ (80020f8 <I2C3_Init+0x74>)
 80020aa:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80020ac:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <I2C3_Init+0x70>)
 80020ae:	4a13      	ldr	r2, [pc, #76]	@ (80020fc <I2C3_Init+0x78>)
 80020b0:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <I2C3_Init+0x70>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80020b8:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <I2C3_Init+0x70>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020be:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <I2C3_Init+0x70>)
 80020c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020c4:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <I2C3_Init+0x70>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020cc:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <I2C3_Init+0x70>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80020d2:	4808      	ldr	r0, [pc, #32]	@ (80020f4 <I2C3_Init+0x70>)
 80020d4:	f000 ff60 	bl	8002f98 <HAL_I2C_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80020e2:	bf00      	nop
 80020e4:	e7fd      	b.n	80020e2 <I2C3_Init+0x5e>
    }
    return;
 80020e6:	bf00      	nop
}
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800
 80020f4:	200259ec 	.word	0x200259ec
 80020f8:	40005c00 	.word	0x40005c00
 80020fc:	000186a0 	.word	0x000186a0

08002100 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b20      	ldr	r3, [pc, #128]	@ (800219c <I2C3_MspInit+0x9c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	4a1f      	ldr	r2, [pc, #124]	@ (800219c <I2C3_MspInit+0x9c>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6313      	str	r3, [r2, #48]	@ 0x30
 8002126:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <I2C3_MspInit+0x9c>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b19      	ldr	r3, [pc, #100]	@ (800219c <I2C3_MspInit+0x9c>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a18      	ldr	r2, [pc, #96]	@ (800219c <I2C3_MspInit+0x9c>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b16      	ldr	r3, [pc, #88]	@ (800219c <I2C3_MspInit+0x9c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800214e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002152:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002154:	2312      	movs	r3, #18
 8002156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002160:	2304      	movs	r3, #4
 8002162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	4619      	mov	r1, r3
 800216a:	480d      	ldr	r0, [pc, #52]	@ (80021a0 <I2C3_MspInit+0xa0>)
 800216c:	f000 fc42 	bl	80029f4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002174:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002176:	2312      	movs	r3, #18
 8002178:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002182:	2304      	movs	r3, #4
 8002184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	4619      	mov	r1, r3
 800218c:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <I2C3_MspInit+0xa4>)
 800218e:	f000 fc31 	bl	80029f4 <HAL_GPIO_Init>
    
}
 8002192:	bf00      	nop
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40020000 	.word	0x40020000

080021a8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af04      	add	r7, sp, #16
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
 80021b2:	460b      	mov	r3, r1
 80021b4:	717b      	strb	r3, [r7, #5]
 80021b6:	4613      	mov	r3, r2
 80021b8:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80021ba:	793b      	ldrb	r3, [r7, #4]
 80021bc:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80021be:	797b      	ldrb	r3, [r7, #5]
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	88f9      	ldrh	r1, [r7, #6]
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <I2C3_Write+0x48>)
 80021c6:	9302      	str	r3, [sp, #8]
 80021c8:	2301      	movs	r3, #1
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	f107 030f 	add.w	r3, r7, #15
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	2301      	movs	r3, #1
 80021d4:	4807      	ldr	r0, [pc, #28]	@ (80021f4 <I2C3_Write+0x4c>)
 80021d6:	f001 f823 	bl	8003220 <HAL_I2C_Mem_Write>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <I2C3_Write+0x50>)
 80021e0:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80021e2:	f7ff ff3f 	bl	8002064 <verifyHAL_I2C_IS_OKAY>
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	0003d090 	.word	0x0003d090
 80021f4:	200259ec 	.word	0x200259ec
 80021f8:	20025a40 	.word	0x20025a40

080021fc <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af04      	add	r7, sp, #16
 8002202:	4603      	mov	r3, r0
 8002204:	603a      	str	r2, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
 8002208:	460b      	mov	r3, r1
 800220a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	b299      	uxth	r1, r3
 8002210:	79bb      	ldrb	r3, [r7, #6]
 8002212:	b29a      	uxth	r2, r3
 8002214:	4b09      	ldr	r3, [pc, #36]	@ (800223c <I2C3_Read+0x40>)
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	2301      	movs	r3, #1
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2301      	movs	r3, #1
 8002222:	4807      	ldr	r0, [pc, #28]	@ (8002240 <I2C3_Read+0x44>)
 8002224:	f001 f8f6 	bl	8003414 <HAL_I2C_Mem_Read>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <I2C3_Read+0x48>)
 800222e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002230:	f7ff ff18 	bl	8002064 <verifyHAL_I2C_IS_OKAY>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	0003d090 	.word	0x0003d090
 8002240:	200259ec 	.word	0x200259ec
 8002244:	20025a40 	.word	0x20025a40

08002248 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af04      	add	r7, sp, #16
 800224e:	603a      	str	r2, [r7, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
 8002256:	460b      	mov	r3, r1
 8002258:	71bb      	strb	r3, [r7, #6]
 800225a:	4613      	mov	r3, r2
 800225c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	b299      	uxth	r1, r3
 8002262:	79bb      	ldrb	r3, [r7, #6]
 8002264:	b29a      	uxth	r2, r3
 8002266:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <I2C3_MulitByteRead+0x3c>)
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	88bb      	ldrh	r3, [r7, #4]
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2301      	movs	r3, #1
 8002274:	4804      	ldr	r0, [pc, #16]	@ (8002288 <I2C3_MulitByteRead+0x40>)
 8002276:	f001 f8cd 	bl	8003414 <HAL_I2C_Mem_Read>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	0003d090 	.word	0x0003d090
 8002288:	200259ec 	.word	0x200259ec

0800228c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002296:	204d      	movs	r0, #77	@ 0x4d
 8002298:	f7ff fe17 	bl	8001eca <STMPE811_Read>
 800229c:	4603      	mov	r3, r0
 800229e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80022a0:	204e      	movs	r0, #78	@ 0x4e
 80022a2:	f7ff fe12 	bl	8001eca <STMPE811_Read>
 80022a6:	4603      	mov	r3, r0
 80022a8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80022aa:	7a7b      	ldrb	r3, [r7, #9]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	7a3b      	ldrb	r3, [r7, #8]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80022b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022bc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80022c0:	4293      	cmp	r3, r2
 80022c2:	dc06      	bgt.n	80022d2 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80022c4:	89fb      	ldrh	r3, [r7, #14]
 80022c6:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80022ca:	330c      	adds	r3, #12
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	81fb      	strh	r3, [r7, #14]
 80022d0:	e005      	b.n	80022de <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80022d2:	89fb      	ldrh	r3, [r7, #14]
 80022d4:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80022d8:	3308      	adds	r3, #8
 80022da:	b29b      	uxth	r3, r3
 80022dc:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80022de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e2:	4a18      	ldr	r2, [pc, #96]	@ (8002344 <TM_STMPE811_ReadX+0xb8>)
 80022e4:	fb82 1203 	smull	r1, r2, r2, r3
 80022e8:	441a      	add	r2, r3
 80022ea:	10d2      	asrs	r2, r2, #3
 80022ec:	17db      	asrs	r3, r3, #31
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80022f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022f6:	2bef      	cmp	r3, #239	@ 0xef
 80022f8:	dd02      	ble.n	8002300 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80022fa:	23ef      	movs	r3, #239	@ 0xef
 80022fc:	81fb      	strh	r3, [r7, #14]
 80022fe:	e005      	b.n	800230c <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002300:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002304:	2b00      	cmp	r3, #0
 8002306:	da01      	bge.n	800230c <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 800230c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	429a      	cmp	r2, r3
 8002314:	dd05      	ble.n	8002322 <TM_STMPE811_ReadX+0x96>
 8002316:	89fa      	ldrh	r2, [r7, #14]
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	b29b      	uxth	r3, r3
 800231e:	b21b      	sxth	r3, r3
 8002320:	e004      	b.n	800232c <TM_STMPE811_ReadX+0xa0>
 8002322:	89fb      	ldrh	r3, [r7, #14]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	b29b      	uxth	r3, r3
 800232a:	b21b      	sxth	r3, r3
 800232c:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800232e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002332:	2b04      	cmp	r3, #4
 8002334:	dd01      	ble.n	800233a <TM_STMPE811_ReadX+0xae>
        return val;
 8002336:	89fb      	ldrh	r3, [r7, #14]
 8002338:	e000      	b.n	800233c <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800233a:	88fb      	ldrh	r3, [r7, #6]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	88888889 	.word	0x88888889

08002348 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002352:	204f      	movs	r0, #79	@ 0x4f
 8002354:	f7ff fdb9 	bl	8001eca <STMPE811_Read>
 8002358:	4603      	mov	r3, r0
 800235a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 800235c:	2050      	movs	r0, #80	@ 0x50
 800235e:	f7ff fdb4 	bl	8001eca <STMPE811_Read>
 8002362:	4603      	mov	r3, r0
 8002364:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002366:	7a7b      	ldrb	r3, [r7, #9]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	b21a      	sxth	r2, r3
 800236c:	7a3b      	ldrb	r3, [r7, #8]
 800236e:	b21b      	sxth	r3, r3
 8002370:	4313      	orrs	r3, r2
 8002372:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002374:	89fb      	ldrh	r3, [r7, #14]
 8002376:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800237a:	b29b      	uxth	r3, r3
 800237c:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800237e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002382:	4a19      	ldr	r2, [pc, #100]	@ (80023e8 <TM_STMPE811_ReadY+0xa0>)
 8002384:	fb82 1203 	smull	r1, r2, r2, r3
 8002388:	1052      	asrs	r2, r2, #1
 800238a:	17db      	asrs	r3, r3, #31
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002390:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002394:	2b00      	cmp	r3, #0
 8002396:	dc02      	bgt.n	800239e <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	81fb      	strh	r3, [r7, #14]
 800239c:	e007      	b.n	80023ae <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800239e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023a2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80023a6:	db02      	blt.n	80023ae <TM_STMPE811_ReadY+0x66>
        val = 319;
 80023a8:	f240 133f 	movw	r3, #319	@ 0x13f
 80023ac:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80023ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	dd05      	ble.n	80023c4 <TM_STMPE811_ReadY+0x7c>
 80023b8:	89fa      	ldrh	r2, [r7, #14]
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	b29b      	uxth	r3, r3
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	e004      	b.n	80023ce <TM_STMPE811_ReadY+0x86>
 80023c4:	89fb      	ldrh	r3, [r7, #14]
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80023d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	dd01      	ble.n	80023dc <TM_STMPE811_ReadY+0x94>
        return val;
 80023d8:	89fb      	ldrh	r3, [r7, #14]
 80023da:	e000      	b.n	80023de <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80023dc:	88fb      	ldrh	r3, [r7, #6]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2e8ba2e9 	.word	0x2e8ba2e9

080023ec <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e00a      	b.n	8002422 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800240c:	f3af 8000 	nop.w
 8002410:	4601      	mov	r1, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	60ba      	str	r2, [r7, #8]
 8002418:	b2ca      	uxtb	r2, r1
 800241a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	dbf0      	blt.n	800240c <_read+0x12>
  }

  return len;
 800242a:	687b      	ldr	r3, [r7, #4]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e009      	b.n	800245a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	60ba      	str	r2, [r7, #8]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3301      	adds	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	dbf1      	blt.n	8002446 <_write+0x12>
  }
  return len;
 8002462:	687b      	ldr	r3, [r7, #4]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <_close>:

int _close(int file)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002494:	605a      	str	r2, [r3, #4]
  return 0;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_isatty>:

int _isatty(int file)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <_sbrk+0x5c>)
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <_sbrk+0x60>)
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e8:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f0:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <_sbrk+0x64>)
 80024f2:	4a12      	ldr	r2, [pc, #72]	@ (800253c <_sbrk+0x68>)
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f6:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d207      	bcs.n	8002514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002504:	f003 fb8e 	bl	8005c24 <__errno>
 8002508:	4603      	mov	r3, r0
 800250a:	220c      	movs	r2, #12
 800250c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002512:	e009      	b.n	8002528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <_sbrk+0x64>)
 8002524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20030000 	.word	0x20030000
 8002534:	00000400 	.word	0x00000400
 8002538:	20025a44 	.word	0x20025a44
 800253c:	20025b98 	.word	0x20025b98

08002540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <SystemInit+0x20>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254a:	4a05      	ldr	r2, [pc, #20]	@ (8002560 <SystemInit+0x20>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002564:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800259c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002568:	f7ff ffea 	bl	8002540 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800256c:	480c      	ldr	r0, [pc, #48]	@ (80025a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800256e:	490d      	ldr	r1, [pc, #52]	@ (80025a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002570:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002574:	e002      	b.n	800257c <LoopCopyDataInit>

08002576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257a:	3304      	adds	r3, #4

0800257c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800257c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002580:	d3f9      	bcc.n	8002576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002584:	4c0a      	ldr	r4, [pc, #40]	@ (80025b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002588:	e001      	b.n	800258e <LoopFillZerobss>

0800258a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800258c:	3204      	adds	r2, #4

0800258e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002590:	d3fb      	bcc.n	800258a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002592:	f003 fb4d 	bl	8005c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002596:	f7ff f906 	bl	80017a6 <main>
  bx  lr    
 800259a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800259c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80025a8:	08007928 	.word	0x08007928
  ldr r2, =_sbss
 80025ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80025b0:	20025b98 	.word	0x20025b98

080025b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b4:	e7fe      	b.n	80025b4 <ADC_IRQHandler>
	...

080025b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025bc:	4b0e      	ldr	r3, [pc, #56]	@ (80025f8 <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0d      	ldr	r2, [pc, #52]	@ (80025f8 <HAL_Init+0x40>)
 80025c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_Init+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <HAL_Init+0x40>)
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d4:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <HAL_Init+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a07      	ldr	r2, [pc, #28]	@ (80025f8 <HAL_Init+0x40>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e0:	2003      	movs	r0, #3
 80025e2:	f000 f991 	bl	8002908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f000 f808 	bl	80025fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ec:	f7ff f932 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00

080025fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_InitTick+0x54>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <HAL_InitTick+0x58>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002612:	fbb3 f3f1 	udiv	r3, r3, r1
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f9b7 	bl	800298e <HAL_SYSTICK_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e00e      	b.n	8002648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b0f      	cmp	r3, #15
 800262e:	d80a      	bhi.n	8002646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002630:	2200      	movs	r2, #0
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002638:	f000 f971 	bl	800291e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800263c:	4a06      	ldr	r2, [pc, #24]	@ (8002658 <HAL_InitTick+0x5c>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000010 	.word	0x20000010
 8002654:	20000018 	.word	0x20000018
 8002658:	20000014 	.word	0x20000014

0800265c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_IncTick+0x20>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_IncTick+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4413      	add	r3, r2
 800266c:	4a04      	ldr	r2, [pc, #16]	@ (8002680 <HAL_IncTick+0x24>)
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000018 	.word	0x20000018
 8002680:	20025a48 	.word	0x20025a48

08002684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <HAL_GetTick+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20025a48 	.word	0x20025a48

0800269c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff ffee 	bl	8002684 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026b4:	d005      	beq.n	80026c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <HAL_Delay+0x44>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026c2:	bf00      	nop
 80026c4:	f7ff ffde 	bl	8002684 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d8f7      	bhi.n	80026c4 <HAL_Delay+0x28>
  {
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000018 	.word	0x20000018

080026e4 <__NVIC_SetPriorityGrouping>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4907      	ldr	r1, [pc, #28]	@ (8002780 <__NVIC_EnableIRQ+0x38>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db12      	blt.n	80027bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	490a      	ldr	r1, [pc, #40]	@ (80027c8 <__NVIC_DisableIRQ+0x44>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2001      	movs	r0, #1
 80027a6:	fa00 f202 	lsl.w	r2, r0, r2
 80027aa:	3320      	adds	r3, #32
 80027ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80027b0:	f3bf 8f4f 	dsb	sy
}
 80027b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027b6:	f3bf 8f6f 	isb	sy
}
 80027ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db0c      	blt.n	80027f8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	4907      	ldr	r1, [pc, #28]	@ (8002804 <__NVIC_ClearPendingIRQ+0x38>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2001      	movs	r0, #1
 80027ee:	fa00 f202 	lsl.w	r2, r0, r2
 80027f2:	3360      	adds	r3, #96	@ 0x60
 80027f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	@ (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	@ (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	@ 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	@ 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d4:	d301      	bcc.n	80028da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00f      	b.n	80028fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028da:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <SysTick_Config+0x40>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e2:	210f      	movs	r1, #15
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028e8:	f7ff ff8e 	bl	8002808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <SysTick_Config+0x40>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f2:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <SysTick_Config+0x40>)
 80028f4:	2207      	movs	r2, #7
 80028f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	e000e010 	.word	0xe000e010

08002908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fee7 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002930:	f7ff fefc 	bl	800272c <__NVIC_GetPriorityGrouping>
 8002934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	f7ff ff8e 	bl	800285c <NVIC_EncodePriority>
 8002940:	4602      	mov	r2, r0
 8002942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff5d 	bl	8002808 <__NVIC_SetPriority>
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff feef 	bl	8002748 <__NVIC_EnableIRQ>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff feff 	bl	8002784 <__NVIC_DisableIRQ>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff94 	bl	80028c4 <SysTick_Config>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff09 	bl	80027cc <__NVIC_ClearPendingIRQ>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2201      	movs	r2, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80029de:	4a04      	ldr	r2, [pc, #16]	@ (80029f0 <HAL_EXTI_ClearPending+0x2c>)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6153      	str	r3, [r2, #20]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40013c00 	.word	0x40013c00

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	@ 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e177      	b.n	8002d00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f040 8166 	bne.w	8002cfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d005      	beq.n	8002a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d130      	bne.n	8002aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 0201 	and.w	r2, r3, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d017      	beq.n	8002ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d123      	bne.n	8002b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80c0 	beq.w	8002cfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b66      	ldr	r3, [pc, #408]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	4a65      	ldr	r2, [pc, #404]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8a:	4b63      	ldr	r3, [pc, #396]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b96:	4a61      	ldr	r2, [pc, #388]	@ (8002d1c <HAL_GPIO_Init+0x328>)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	@ (8002d20 <HAL_GPIO_Init+0x32c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d037      	beq.n	8002c32 <HAL_GPIO_Init+0x23e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a57      	ldr	r2, [pc, #348]	@ (8002d24 <HAL_GPIO_Init+0x330>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d031      	beq.n	8002c2e <HAL_GPIO_Init+0x23a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a56      	ldr	r2, [pc, #344]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02b      	beq.n	8002c2a <HAL_GPIO_Init+0x236>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a55      	ldr	r2, [pc, #340]	@ (8002d2c <HAL_GPIO_Init+0x338>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d025      	beq.n	8002c26 <HAL_GPIO_Init+0x232>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a54      	ldr	r2, [pc, #336]	@ (8002d30 <HAL_GPIO_Init+0x33c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01f      	beq.n	8002c22 <HAL_GPIO_Init+0x22e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a53      	ldr	r2, [pc, #332]	@ (8002d34 <HAL_GPIO_Init+0x340>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_GPIO_Init+0x22a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a52      	ldr	r2, [pc, #328]	@ (8002d38 <HAL_GPIO_Init+0x344>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x226>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a51      	ldr	r2, [pc, #324]	@ (8002d3c <HAL_GPIO_Init+0x348>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x222>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a50      	ldr	r2, [pc, #320]	@ (8002d40 <HAL_GPIO_Init+0x34c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x21e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4f      	ldr	r2, [pc, #316]	@ (8002d44 <HAL_GPIO_Init+0x350>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x21a>
 8002c0a:	2309      	movs	r3, #9
 8002c0c:	e012      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c0e:	230a      	movs	r3, #10
 8002c10:	e010      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c12:	2308      	movs	r3, #8
 8002c14:	e00e      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c16:	2307      	movs	r3, #7
 8002c18:	e00c      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c1a:	2306      	movs	r3, #6
 8002c1c:	e00a      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c1e:	2305      	movs	r3, #5
 8002c20:	e008      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c22:	2304      	movs	r3, #4
 8002c24:	e006      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c26:	2303      	movs	r3, #3
 8002c28:	e004      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e002      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c32:	2300      	movs	r3, #0
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	f002 0203 	and.w	r2, r2, #3
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	4093      	lsls	r3, r2
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c44:	4935      	ldr	r1, [pc, #212]	@ (8002d1c <HAL_GPIO_Init+0x328>)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c52:	4b3d      	ldr	r3, [pc, #244]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c76:	4a34      	ldr	r2, [pc, #208]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c7c:	4b32      	ldr	r3, [pc, #200]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca0:	4a29      	ldr	r2, [pc, #164]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ca6:	4b28      	ldr	r3, [pc, #160]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cca:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf4:	4a14      	ldr	r2, [pc, #80]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b0f      	cmp	r3, #15
 8002d04:	f67f ae84 	bls.w	8002a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3724      	adds	r7, #36	@ 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40013800 	.word	0x40013800
 8002d20:	40020000 	.word	0x40020000
 8002d24:	40020400 	.word	0x40020400
 8002d28:	40020800 	.word	0x40020800
 8002d2c:	40020c00 	.word	0x40020c00
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40021400 	.word	0x40021400
 8002d38:	40021800 	.word	0x40021800
 8002d3c:	40021c00 	.word	0x40021c00
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40022400 	.word	0x40022400
 8002d48:	40013c00 	.word	0x40013c00

08002d4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e0d9      	b.n	8002f1c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	f040 80c9 	bne.w	8002f16 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d84:	4a6b      	ldr	r2, [pc, #428]	@ (8002f34 <HAL_GPIO_DeInit+0x1e8>)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d90:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	4013      	ands	r3, r2
 8002da4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a63      	ldr	r2, [pc, #396]	@ (8002f38 <HAL_GPIO_DeInit+0x1ec>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d037      	beq.n	8002e1e <HAL_GPIO_DeInit+0xd2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a62      	ldr	r2, [pc, #392]	@ (8002f3c <HAL_GPIO_DeInit+0x1f0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d031      	beq.n	8002e1a <HAL_GPIO_DeInit+0xce>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a61      	ldr	r2, [pc, #388]	@ (8002f40 <HAL_GPIO_DeInit+0x1f4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02b      	beq.n	8002e16 <HAL_GPIO_DeInit+0xca>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a60      	ldr	r2, [pc, #384]	@ (8002f44 <HAL_GPIO_DeInit+0x1f8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d025      	beq.n	8002e12 <HAL_GPIO_DeInit+0xc6>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a5f      	ldr	r2, [pc, #380]	@ (8002f48 <HAL_GPIO_DeInit+0x1fc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01f      	beq.n	8002e0e <HAL_GPIO_DeInit+0xc2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a5e      	ldr	r2, [pc, #376]	@ (8002f4c <HAL_GPIO_DeInit+0x200>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d019      	beq.n	8002e0a <HAL_GPIO_DeInit+0xbe>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f50 <HAL_GPIO_DeInit+0x204>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_GPIO_DeInit+0xba>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a5c      	ldr	r2, [pc, #368]	@ (8002f54 <HAL_GPIO_DeInit+0x208>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00d      	beq.n	8002e02 <HAL_GPIO_DeInit+0xb6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a5b      	ldr	r2, [pc, #364]	@ (8002f58 <HAL_GPIO_DeInit+0x20c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <HAL_GPIO_DeInit+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f5c <HAL_GPIO_DeInit+0x210>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_GPIO_DeInit+0xae>
 8002df6:	2309      	movs	r3, #9
 8002df8:	e012      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	e010      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	e00e      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e02:	2307      	movs	r3, #7
 8002e04:	e00c      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e06:	2306      	movs	r3, #6
 8002e08:	e00a      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e0a:	2305      	movs	r3, #5
 8002e0c:	e008      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e0e:	2304      	movs	r3, #4
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e12:	2303      	movs	r3, #3
 8002e14:	e004      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	f002 0203 	and.w	r2, r2, #3
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	4093      	lsls	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d132      	bne.n	8002e96 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e30:	4b4b      	ldr	r3, [pc, #300]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	4949      	ldr	r1, [pc, #292]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e3e:	4b48      	ldr	r3, [pc, #288]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	4946      	ldr	r1, [pc, #280]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e4c:	4b44      	ldr	r3, [pc, #272]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	4942      	ldr	r1, [pc, #264]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e5a:	4b41      	ldr	r3, [pc, #260]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	493f      	ldr	r1, [pc, #252]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	220f      	movs	r2, #15
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e78:	4a2e      	ldr	r2, [pc, #184]	@ (8002f34 <HAL_GPIO_DeInit+0x1e8>)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	43da      	mvns	r2, r3
 8002e88:	482a      	ldr	r0, [pc, #168]	@ (8002f34 <HAL_GPIO_DeInit+0x1e8>)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	400a      	ands	r2, r1
 8002e90:	3302      	adds	r3, #2
 8002e92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2103      	movs	r1, #3
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	08da      	lsrs	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3208      	adds	r2, #8
 8002eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	08d2      	lsrs	r2, r2, #3
 8002ecc:	4019      	ands	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3208      	adds	r2, #8
 8002ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2103      	movs	r1, #3
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	401a      	ands	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	2103      	movs	r1, #3
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	401a      	ands	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	f67f af22 	bls.w	8002d68 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40013800 	.word	0x40013800
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	40020400 	.word	0x40020400
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40020c00 	.word	0x40020c00
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40021400 	.word	0x40021400
 8002f50:	40021800 	.word	0x40021800
 8002f54:	40021c00 	.word	0x40021c00
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40022400 	.word	0x40022400
 8002f60:	40013c00 	.word	0x40013c00

08002f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	807b      	strh	r3, [r7, #2]
 8002f70:	4613      	mov	r3, r2
 8002f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f74:	787b      	ldrb	r3, [r7, #1]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f80:	e003      	b.n	8002f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f82:	887b      	ldrh	r3, [r7, #2]
 8002f84:	041a      	lsls	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	619a      	str	r2, [r3, #24]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e12b      	b.n	8003202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fe fc70 	bl	80018a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	@ 0x24
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f001 ff06 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8003000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a81      	ldr	r2, [pc, #516]	@ (800320c <HAL_I2C_Init+0x274>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d807      	bhi.n	800301c <HAL_I2C_Init+0x84>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a80      	ldr	r2, [pc, #512]	@ (8003210 <HAL_I2C_Init+0x278>)
 8003010:	4293      	cmp	r3, r2
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e006      	b.n	800302a <HAL_I2C_Init+0x92>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a7d      	ldr	r2, [pc, #500]	@ (8003214 <HAL_I2C_Init+0x27c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0e7      	b.n	8003202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4a78      	ldr	r2, [pc, #480]	@ (8003218 <HAL_I2C_Init+0x280>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0c9b      	lsrs	r3, r3, #18
 800303c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a6a      	ldr	r2, [pc, #424]	@ (800320c <HAL_I2C_Init+0x274>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d802      	bhi.n	800306c <HAL_I2C_Init+0xd4>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	e009      	b.n	8003080 <HAL_I2C_Init+0xe8>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	4a69      	ldr	r2, [pc, #420]	@ (800321c <HAL_I2C_Init+0x284>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	3301      	adds	r3, #1
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	430b      	orrs	r3, r1
 8003086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003092:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	495c      	ldr	r1, [pc, #368]	@ (800320c <HAL_I2C_Init+0x274>)
 800309c:	428b      	cmp	r3, r1
 800309e:	d819      	bhi.n	80030d4 <HAL_I2C_Init+0x13c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e59      	subs	r1, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030b4:	400b      	ands	r3, r1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_I2C_Init+0x138>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1e59      	subs	r1, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	e051      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d0:	2304      	movs	r3, #4
 80030d2:	e04f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_I2C_Init+0x168>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_I2C_Init+0x18e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x196>
 800312a:	2301      	movs	r3, #1
 800312c:	e022      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <HAL_I2C_Init+0x1bc>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e58      	subs	r0, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	fbb0 f3f3 	udiv	r3, r0, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6809      	ldr	r1, [r1, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6911      	ldr	r1, [r2, #16]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	431bde83 	.word	0x431bde83
 800321c:	10624dd3 	.word	0x10624dd3

08003220 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	817b      	strh	r3, [r7, #10]
 8003232:	460b      	mov	r3, r1
 8003234:	813b      	strh	r3, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800323a:	f7ff fa23 	bl	8002684 <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b20      	cmp	r3, #32
 800324a:	f040 80d9 	bne.w	8003400 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2319      	movs	r3, #25
 8003254:	2201      	movs	r2, #1
 8003256:	496d      	ldr	r1, [pc, #436]	@ (800340c <HAL_I2C_Mem_Write+0x1ec>)
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fc8b 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
 8003266:	e0cc      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_I2C_Mem_Write+0x56>
 8003272:	2302      	movs	r3, #2
 8003274:	e0c5      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d007      	beq.n	800329c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2221      	movs	r2, #33	@ 0x21
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2240      	movs	r2, #64	@ 0x40
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a3a      	ldr	r2, [r7, #32]
 80032c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a4d      	ldr	r2, [pc, #308]	@ (8003410 <HAL_I2C_Mem_Write+0x1f0>)
 80032dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032de:	88f8      	ldrh	r0, [r7, #6]
 80032e0:	893a      	ldrh	r2, [r7, #8]
 80032e2:	8979      	ldrh	r1, [r7, #10]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4603      	mov	r3, r0
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fac2 	bl	8003878 <I2C_RequestMemoryWrite>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d052      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e081      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fd50 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	2b04      	cmp	r3, #4
 8003314:	d107      	bne.n	8003326 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003324:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06b      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b04      	cmp	r3, #4
 8003366:	d11b      	bne.n	80033a0 <HAL_I2C_Mem_Write+0x180>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d017      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1aa      	bne.n	80032fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fd43 	bl	8003e38 <I2C_WaitOnBTFFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e016      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	00100002 	.word	0x00100002
 8003410:	ffff0000 	.word	0xffff0000

08003414 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08c      	sub	sp, #48	@ 0x30
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	817b      	strh	r3, [r7, #10]
 8003426:	460b      	mov	r3, r1
 8003428:	813b      	strh	r3, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800342e:	f7ff f929 	bl	8002684 <HAL_GetTick>
 8003432:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b20      	cmp	r3, #32
 800343e:	f040 8214 	bne.w	800386a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2319      	movs	r3, #25
 8003448:	2201      	movs	r2, #1
 800344a:	497b      	ldr	r1, [pc, #492]	@ (8003638 <HAL_I2C_Mem_Read+0x224>)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fb91 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
 800345a:	e207      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_I2C_Mem_Read+0x56>
 8003466:	2302      	movs	r3, #2
 8003468:	e200      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d007      	beq.n	8003490 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800349e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2222      	movs	r2, #34	@ 0x22
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2240      	movs	r2, #64	@ 0x40
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a5b      	ldr	r2, [pc, #364]	@ (800363c <HAL_I2C_Mem_Read+0x228>)
 80034d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d2:	88f8      	ldrh	r0, [r7, #6]
 80034d4:	893a      	ldrh	r2, [r7, #8]
 80034d6:	8979      	ldrh	r1, [r7, #10]
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	4603      	mov	r3, r0
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fa5e 	bl	80039a4 <I2C_RequestMemoryRead>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e1bc      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d113      	bne.n	8003522 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	623b      	str	r3, [r7, #32]
 800350e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e190      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003526:	2b01      	cmp	r3, #1
 8003528:	d11b      	bne.n	8003562 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003538:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e170      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003566:	2b02      	cmp	r3, #2
 8003568:	d11b      	bne.n	80035a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003578:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003588:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	e150      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035b8:	e144      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035be:	2b03      	cmp	r3, #3
 80035c0:	f200 80f1 	bhi.w	80037a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d123      	bne.n	8003614 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fc79 	bl	8003ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e145      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003612:	e117      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003618:	2b02      	cmp	r3, #2
 800361a:	d14e      	bne.n	80036ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003622:	2200      	movs	r2, #0
 8003624:	4906      	ldr	r1, [pc, #24]	@ (8003640 <HAL_I2C_Mem_Read+0x22c>)
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 faa4 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e11a      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
 8003636:	bf00      	nop
 8003638:	00100002 	.word	0x00100002
 800363c:	ffff0000 	.word	0xffff0000
 8003640:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036b8:	e0c4      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c0:	2200      	movs	r2, #0
 80036c2:	496c      	ldr	r1, [pc, #432]	@ (8003874 <HAL_I2C_Mem_Read+0x460>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fa55 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0cb      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371c:	2200      	movs	r2, #0
 800371e:	4955      	ldr	r1, [pc, #340]	@ (8003874 <HAL_I2C_Mem_Read+0x460>)
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fa27 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e09d      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800373e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037a4:	e04e      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fb8c 	bl	8003ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e058      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d124      	bne.n	8003844 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d107      	bne.n	8003812 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003810:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003848:	2b00      	cmp	r3, #0
 800384a:	f47f aeb6 	bne.w	80035ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3728      	adds	r7, #40	@ 0x28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	00010004 	.word	0x00010004

08003878 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	4603      	mov	r3, r0
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	460b      	mov	r3, r1
 800388c:	813b      	strh	r3, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f960 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c8:	d103      	bne.n	80038d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e05f      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d6:	897b      	ldrh	r3, [r7, #10]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	6a3a      	ldr	r2, [r7, #32]
 80038ea:	492d      	ldr	r1, [pc, #180]	@ (80039a0 <I2C_RequestMemoryWrite+0x128>)
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f9bb 	bl	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04c      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003914:	6a39      	ldr	r1, [r7, #32]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fa46 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b04      	cmp	r3, #4
 8003928:	d107      	bne.n	800393a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003938:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e02b      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003944:	893b      	ldrh	r3, [r7, #8]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	611a      	str	r2, [r3, #16]
 800394e:	e021      	b.n	8003994 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003950:	893b      	ldrh	r3, [r7, #8]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	b29b      	uxth	r3, r3
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003960:	6a39      	ldr	r1, [r7, #32]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fa20 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2b04      	cmp	r3, #4
 8003974:	d107      	bne.n	8003986 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003984:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e005      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800398a:	893b      	ldrh	r3, [r7, #8]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	00010002 	.word	0x00010002

080039a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f8c2 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a04:	d103      	bne.n	8003a0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e0aa      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	6a3a      	ldr	r2, [r7, #32]
 8003a26:	4952      	ldr	r1, [pc, #328]	@ (8003b70 <I2C_RequestMemoryRead+0x1cc>)
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f91d 	bl	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e097      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a50:	6a39      	ldr	r1, [r7, #32]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f9a8 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00d      	beq.n	8003a7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d107      	bne.n	8003a76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e076      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a80:	893b      	ldrh	r3, [r7, #8]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	611a      	str	r2, [r3, #16]
 8003a8a:	e021      	b.n	8003ad0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a8c:	893b      	ldrh	r3, [r7, #8]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a9c:	6a39      	ldr	r1, [r7, #32]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f982 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e050      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac6:	893b      	ldrh	r3, [r7, #8]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad2:	6a39      	ldr	r1, [r7, #32]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f967 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00d      	beq.n	8003afc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d107      	bne.n	8003af8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e035      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f82b 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b32:	d103      	bne.n	8003b3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e013      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b40:	897b      	ldrh	r3, [r7, #10]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	6a3a      	ldr	r2, [r7, #32]
 8003b54:	4906      	ldr	r1, [pc, #24]	@ (8003b70 <I2C_RequestMemoryRead+0x1cc>)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f886 	bl	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	00010002 	.word	0x00010002

08003b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b84:	e048      	b.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b8c:	d044      	beq.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fe fd79 	bl	8002684 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d139      	bne.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	0c1b      	lsrs	r3, r3, #16
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d10d      	bne.n	8003bca <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	e00c      	b.n	8003be4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d116      	bne.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e023      	b.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d10d      	bne.n	8003c3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	43da      	mvns	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	e00c      	b.n	8003c58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	43da      	mvns	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d093      	beq.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c76:	e071      	b.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c86:	d123      	bne.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ca0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	f043 0204 	orr.w	r2, r3, #4
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e067      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cd6:	d041      	beq.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd8:	f7fe fcd4 	bl	8002684 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d302      	bcc.n	8003cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d136      	bne.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d10c      	bne.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bf14      	ite	ne
 8003d0a:	2301      	movne	r3, #1
 8003d0c:	2300      	moveq	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	e00b      	b.n	8003d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	43da      	mvns	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e021      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	0c1b      	lsrs	r3, r3, #16
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d10c      	bne.n	8003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e00b      	b.n	8003d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf14      	ite	ne
 8003d92:	2301      	movne	r3, #1
 8003d94:	2300      	moveq	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f47f af6d 	bne.w	8003c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003db4:	e034      	b.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8e3 	bl	8003f82 <I2C_IsAcknowledgeFailed>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e034      	b.n	8003e30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dcc:	d028      	beq.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fe fc59 	bl	8002684 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d11d      	bne.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dee:	2b80      	cmp	r3, #128	@ 0x80
 8003df0:	d016      	beq.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e007      	b.n	8003e30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2a:	2b80      	cmp	r3, #128	@ 0x80
 8003e2c:	d1c3      	bne.n	8003db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e44:	e034      	b.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f89b 	bl	8003f82 <I2C_IsAcknowledgeFailed>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e034      	b.n	8003ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e5c:	d028      	beq.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fe fc11 	bl	8002684 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d11d      	bne.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d016      	beq.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e007      	b.n	8003ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d1c3      	bne.n	8003e46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ed4:	e049      	b.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d119      	bne.n	8003f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0210 	mvn.w	r2, #16
 8003eec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e030      	b.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f18:	f7fe fbb4 	bl	8002684 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d11d      	bne.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f38:	2b40      	cmp	r3, #64	@ 0x40
 8003f3a:	d016      	beq.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e007      	b.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f74:	2b40      	cmp	r3, #64	@ 0x40
 8003f76:	d1ae      	bne.n	8003ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f98:	d11b      	bne.n	8003fd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fa2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f043 0204 	orr.w	r2, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0bf      	b.n	8004172 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fd fcb6 	bl	8001978 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004022:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6999      	ldr	r1, [r3, #24]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004038:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6899      	ldr	r1, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b4a      	ldr	r3, [pc, #296]	@ (800417c <HAL_LTDC_Init+0x19c>)
 8004054:	400b      	ands	r3, r1
 8004056:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	041b      	lsls	r3, r3, #16
 800405e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68d9      	ldr	r1, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b3e      	ldr	r3, [pc, #248]	@ (800417c <HAL_LTDC_Init+0x19c>)
 8004082:	400b      	ands	r3, r1
 8004084:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	041b      	lsls	r3, r3, #16
 800408c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68d9      	ldr	r1, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6919      	ldr	r1, [r3, #16]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b33      	ldr	r3, [pc, #204]	@ (800417c <HAL_LTDC_Init+0x19c>)
 80040b0:	400b      	ands	r3, r1
 80040b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6919      	ldr	r1, [r3, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6959      	ldr	r1, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b27      	ldr	r3, [pc, #156]	@ (800417c <HAL_LTDC_Init+0x19c>)
 80040de:	400b      	ands	r3, r1
 80040e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6959      	ldr	r1, [r3, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004122:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0206 	orr.w	r2, r2, #6
 800414e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	f000f800 	.word	0xf000f800

08004180 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004180:	b5b0      	push	{r4, r5, r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_LTDC_ConfigLayer+0x1a>
 8004196:	2302      	movs	r3, #2
 8004198:	e02c      	b.n	80041f4 <HAL_LTDC_ConfigLayer+0x74>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2134      	movs	r1, #52	@ 0x34
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	4413      	add	r3, r2
 80041b6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4614      	mov	r4, r2
 80041be:	461d      	mov	r5, r3
 80041c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f811 	bl	80041fc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2201      	movs	r2, #1
 80041e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bdb0      	pop	{r4, r5, r7, pc}

080041fc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b089      	sub	sp, #36	@ 0x24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	0c1b      	lsrs	r3, r3, #16
 8004214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004218:	4413      	add	r3, r2
 800421a:	041b      	lsls	r3, r3, #16
 800421c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	01db      	lsls	r3, r3, #7
 8004228:	4413      	add	r3, r2
 800422a:	3384      	adds	r3, #132	@ 0x84
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	4611      	mov	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	01d2      	lsls	r2, r2, #7
 8004238:	440a      	add	r2, r1
 800423a:	3284      	adds	r2, #132	@ 0x84
 800423c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004240:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004252:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004254:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4619      	mov	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	01db      	lsls	r3, r3, #7
 8004260:	440b      	add	r3, r1
 8004262:	3384      	adds	r3, #132	@ 0x84
 8004264:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800426a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800427a:	4413      	add	r3, r2
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	01db      	lsls	r3, r3, #7
 800428a:	4413      	add	r3, r2
 800428c:	3384      	adds	r3, #132	@ 0x84
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	4611      	mov	r1, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	01d2      	lsls	r2, r2, #7
 800429a:	440a      	add	r2, r1
 800429c:	3284      	adds	r2, #132	@ 0x84
 800429e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80042a2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042b2:	4413      	add	r3, r2
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4619      	mov	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	01db      	lsls	r3, r3, #7
 80042c0:	440b      	add	r3, r1
 80042c2:	3384      	adds	r3, #132	@ 0x84
 80042c4:	4619      	mov	r1, r3
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	01db      	lsls	r3, r3, #7
 80042d6:	4413      	add	r3, r2
 80042d8:	3384      	adds	r3, #132	@ 0x84
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	4611      	mov	r1, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	01d2      	lsls	r2, r2, #7
 80042e6:	440a      	add	r2, r1
 80042e8:	3284      	adds	r2, #132	@ 0x84
 80042ea:	f023 0307 	bic.w	r3, r3, #7
 80042ee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	01db      	lsls	r3, r3, #7
 80042fa:	4413      	add	r3, r2
 80042fc:	3384      	adds	r3, #132	@ 0x84
 80042fe:	461a      	mov	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	061b      	lsls	r3, r3, #24
 8004320:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	01db      	lsls	r3, r3, #7
 800432c:	4413      	add	r3, r2
 800432e:	3384      	adds	r3, #132	@ 0x84
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	01db      	lsls	r3, r3, #7
 800433c:	4413      	add	r3, r2
 800433e:	3384      	adds	r3, #132	@ 0x84
 8004340:	461a      	mov	r2, r3
 8004342:	2300      	movs	r3, #0
 8004344:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800434c:	461a      	mov	r2, r3
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	431a      	orrs	r2, r3
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4619      	mov	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	01db      	lsls	r3, r3, #7
 8004360:	440b      	add	r3, r1
 8004362:	3384      	adds	r3, #132	@ 0x84
 8004364:	4619      	mov	r1, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	01db      	lsls	r3, r3, #7
 8004376:	4413      	add	r3, r2
 8004378:	3384      	adds	r3, #132	@ 0x84
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	4611      	mov	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	01d2      	lsls	r2, r2, #7
 8004386:	440a      	add	r2, r1
 8004388:	3284      	adds	r2, #132	@ 0x84
 800438a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800438e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	01db      	lsls	r3, r3, #7
 800439a:	4413      	add	r3, r2
 800439c:	3384      	adds	r3, #132	@ 0x84
 800439e:	461a      	mov	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	01db      	lsls	r3, r3, #7
 80043b0:	4413      	add	r3, r2
 80043b2:	3384      	adds	r3, #132	@ 0x84
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	4611      	mov	r1, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	01d2      	lsls	r2, r2, #7
 80043c0:	440a      	add	r2, r1
 80043c2:	3284      	adds	r2, #132	@ 0x84
 80043c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80043c8:	f023 0307 	bic.w	r3, r3, #7
 80043cc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	68f9      	ldr	r1, [r7, #12]
 80043d8:	6809      	ldr	r1, [r1, #0]
 80043da:	4608      	mov	r0, r1
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	01c9      	lsls	r1, r1, #7
 80043e0:	4401      	add	r1, r0
 80043e2:	3184      	adds	r1, #132	@ 0x84
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	01db      	lsls	r3, r3, #7
 80043f2:	4413      	add	r3, r2
 80043f4:	3384      	adds	r3, #132	@ 0x84
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	01db      	lsls	r3, r3, #7
 8004402:	4413      	add	r3, r2
 8004404:	3384      	adds	r3, #132	@ 0x84
 8004406:	461a      	mov	r2, r3
 8004408:	2300      	movs	r3, #0
 800440a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	01db      	lsls	r3, r3, #7
 8004416:	4413      	add	r3, r2
 8004418:	3384      	adds	r3, #132	@ 0x84
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d102      	bne.n	8004430 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800442a:	2304      	movs	r3, #4
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	e01b      	b.n	8004468 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d102      	bne.n	800443e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004438:	2303      	movs	r3, #3
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	e014      	b.n	8004468 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b04      	cmp	r3, #4
 8004444:	d00b      	beq.n	800445e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800444a:	2b02      	cmp	r3, #2
 800444c:	d007      	beq.n	800445e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004452:	2b03      	cmp	r3, #3
 8004454:	d003      	beq.n	800445e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800445a:	2b07      	cmp	r3, #7
 800445c:	d102      	bne.n	8004464 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800445e:	2302      	movs	r3, #2
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	e001      	b.n	8004468 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004464:	2301      	movs	r3, #1
 8004466:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	01db      	lsls	r3, r3, #7
 8004472:	4413      	add	r3, r2
 8004474:	3384      	adds	r3, #132	@ 0x84
 8004476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	4611      	mov	r1, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	01d2      	lsls	r2, r2, #7
 8004482:	440a      	add	r2, r1
 8004484:	3284      	adds	r2, #132	@ 0x84
 8004486:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800448a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6859      	ldr	r1, [r3, #4]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	1acb      	subs	r3, r1, r3
 80044a2:	69f9      	ldr	r1, [r7, #28]
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80044aa:	68f9      	ldr	r1, [r7, #12]
 80044ac:	6809      	ldr	r1, [r1, #0]
 80044ae:	4608      	mov	r0, r1
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	01c9      	lsls	r1, r1, #7
 80044b4:	4401      	add	r1, r0
 80044b6:	3184      	adds	r1, #132	@ 0x84
 80044b8:	4313      	orrs	r3, r2
 80044ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	01db      	lsls	r3, r3, #7
 80044c6:	4413      	add	r3, r2
 80044c8:	3384      	adds	r3, #132	@ 0x84
 80044ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	4611      	mov	r1, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	01d2      	lsls	r2, r2, #7
 80044d6:	440a      	add	r2, r1
 80044d8:	3284      	adds	r2, #132	@ 0x84
 80044da:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80044de:	f023 0307 	bic.w	r3, r3, #7
 80044e2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	01db      	lsls	r3, r3, #7
 80044ee:	4413      	add	r3, r2
 80044f0:	3384      	adds	r3, #132	@ 0x84
 80044f2:	461a      	mov	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	01db      	lsls	r3, r3, #7
 8004504:	4413      	add	r3, r2
 8004506:	3384      	adds	r3, #132	@ 0x84
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	4611      	mov	r1, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	01d2      	lsls	r2, r2, #7
 8004514:	440a      	add	r2, r1
 8004516:	3284      	adds	r2, #132	@ 0x84
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	6013      	str	r3, [r2, #0]
}
 800451e:	bf00      	nop
 8004520:	3724      	adds	r7, #36	@ 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e267      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d075      	beq.n	8004636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800454a:	4b88      	ldr	r3, [pc, #544]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b04      	cmp	r3, #4
 8004554:	d00c      	beq.n	8004570 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004556:	4b85      	ldr	r3, [pc, #532]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800455e:	2b08      	cmp	r3, #8
 8004560:	d112      	bne.n	8004588 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004562:	4b82      	ldr	r3, [pc, #520]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800456a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800456e:	d10b      	bne.n	8004588 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004570:	4b7e      	ldr	r3, [pc, #504]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d05b      	beq.n	8004634 <HAL_RCC_OscConfig+0x108>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d157      	bne.n	8004634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e242      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004590:	d106      	bne.n	80045a0 <HAL_RCC_OscConfig+0x74>
 8004592:	4b76      	ldr	r3, [pc, #472]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a75      	ldr	r2, [pc, #468]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e01d      	b.n	80045dc <HAL_RCC_OscConfig+0xb0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x98>
 80045aa:	4b70      	ldr	r3, [pc, #448]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a6f      	ldr	r2, [pc, #444]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 80045b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	4b6d      	ldr	r3, [pc, #436]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a6c      	ldr	r2, [pc, #432]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e00b      	b.n	80045dc <HAL_RCC_OscConfig+0xb0>
 80045c4:	4b69      	ldr	r3, [pc, #420]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a68      	ldr	r2, [pc, #416]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 80045ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	4b66      	ldr	r3, [pc, #408]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a65      	ldr	r2, [pc, #404]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 80045d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d013      	beq.n	800460c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fe f84e 	bl	8002684 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ec:	f7fe f84a 	bl	8002684 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b64      	cmp	r3, #100	@ 0x64
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e207      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	4b5b      	ldr	r3, [pc, #364]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0xc0>
 800460a:	e014      	b.n	8004636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fe f83a 	bl	8002684 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004614:	f7fe f836 	bl	8002684 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	@ 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e1f3      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004626:	4b51      	ldr	r3, [pc, #324]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0xe8>
 8004632:	e000      	b.n	8004636 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d063      	beq.n	800470a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004642:	4b4a      	ldr	r3, [pc, #296]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800464e:	4b47      	ldr	r3, [pc, #284]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004656:	2b08      	cmp	r3, #8
 8004658:	d11c      	bne.n	8004694 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465a:	4b44      	ldr	r3, [pc, #272]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d116      	bne.n	8004694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004666:	4b41      	ldr	r3, [pc, #260]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_RCC_OscConfig+0x152>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d001      	beq.n	800467e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e1c7      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467e:	4b3b      	ldr	r3, [pc, #236]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4937      	ldr	r1, [pc, #220]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004692:	e03a      	b.n	800470a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d020      	beq.n	80046de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800469c:	4b34      	ldr	r3, [pc, #208]	@ (8004770 <HAL_RCC_OscConfig+0x244>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a2:	f7fd ffef 	bl	8002684 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046aa:	f7fd ffeb 	bl	8002684 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e1a8      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046bc:	4b2b      	ldr	r3, [pc, #172]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c8:	4b28      	ldr	r3, [pc, #160]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4925      	ldr	r1, [pc, #148]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	600b      	str	r3, [r1, #0]
 80046dc:	e015      	b.n	800470a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046de:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <HAL_RCC_OscConfig+0x244>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd ffce 	bl	8002684 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ec:	f7fd ffca 	bl	8002684 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e187      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fe:	4b1b      	ldr	r3, [pc, #108]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d036      	beq.n	8004784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d016      	beq.n	800474c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800471e:	4b15      	ldr	r3, [pc, #84]	@ (8004774 <HAL_RCC_OscConfig+0x248>)
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7fd ffae 	bl	8002684 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472c:	f7fd ffaa 	bl	8002684 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e167      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473e:	4b0b      	ldr	r3, [pc, #44]	@ (800476c <HAL_RCC_OscConfig+0x240>)
 8004740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x200>
 800474a:	e01b      	b.n	8004784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800474c:	4b09      	ldr	r3, [pc, #36]	@ (8004774 <HAL_RCC_OscConfig+0x248>)
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004752:	f7fd ff97 	bl	8002684 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004758:	e00e      	b.n	8004778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475a:	f7fd ff93 	bl	8002684 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d907      	bls.n	8004778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e150      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
 800476c:	40023800 	.word	0x40023800
 8004770:	42470000 	.word	0x42470000
 8004774:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004778:	4b88      	ldr	r3, [pc, #544]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 800477a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1ea      	bne.n	800475a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8097 	beq.w	80048c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004792:	2300      	movs	r3, #0
 8004794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004796:	4b81      	ldr	r3, [pc, #516]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	4b7d      	ldr	r3, [pc, #500]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047aa:	4a7c      	ldr	r2, [pc, #496]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80047b2:	4b7a      	ldr	r3, [pc, #488]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047be:	2301      	movs	r3, #1
 80047c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c2:	4b77      	ldr	r3, [pc, #476]	@ (80049a0 <HAL_RCC_OscConfig+0x474>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d118      	bne.n	8004800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ce:	4b74      	ldr	r3, [pc, #464]	@ (80049a0 <HAL_RCC_OscConfig+0x474>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a73      	ldr	r2, [pc, #460]	@ (80049a0 <HAL_RCC_OscConfig+0x474>)
 80047d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047da:	f7fd ff53 	bl	8002684 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e2:	f7fd ff4f 	bl	8002684 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e10c      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f4:	4b6a      	ldr	r3, [pc, #424]	@ (80049a0 <HAL_RCC_OscConfig+0x474>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d106      	bne.n	8004816 <HAL_RCC_OscConfig+0x2ea>
 8004808:	4b64      	ldr	r3, [pc, #400]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 800480a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480c:	4a63      	ldr	r2, [pc, #396]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6713      	str	r3, [r2, #112]	@ 0x70
 8004814:	e01c      	b.n	8004850 <HAL_RCC_OscConfig+0x324>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b05      	cmp	r3, #5
 800481c:	d10c      	bne.n	8004838 <HAL_RCC_OscConfig+0x30c>
 800481e:	4b5f      	ldr	r3, [pc, #380]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004822:	4a5e      	ldr	r2, [pc, #376]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 8004824:	f043 0304 	orr.w	r3, r3, #4
 8004828:	6713      	str	r3, [r2, #112]	@ 0x70
 800482a:	4b5c      	ldr	r3, [pc, #368]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	4a5b      	ldr	r2, [pc, #364]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	6713      	str	r3, [r2, #112]	@ 0x70
 8004836:	e00b      	b.n	8004850 <HAL_RCC_OscConfig+0x324>
 8004838:	4b58      	ldr	r3, [pc, #352]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483c:	4a57      	ldr	r2, [pc, #348]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	6713      	str	r3, [r2, #112]	@ 0x70
 8004844:	4b55      	ldr	r3, [pc, #340]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004848:	4a54      	ldr	r2, [pc, #336]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 800484a:	f023 0304 	bic.w	r3, r3, #4
 800484e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d015      	beq.n	8004884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fd ff14 	bl	8002684 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	e00a      	b.n	8004876 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004860:	f7fd ff10 	bl	8002684 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e0cb      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004876:	4b49      	ldr	r3, [pc, #292]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0ee      	beq.n	8004860 <HAL_RCC_OscConfig+0x334>
 8004882:	e014      	b.n	80048ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004884:	f7fd fefe 	bl	8002684 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488c:	f7fd fefa 	bl	8002684 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e0b5      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a2:	4b3e      	ldr	r3, [pc, #248]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1ee      	bne.n	800488c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b4:	4b39      	ldr	r3, [pc, #228]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	4a38      	ldr	r2, [pc, #224]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 80048ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80a1 	beq.w	8004a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ca:	4b34      	ldr	r3, [pc, #208]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d05c      	beq.n	8004990 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d141      	bne.n	8004962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048de:	4b31      	ldr	r3, [pc, #196]	@ (80049a4 <HAL_RCC_OscConfig+0x478>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fd fece 	bl	8002684 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fd feca 	bl	8002684 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e087      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	4b27      	ldr	r3, [pc, #156]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	019b      	lsls	r3, r3, #6
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004920:	085b      	lsrs	r3, r3, #1
 8004922:	3b01      	subs	r3, #1
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	491b      	ldr	r1, [pc, #108]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004934:	4b1b      	ldr	r3, [pc, #108]	@ (80049a4 <HAL_RCC_OscConfig+0x478>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493a:	f7fd fea3 	bl	8002684 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004942:	f7fd fe9f 	bl	8002684 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e05c      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004954:	4b11      	ldr	r3, [pc, #68]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCC_OscConfig+0x416>
 8004960:	e054      	b.n	8004a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004962:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <HAL_RCC_OscConfig+0x478>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7fd fe8c 	bl	8002684 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fd fe88 	bl	8002684 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e045      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004982:	4b06      	ldr	r3, [pc, #24]	@ (800499c <HAL_RCC_OscConfig+0x470>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x444>
 800498e:	e03d      	b.n	8004a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d107      	bne.n	80049a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e038      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
 800499c:	40023800 	.word	0x40023800
 80049a0:	40007000 	.word	0x40007000
 80049a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a18 <HAL_RCC_OscConfig+0x4ec>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d028      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d121      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d11a      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d111      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	3b01      	subs	r3, #1
 80049f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40023800 	.word	0x40023800

08004a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0cc      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a30:	4b68      	ldr	r3, [pc, #416]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d90c      	bls.n	8004a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3e:	4b65      	ldr	r3, [pc, #404]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a46:	4b63      	ldr	r3, [pc, #396]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0b8      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d020      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a70:	4b59      	ldr	r3, [pc, #356]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a58      	ldr	r2, [pc, #352]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a88:	4b53      	ldr	r3, [pc, #332]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a52      	ldr	r2, [pc, #328]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a94:	4b50      	ldr	r3, [pc, #320]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	494d      	ldr	r1, [pc, #308]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d044      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b47      	ldr	r3, [pc, #284]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d119      	bne.n	8004afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e07f      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d003      	beq.n	8004ada <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ada:	4b3f      	ldr	r3, [pc, #252]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e06f      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aea:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e067      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004afa:	4b37      	ldr	r3, [pc, #220]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f023 0203 	bic.w	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	4934      	ldr	r1, [pc, #208]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b0c:	f7fd fdba 	bl	8002684 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	e00a      	b.n	8004b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b14:	f7fd fdb6 	bl	8002684 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e04f      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 020c 	and.w	r2, r3, #12
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d1eb      	bne.n	8004b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b25      	ldr	r3, [pc, #148]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d20c      	bcs.n	8004b64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b22      	ldr	r3, [pc, #136]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b52:	4b20      	ldr	r3, [pc, #128]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e032      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b70:	4b19      	ldr	r3, [pc, #100]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4916      	ldr	r1, [pc, #88]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b8e:	4b12      	ldr	r3, [pc, #72]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	490e      	ldr	r1, [pc, #56]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ba2:	f000 f821 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	490a      	ldr	r1, [pc, #40]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c0>)
 8004bb4:	5ccb      	ldrb	r3, [r1, r3]
 8004bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bba:	4a09      	ldr	r2, [pc, #36]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004bbe:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fd fd1a 	bl	80025fc <HAL_InitTick>

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023c00 	.word	0x40023c00
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	080078cc 	.word	0x080078cc
 8004be0:	20000010 	.word	0x20000010
 8004be4:	20000014 	.word	0x20000014

08004be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bec:	b094      	sub	sp, #80	@ 0x50
 8004bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c00:	4b79      	ldr	r3, [pc, #484]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d00d      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x40>
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	f200 80e1 	bhi.w	8004dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x34>
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d003      	beq.n	8004c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c1a:	e0db      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c1c:	4b73      	ldr	r3, [pc, #460]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x204>)
 8004c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c20:	e0db      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c22:	4b73      	ldr	r3, [pc, #460]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c26:	e0d8      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c28:	4b6f      	ldr	r3, [pc, #444]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c32:	4b6d      	ldr	r3, [pc, #436]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d063      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	099b      	lsrs	r3, r3, #6
 8004c44:	2200      	movs	r2, #0
 8004c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c52:	2300      	movs	r3, #0
 8004c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	f04f 0000 	mov.w	r0, #0
 8004c62:	f04f 0100 	mov.w	r1, #0
 8004c66:	0159      	lsls	r1, r3, #5
 8004c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c6c:	0150      	lsls	r0, r2, #5
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4621      	mov	r1, r4
 8004c74:	1a51      	subs	r1, r2, r1
 8004c76:	6139      	str	r1, [r7, #16]
 8004c78:	4629      	mov	r1, r5
 8004c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	018b      	lsls	r3, r1, #6
 8004c90:	4651      	mov	r1, sl
 8004c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c96:	4651      	mov	r1, sl
 8004c98:	018a      	lsls	r2, r1, #6
 8004c9a:	4651      	mov	r1, sl
 8004c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cba:	4690      	mov	r8, r2
 8004cbc:	4699      	mov	r9, r3
 8004cbe:	4623      	mov	r3, r4
 8004cc0:	eb18 0303 	adds.w	r3, r8, r3
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	462b      	mov	r3, r5
 8004cc8:	eb49 0303 	adc.w	r3, r9, r3
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cda:	4629      	mov	r1, r5
 8004cdc:	024b      	lsls	r3, r1, #9
 8004cde:	4621      	mov	r1, r4
 8004ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	024a      	lsls	r2, r1, #9
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cee:	2200      	movs	r2, #0
 8004cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cf8:	f7fb faca 	bl	8000290 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4613      	mov	r3, r2
 8004d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d04:	e058      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d06:	4b38      	ldr	r3, [pc, #224]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	099b      	lsrs	r3, r3, #6
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	4611      	mov	r1, r2
 8004d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d16:	623b      	str	r3, [r7, #32]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d20:	4642      	mov	r2, r8
 8004d22:	464b      	mov	r3, r9
 8004d24:	f04f 0000 	mov.w	r0, #0
 8004d28:	f04f 0100 	mov.w	r1, #0
 8004d2c:	0159      	lsls	r1, r3, #5
 8004d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d32:	0150      	lsls	r0, r2, #5
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4641      	mov	r1, r8
 8004d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d3e:	4649      	mov	r1, r9
 8004d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d58:	ebb2 040a 	subs.w	r4, r2, sl
 8004d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	00eb      	lsls	r3, r5, #3
 8004d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d6e:	00e2      	lsls	r2, r4, #3
 8004d70:	4614      	mov	r4, r2
 8004d72:	461d      	mov	r5, r3
 8004d74:	4643      	mov	r3, r8
 8004d76:	18e3      	adds	r3, r4, r3
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	eb45 0303 	adc.w	r3, r5, r3
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d8e:	4629      	mov	r1, r5
 8004d90:	028b      	lsls	r3, r1, #10
 8004d92:	4621      	mov	r1, r4
 8004d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d98:	4621      	mov	r1, r4
 8004d9a:	028a      	lsls	r2, r1, #10
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004da2:	2200      	movs	r2, #0
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	61fa      	str	r2, [r7, #28]
 8004da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dac:	f7fb fa70 	bl	8000290 <__aeabi_uldivmod>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4613      	mov	r3, r2
 8004db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004db8:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004dc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dd2:	e002      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dd4:	4b05      	ldr	r3, [pc, #20]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x204>)
 8004dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3750      	adds	r7, #80	@ 0x50
 8004de0:	46bd      	mov	sp, r7
 8004de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800
 8004dec:	00f42400 	.word	0x00f42400
 8004df0:	007a1200 	.word	0x007a1200

08004df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df8:	4b03      	ldr	r3, [pc, #12]	@ (8004e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000010 	.word	0x20000010

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e10:	f7ff fff0 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e14:	4602      	mov	r2, r0
 8004e16:	4b05      	ldr	r3, [pc, #20]	@ (8004e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	0a9b      	lsrs	r3, r3, #10
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	4903      	ldr	r1, [pc, #12]	@ (8004e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e22:	5ccb      	ldrb	r3, [r1, r3]
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	080078dc 	.word	0x080078dc

08004e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d075      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e68:	4b91      	ldr	r3, [pc, #580]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e6e:	f7fd fc09 	bl	8002684 <HAL_GetTick>
 8004e72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e76:	f7fd fc05 	bl	8002684 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e189      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e88:	4b8a      	ldr	r3, [pc, #552]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f0      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d009      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	019a      	lsls	r2, r3, #6
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	071b      	lsls	r3, r3, #28
 8004eac:	4981      	ldr	r1, [pc, #516]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01f      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ec0:	4b7c      	ldr	r3, [pc, #496]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec6:	0f1b      	lsrs	r3, r3, #28
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	019a      	lsls	r2, r3, #6
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	061b      	lsls	r3, r3, #24
 8004eda:	431a      	orrs	r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	071b      	lsls	r3, r3, #28
 8004ee0:	4974      	ldr	r1, [pc, #464]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ee8:	4b72      	ldr	r3, [pc, #456]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eee:	f023 021f 	bic.w	r2, r3, #31
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	496e      	ldr	r1, [pc, #440]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00d      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	019a      	lsls	r2, r3, #6
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	061b      	lsls	r3, r3, #24
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	071b      	lsls	r3, r3, #28
 8004f20:	4964      	ldr	r1, [pc, #400]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f28:	4b61      	ldr	r3, [pc, #388]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f2e:	f7fd fba9 	bl	8002684 <HAL_GetTick>
 8004f32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f34:	e008      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f36:	f7fd fba5 	bl	8002684 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e129      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f48:	4b5a      	ldr	r3, [pc, #360]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f0      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d079      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f6c:	4b52      	ldr	r3, [pc, #328]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f72:	f7fd fb87 	bl	8002684 <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f7a:	f7fd fb83 	bl	8002684 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e107      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f8c:	4b49      	ldr	r3, [pc, #292]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f98:	d0ef      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d020      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fa6:	4b43      	ldr	r3, [pc, #268]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fac:	0f1b      	lsrs	r3, r3, #28
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	019a      	lsls	r2, r3, #6
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	061b      	lsls	r3, r3, #24
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	071b      	lsls	r3, r3, #28
 8004fc6:	493b      	ldr	r1, [pc, #236]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fce:	4b39      	ldr	r3, [pc, #228]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fd4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	4934      	ldr	r1, [pc, #208]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01e      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffa:	0e1b      	lsrs	r3, r3, #24
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	019a      	lsls	r2, r3, #6
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	061b      	lsls	r3, r3, #24
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	071b      	lsls	r3, r3, #28
 8005014:	4927      	ldr	r1, [pc, #156]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800501c:	4b25      	ldr	r3, [pc, #148]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005022:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	4922      	ldr	r1, [pc, #136]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005032:	4b21      	ldr	r3, [pc, #132]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005038:	f7fd fb24 	bl	8002684 <HAL_GetTick>
 800503c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005040:	f7fd fb20 	bl	8002684 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e0a4      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005052:	4b18      	ldr	r3, [pc, #96]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800505a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800505e:	d1ef      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 808b 	beq.w	8005184 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	4b10      	ldr	r3, [pc, #64]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	4a0f      	ldr	r2, [pc, #60]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800507c:	6413      	str	r3, [r2, #64]	@ 0x40
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800508a:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a0b      	ldr	r2, [pc, #44]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005094:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005096:	f7fd faf5 	bl	8002684 <HAL_GetTick>
 800509a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800509c:	e010      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509e:	f7fd faf1 	bl	8002684 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d909      	bls.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e075      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80050b0:	42470068 	.word	0x42470068
 80050b4:	40023800 	.word	0x40023800
 80050b8:	42470070 	.word	0x42470070
 80050bc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80050c0:	4b38      	ldr	r3, [pc, #224]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0e8      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050cc:	4b36      	ldr	r3, [pc, #216]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050d4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d02f      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d028      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ea:	4b2f      	ldr	r3, [pc, #188]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050f4:	4b2d      	ldr	r3, [pc, #180]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050fa:	4b2c      	ldr	r3, [pc, #176]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005100:	4a29      	ldr	r2, [pc, #164]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005106:	4b28      	ldr	r3, [pc, #160]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b01      	cmp	r3, #1
 8005110:	d114      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005112:	f7fd fab7 	bl	8002684 <HAL_GetTick>
 8005116:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005118:	e00a      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7fd fab3 	bl	8002684 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e035      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005130:	4b1d      	ldr	r3, [pc, #116]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ee      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005140:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005148:	d10d      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800514a:	4b17      	ldr	r3, [pc, #92]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800515a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800515e:	4912      	ldr	r1, [pc, #72]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005160:	4313      	orrs	r3, r2
 8005162:	608b      	str	r3, [r1, #8]
 8005164:	e005      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005166:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	4a0f      	ldr	r2, [pc, #60]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800516c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005170:	6093      	str	r3, [r2, #8]
 8005172:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005174:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517e:	490a      	ldr	r1, [pc, #40]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005180:	4313      	orrs	r3, r2
 8005182:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005196:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005198:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40007000 	.word	0x40007000
 80051a8:	40023800 	.word	0x40023800
 80051ac:	42470e40 	.word	0x42470e40
 80051b0:	424711e0 	.word	0x424711e0

080051b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e07b      	b.n	80052be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d108      	bne.n	80051e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051d6:	d009      	beq.n	80051ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	61da      	str	r2, [r3, #28]
 80051de:	e005      	b.n	80051ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc fcde 	bl	8001bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005270:	ea42 0103 	orr.w	r1, r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005278:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	f003 0104 	and.w	r1, r3, #4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	f003 0210 	and.w	r2, r3, #16
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e01a      	b.n	800530e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fc fcb1 	bl	8001c58 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b088      	sub	sp, #32
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005326:	f7fd f9ad 	bl	8002684 <HAL_GetTick>
 800532a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d001      	beq.n	8005340 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800533c:	2302      	movs	r3, #2
 800533e:	e12a      	b.n	8005596 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_SPI_Transmit+0x36>
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e122      	b.n	8005596 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005356:	2b01      	cmp	r3, #1
 8005358:	d101      	bne.n	800535e <HAL_SPI_Transmit+0x48>
 800535a:	2302      	movs	r3, #2
 800535c:	e11b      	b.n	8005596 <HAL_SPI_Transmit+0x280>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2203      	movs	r2, #3
 800536a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	88fa      	ldrh	r2, [r7, #6]
 800537e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	88fa      	ldrh	r2, [r7, #6]
 8005384:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053ac:	d10f      	bne.n	80053ce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d8:	2b40      	cmp	r3, #64	@ 0x40
 80053da:	d007      	beq.n	80053ec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053f4:	d152      	bne.n	800549c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <HAL_SPI_Transmit+0xee>
 80053fe:	8b7b      	ldrh	r3, [r7, #26]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d145      	bne.n	8005490 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005408:	881a      	ldrh	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005414:	1c9a      	adds	r2, r3, #2
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005428:	e032      	b.n	8005490 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b02      	cmp	r3, #2
 8005436:	d112      	bne.n	800545e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	881a      	ldrh	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005448:	1c9a      	adds	r2, r3, #2
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800545c:	e018      	b.n	8005490 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800545e:	f7fd f911 	bl	8002684 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d803      	bhi.n	8005476 <HAL_SPI_Transmit+0x160>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005474:	d102      	bne.n	800547c <HAL_SPI_Transmit+0x166>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e082      	b.n	8005596 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1c7      	bne.n	800542a <HAL_SPI_Transmit+0x114>
 800549a:	e053      	b.n	8005544 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <HAL_SPI_Transmit+0x194>
 80054a4:	8b7b      	ldrh	r3, [r7, #26]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d147      	bne.n	800553a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	7812      	ldrb	r2, [r2, #0]
 80054b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054d0:	e033      	b.n	800553a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d113      	bne.n	8005508 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	7812      	ldrb	r2, [r2, #0]
 80054ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005506:	e018      	b.n	800553a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005508:	f7fd f8bc 	bl	8002684 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d803      	bhi.n	8005520 <HAL_SPI_Transmit+0x20a>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800551e:	d102      	bne.n	8005526 <HAL_SPI_Transmit+0x210>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e02d      	b.n	8005596 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1c6      	bne.n	80054d2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f8bf 	bl	80056cc <SPI_EndRxTxTransaction>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005594:	2300      	movs	r3, #0
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055ac:	b2db      	uxtb	r3, r3
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055cc:	f7fd f85a 	bl	8002684 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	4413      	add	r3, r2
 80055da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055dc:	f7fd f852 	bl	8002684 <HAL_GetTick>
 80055e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055e2:	4b39      	ldr	r3, [pc, #228]	@ (80056c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	015b      	lsls	r3, r3, #5
 80055e8:	0d1b      	lsrs	r3, r3, #20
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	fb02 f303 	mul.w	r3, r2, r3
 80055f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055f2:	e054      	b.n	800569e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055fa:	d050      	beq.n	800569e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055fc:	f7fd f842 	bl	8002684 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	429a      	cmp	r2, r3
 800560a:	d902      	bls.n	8005612 <SPI_WaitFlagStateUntilTimeout+0x56>
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d13d      	bne.n	800568e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005620:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800562a:	d111      	bne.n	8005650 <SPI_WaitFlagStateUntilTimeout+0x94>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005634:	d004      	beq.n	8005640 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800563e:	d107      	bne.n	8005650 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800564e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005658:	d10f      	bne.n	800567a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005678:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e017      	b.n	80056be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	3b01      	subs	r3, #1
 800569c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4013      	ands	r3, r2
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	bf0c      	ite	eq
 80056ae:	2301      	moveq	r3, #1
 80056b0:	2300      	movne	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d19b      	bne.n	80055f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000010 	.word	0x20000010

080056cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2201      	movs	r2, #1
 80056e0:	2102      	movs	r1, #2
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7ff ff6a 	bl	80055bc <SPI_WaitFlagStateUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f2:	f043 0220 	orr.w	r2, r3, #32
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e032      	b.n	8005764 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056fe:	4b1b      	ldr	r3, [pc, #108]	@ (800576c <SPI_EndRxTxTransaction+0xa0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1b      	ldr	r2, [pc, #108]	@ (8005770 <SPI_EndRxTxTransaction+0xa4>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	0d5b      	lsrs	r3, r3, #21
 800570a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800571c:	d112      	bne.n	8005744 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2200      	movs	r2, #0
 8005726:	2180      	movs	r1, #128	@ 0x80
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff ff47 	bl	80055bc <SPI_WaitFlagStateUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d016      	beq.n	8005762 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005738:	f043 0220 	orr.w	r2, r3, #32
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e00f      	b.n	8005764 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	3b01      	subs	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575a:	2b80      	cmp	r3, #128	@ 0x80
 800575c:	d0f2      	beq.n	8005744 <SPI_EndRxTxTransaction+0x78>
 800575e:	e000      	b.n	8005762 <SPI_EndRxTxTransaction+0x96>
        break;
 8005760:	bf00      	nop
  }

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000010 	.word	0x20000010
 8005770:	165e9f81 	.word	0x165e9f81

08005774 <std>:
 8005774:	2300      	movs	r3, #0
 8005776:	b510      	push	{r4, lr}
 8005778:	4604      	mov	r4, r0
 800577a:	e9c0 3300 	strd	r3, r3, [r0]
 800577e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005782:	6083      	str	r3, [r0, #8]
 8005784:	8181      	strh	r1, [r0, #12]
 8005786:	6643      	str	r3, [r0, #100]	@ 0x64
 8005788:	81c2      	strh	r2, [r0, #14]
 800578a:	6183      	str	r3, [r0, #24]
 800578c:	4619      	mov	r1, r3
 800578e:	2208      	movs	r2, #8
 8005790:	305c      	adds	r0, #92	@ 0x5c
 8005792:	f000 f9f9 	bl	8005b88 <memset>
 8005796:	4b0d      	ldr	r3, [pc, #52]	@ (80057cc <std+0x58>)
 8005798:	6263      	str	r3, [r4, #36]	@ 0x24
 800579a:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <std+0x5c>)
 800579c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800579e:	4b0d      	ldr	r3, [pc, #52]	@ (80057d4 <std+0x60>)
 80057a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057a2:	4b0d      	ldr	r3, [pc, #52]	@ (80057d8 <std+0x64>)
 80057a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80057a6:	4b0d      	ldr	r3, [pc, #52]	@ (80057dc <std+0x68>)
 80057a8:	6224      	str	r4, [r4, #32]
 80057aa:	429c      	cmp	r4, r3
 80057ac:	d006      	beq.n	80057bc <std+0x48>
 80057ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057b2:	4294      	cmp	r4, r2
 80057b4:	d002      	beq.n	80057bc <std+0x48>
 80057b6:	33d0      	adds	r3, #208	@ 0xd0
 80057b8:	429c      	cmp	r4, r3
 80057ba:	d105      	bne.n	80057c8 <std+0x54>
 80057bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057c4:	f000 ba58 	b.w	8005c78 <__retarget_lock_init_recursive>
 80057c8:	bd10      	pop	{r4, pc}
 80057ca:	bf00      	nop
 80057cc:	080059d9 	.word	0x080059d9
 80057d0:	080059fb 	.word	0x080059fb
 80057d4:	08005a33 	.word	0x08005a33
 80057d8:	08005a57 	.word	0x08005a57
 80057dc:	20025a4c 	.word	0x20025a4c

080057e0 <stdio_exit_handler>:
 80057e0:	4a02      	ldr	r2, [pc, #8]	@ (80057ec <stdio_exit_handler+0xc>)
 80057e2:	4903      	ldr	r1, [pc, #12]	@ (80057f0 <stdio_exit_handler+0x10>)
 80057e4:	4803      	ldr	r0, [pc, #12]	@ (80057f4 <stdio_exit_handler+0x14>)
 80057e6:	f000 b869 	b.w	80058bc <_fwalk_sglue>
 80057ea:	bf00      	nop
 80057ec:	2000001c 	.word	0x2000001c
 80057f0:	08006519 	.word	0x08006519
 80057f4:	2000002c 	.word	0x2000002c

080057f8 <cleanup_stdio>:
 80057f8:	6841      	ldr	r1, [r0, #4]
 80057fa:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <cleanup_stdio+0x34>)
 80057fc:	4299      	cmp	r1, r3
 80057fe:	b510      	push	{r4, lr}
 8005800:	4604      	mov	r4, r0
 8005802:	d001      	beq.n	8005808 <cleanup_stdio+0x10>
 8005804:	f000 fe88 	bl	8006518 <_fflush_r>
 8005808:	68a1      	ldr	r1, [r4, #8]
 800580a:	4b09      	ldr	r3, [pc, #36]	@ (8005830 <cleanup_stdio+0x38>)
 800580c:	4299      	cmp	r1, r3
 800580e:	d002      	beq.n	8005816 <cleanup_stdio+0x1e>
 8005810:	4620      	mov	r0, r4
 8005812:	f000 fe81 	bl	8006518 <_fflush_r>
 8005816:	68e1      	ldr	r1, [r4, #12]
 8005818:	4b06      	ldr	r3, [pc, #24]	@ (8005834 <cleanup_stdio+0x3c>)
 800581a:	4299      	cmp	r1, r3
 800581c:	d004      	beq.n	8005828 <cleanup_stdio+0x30>
 800581e:	4620      	mov	r0, r4
 8005820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005824:	f000 be78 	b.w	8006518 <_fflush_r>
 8005828:	bd10      	pop	{r4, pc}
 800582a:	bf00      	nop
 800582c:	20025a4c 	.word	0x20025a4c
 8005830:	20025ab4 	.word	0x20025ab4
 8005834:	20025b1c 	.word	0x20025b1c

08005838 <global_stdio_init.part.0>:
 8005838:	b510      	push	{r4, lr}
 800583a:	4b0b      	ldr	r3, [pc, #44]	@ (8005868 <global_stdio_init.part.0+0x30>)
 800583c:	4c0b      	ldr	r4, [pc, #44]	@ (800586c <global_stdio_init.part.0+0x34>)
 800583e:	4a0c      	ldr	r2, [pc, #48]	@ (8005870 <global_stdio_init.part.0+0x38>)
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	4620      	mov	r0, r4
 8005844:	2200      	movs	r2, #0
 8005846:	2104      	movs	r1, #4
 8005848:	f7ff ff94 	bl	8005774 <std>
 800584c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005850:	2201      	movs	r2, #1
 8005852:	2109      	movs	r1, #9
 8005854:	f7ff ff8e 	bl	8005774 <std>
 8005858:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800585c:	2202      	movs	r2, #2
 800585e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005862:	2112      	movs	r1, #18
 8005864:	f7ff bf86 	b.w	8005774 <std>
 8005868:	20025b84 	.word	0x20025b84
 800586c:	20025a4c 	.word	0x20025a4c
 8005870:	080057e1 	.word	0x080057e1

08005874 <__sfp_lock_acquire>:
 8005874:	4801      	ldr	r0, [pc, #4]	@ (800587c <__sfp_lock_acquire+0x8>)
 8005876:	f000 ba00 	b.w	8005c7a <__retarget_lock_acquire_recursive>
 800587a:	bf00      	nop
 800587c:	20025b8d 	.word	0x20025b8d

08005880 <__sfp_lock_release>:
 8005880:	4801      	ldr	r0, [pc, #4]	@ (8005888 <__sfp_lock_release+0x8>)
 8005882:	f000 b9fb 	b.w	8005c7c <__retarget_lock_release_recursive>
 8005886:	bf00      	nop
 8005888:	20025b8d 	.word	0x20025b8d

0800588c <__sinit>:
 800588c:	b510      	push	{r4, lr}
 800588e:	4604      	mov	r4, r0
 8005890:	f7ff fff0 	bl	8005874 <__sfp_lock_acquire>
 8005894:	6a23      	ldr	r3, [r4, #32]
 8005896:	b11b      	cbz	r3, 80058a0 <__sinit+0x14>
 8005898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800589c:	f7ff bff0 	b.w	8005880 <__sfp_lock_release>
 80058a0:	4b04      	ldr	r3, [pc, #16]	@ (80058b4 <__sinit+0x28>)
 80058a2:	6223      	str	r3, [r4, #32]
 80058a4:	4b04      	ldr	r3, [pc, #16]	@ (80058b8 <__sinit+0x2c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f5      	bne.n	8005898 <__sinit+0xc>
 80058ac:	f7ff ffc4 	bl	8005838 <global_stdio_init.part.0>
 80058b0:	e7f2      	b.n	8005898 <__sinit+0xc>
 80058b2:	bf00      	nop
 80058b4:	080057f9 	.word	0x080057f9
 80058b8:	20025b84 	.word	0x20025b84

080058bc <_fwalk_sglue>:
 80058bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c0:	4607      	mov	r7, r0
 80058c2:	4688      	mov	r8, r1
 80058c4:	4614      	mov	r4, r2
 80058c6:	2600      	movs	r6, #0
 80058c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058cc:	f1b9 0901 	subs.w	r9, r9, #1
 80058d0:	d505      	bpl.n	80058de <_fwalk_sglue+0x22>
 80058d2:	6824      	ldr	r4, [r4, #0]
 80058d4:	2c00      	cmp	r4, #0
 80058d6:	d1f7      	bne.n	80058c8 <_fwalk_sglue+0xc>
 80058d8:	4630      	mov	r0, r6
 80058da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058de:	89ab      	ldrh	r3, [r5, #12]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d907      	bls.n	80058f4 <_fwalk_sglue+0x38>
 80058e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058e8:	3301      	adds	r3, #1
 80058ea:	d003      	beq.n	80058f4 <_fwalk_sglue+0x38>
 80058ec:	4629      	mov	r1, r5
 80058ee:	4638      	mov	r0, r7
 80058f0:	47c0      	blx	r8
 80058f2:	4306      	orrs	r6, r0
 80058f4:	3568      	adds	r5, #104	@ 0x68
 80058f6:	e7e9      	b.n	80058cc <_fwalk_sglue+0x10>

080058f8 <iprintf>:
 80058f8:	b40f      	push	{r0, r1, r2, r3}
 80058fa:	b507      	push	{r0, r1, r2, lr}
 80058fc:	4906      	ldr	r1, [pc, #24]	@ (8005918 <iprintf+0x20>)
 80058fe:	ab04      	add	r3, sp, #16
 8005900:	6808      	ldr	r0, [r1, #0]
 8005902:	f853 2b04 	ldr.w	r2, [r3], #4
 8005906:	6881      	ldr	r1, [r0, #8]
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	f000 fadb 	bl	8005ec4 <_vfiprintf_r>
 800590e:	b003      	add	sp, #12
 8005910:	f85d eb04 	ldr.w	lr, [sp], #4
 8005914:	b004      	add	sp, #16
 8005916:	4770      	bx	lr
 8005918:	20000028 	.word	0x20000028

0800591c <_puts_r>:
 800591c:	6a03      	ldr	r3, [r0, #32]
 800591e:	b570      	push	{r4, r5, r6, lr}
 8005920:	6884      	ldr	r4, [r0, #8]
 8005922:	4605      	mov	r5, r0
 8005924:	460e      	mov	r6, r1
 8005926:	b90b      	cbnz	r3, 800592c <_puts_r+0x10>
 8005928:	f7ff ffb0 	bl	800588c <__sinit>
 800592c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800592e:	07db      	lsls	r3, r3, #31
 8005930:	d405      	bmi.n	800593e <_puts_r+0x22>
 8005932:	89a3      	ldrh	r3, [r4, #12]
 8005934:	0598      	lsls	r0, r3, #22
 8005936:	d402      	bmi.n	800593e <_puts_r+0x22>
 8005938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800593a:	f000 f99e 	bl	8005c7a <__retarget_lock_acquire_recursive>
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	0719      	lsls	r1, r3, #28
 8005942:	d502      	bpl.n	800594a <_puts_r+0x2e>
 8005944:	6923      	ldr	r3, [r4, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d135      	bne.n	80059b6 <_puts_r+0x9a>
 800594a:	4621      	mov	r1, r4
 800594c:	4628      	mov	r0, r5
 800594e:	f000 f8c5 	bl	8005adc <__swsetup_r>
 8005952:	b380      	cbz	r0, 80059b6 <_puts_r+0x9a>
 8005954:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005958:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800595a:	07da      	lsls	r2, r3, #31
 800595c:	d405      	bmi.n	800596a <_puts_r+0x4e>
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	059b      	lsls	r3, r3, #22
 8005962:	d402      	bmi.n	800596a <_puts_r+0x4e>
 8005964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005966:	f000 f989 	bl	8005c7c <__retarget_lock_release_recursive>
 800596a:	4628      	mov	r0, r5
 800596c:	bd70      	pop	{r4, r5, r6, pc}
 800596e:	2b00      	cmp	r3, #0
 8005970:	da04      	bge.n	800597c <_puts_r+0x60>
 8005972:	69a2      	ldr	r2, [r4, #24]
 8005974:	429a      	cmp	r2, r3
 8005976:	dc17      	bgt.n	80059a8 <_puts_r+0x8c>
 8005978:	290a      	cmp	r1, #10
 800597a:	d015      	beq.n	80059a8 <_puts_r+0x8c>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	6022      	str	r2, [r4, #0]
 8005982:	7019      	strb	r1, [r3, #0]
 8005984:	68a3      	ldr	r3, [r4, #8]
 8005986:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800598a:	3b01      	subs	r3, #1
 800598c:	60a3      	str	r3, [r4, #8]
 800598e:	2900      	cmp	r1, #0
 8005990:	d1ed      	bne.n	800596e <_puts_r+0x52>
 8005992:	2b00      	cmp	r3, #0
 8005994:	da11      	bge.n	80059ba <_puts_r+0x9e>
 8005996:	4622      	mov	r2, r4
 8005998:	210a      	movs	r1, #10
 800599a:	4628      	mov	r0, r5
 800599c:	f000 f85f 	bl	8005a5e <__swbuf_r>
 80059a0:	3001      	adds	r0, #1
 80059a2:	d0d7      	beq.n	8005954 <_puts_r+0x38>
 80059a4:	250a      	movs	r5, #10
 80059a6:	e7d7      	b.n	8005958 <_puts_r+0x3c>
 80059a8:	4622      	mov	r2, r4
 80059aa:	4628      	mov	r0, r5
 80059ac:	f000 f857 	bl	8005a5e <__swbuf_r>
 80059b0:	3001      	adds	r0, #1
 80059b2:	d1e7      	bne.n	8005984 <_puts_r+0x68>
 80059b4:	e7ce      	b.n	8005954 <_puts_r+0x38>
 80059b6:	3e01      	subs	r6, #1
 80059b8:	e7e4      	b.n	8005984 <_puts_r+0x68>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	6022      	str	r2, [r4, #0]
 80059c0:	220a      	movs	r2, #10
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	e7ee      	b.n	80059a4 <_puts_r+0x88>
	...

080059c8 <puts>:
 80059c8:	4b02      	ldr	r3, [pc, #8]	@ (80059d4 <puts+0xc>)
 80059ca:	4601      	mov	r1, r0
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	f7ff bfa5 	b.w	800591c <_puts_r>
 80059d2:	bf00      	nop
 80059d4:	20000028 	.word	0x20000028

080059d8 <__sread>:
 80059d8:	b510      	push	{r4, lr}
 80059da:	460c      	mov	r4, r1
 80059dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e0:	f000 f8fc 	bl	8005bdc <_read_r>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	bfab      	itete	ge
 80059e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059ea:	89a3      	ldrhlt	r3, [r4, #12]
 80059ec:	181b      	addge	r3, r3, r0
 80059ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059f2:	bfac      	ite	ge
 80059f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059f6:	81a3      	strhlt	r3, [r4, #12]
 80059f8:	bd10      	pop	{r4, pc}

080059fa <__swrite>:
 80059fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fe:	461f      	mov	r7, r3
 8005a00:	898b      	ldrh	r3, [r1, #12]
 8005a02:	05db      	lsls	r3, r3, #23
 8005a04:	4605      	mov	r5, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	4616      	mov	r6, r2
 8005a0a:	d505      	bpl.n	8005a18 <__swrite+0x1e>
 8005a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a10:	2302      	movs	r3, #2
 8005a12:	2200      	movs	r2, #0
 8005a14:	f000 f8d0 	bl	8005bb8 <_lseek_r>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	4632      	mov	r2, r6
 8005a26:	463b      	mov	r3, r7
 8005a28:	4628      	mov	r0, r5
 8005a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2e:	f000 b8e7 	b.w	8005c00 <_write_r>

08005a32 <__sseek>:
 8005a32:	b510      	push	{r4, lr}
 8005a34:	460c      	mov	r4, r1
 8005a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3a:	f000 f8bd 	bl	8005bb8 <_lseek_r>
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	bf15      	itete	ne
 8005a44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a4e:	81a3      	strheq	r3, [r4, #12]
 8005a50:	bf18      	it	ne
 8005a52:	81a3      	strhne	r3, [r4, #12]
 8005a54:	bd10      	pop	{r4, pc}

08005a56 <__sclose>:
 8005a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5a:	f000 b89d 	b.w	8005b98 <_close_r>

08005a5e <__swbuf_r>:
 8005a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a60:	460e      	mov	r6, r1
 8005a62:	4614      	mov	r4, r2
 8005a64:	4605      	mov	r5, r0
 8005a66:	b118      	cbz	r0, 8005a70 <__swbuf_r+0x12>
 8005a68:	6a03      	ldr	r3, [r0, #32]
 8005a6a:	b90b      	cbnz	r3, 8005a70 <__swbuf_r+0x12>
 8005a6c:	f7ff ff0e 	bl	800588c <__sinit>
 8005a70:	69a3      	ldr	r3, [r4, #24]
 8005a72:	60a3      	str	r3, [r4, #8]
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	071a      	lsls	r2, r3, #28
 8005a78:	d501      	bpl.n	8005a7e <__swbuf_r+0x20>
 8005a7a:	6923      	ldr	r3, [r4, #16]
 8005a7c:	b943      	cbnz	r3, 8005a90 <__swbuf_r+0x32>
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4628      	mov	r0, r5
 8005a82:	f000 f82b 	bl	8005adc <__swsetup_r>
 8005a86:	b118      	cbz	r0, 8005a90 <__swbuf_r+0x32>
 8005a88:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	6922      	ldr	r2, [r4, #16]
 8005a94:	1a98      	subs	r0, r3, r2
 8005a96:	6963      	ldr	r3, [r4, #20]
 8005a98:	b2f6      	uxtb	r6, r6
 8005a9a:	4283      	cmp	r3, r0
 8005a9c:	4637      	mov	r7, r6
 8005a9e:	dc05      	bgt.n	8005aac <__swbuf_r+0x4e>
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 fd38 	bl	8006518 <_fflush_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d1ed      	bne.n	8005a88 <__swbuf_r+0x2a>
 8005aac:	68a3      	ldr	r3, [r4, #8]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	60a3      	str	r3, [r4, #8]
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	6022      	str	r2, [r4, #0]
 8005ab8:	701e      	strb	r6, [r3, #0]
 8005aba:	6962      	ldr	r2, [r4, #20]
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d004      	beq.n	8005acc <__swbuf_r+0x6e>
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	07db      	lsls	r3, r3, #31
 8005ac6:	d5e1      	bpl.n	8005a8c <__swbuf_r+0x2e>
 8005ac8:	2e0a      	cmp	r6, #10
 8005aca:	d1df      	bne.n	8005a8c <__swbuf_r+0x2e>
 8005acc:	4621      	mov	r1, r4
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 fd22 	bl	8006518 <_fflush_r>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d0d9      	beq.n	8005a8c <__swbuf_r+0x2e>
 8005ad8:	e7d6      	b.n	8005a88 <__swbuf_r+0x2a>
	...

08005adc <__swsetup_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4b29      	ldr	r3, [pc, #164]	@ (8005b84 <__swsetup_r+0xa8>)
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	b118      	cbz	r0, 8005af0 <__swsetup_r+0x14>
 8005ae8:	6a03      	ldr	r3, [r0, #32]
 8005aea:	b90b      	cbnz	r3, 8005af0 <__swsetup_r+0x14>
 8005aec:	f7ff fece 	bl	800588c <__sinit>
 8005af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af4:	0719      	lsls	r1, r3, #28
 8005af6:	d422      	bmi.n	8005b3e <__swsetup_r+0x62>
 8005af8:	06da      	lsls	r2, r3, #27
 8005afa:	d407      	bmi.n	8005b0c <__swsetup_r+0x30>
 8005afc:	2209      	movs	r2, #9
 8005afe:	602a      	str	r2, [r5, #0]
 8005b00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b04:	81a3      	strh	r3, [r4, #12]
 8005b06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b0a:	e033      	b.n	8005b74 <__swsetup_r+0x98>
 8005b0c:	0758      	lsls	r0, r3, #29
 8005b0e:	d512      	bpl.n	8005b36 <__swsetup_r+0x5a>
 8005b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b12:	b141      	cbz	r1, 8005b26 <__swsetup_r+0x4a>
 8005b14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b18:	4299      	cmp	r1, r3
 8005b1a:	d002      	beq.n	8005b22 <__swsetup_r+0x46>
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 f8af 	bl	8005c80 <_free_r>
 8005b22:	2300      	movs	r3, #0
 8005b24:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b2c:	81a3      	strh	r3, [r4, #12]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	6063      	str	r3, [r4, #4]
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	f043 0308 	orr.w	r3, r3, #8
 8005b3c:	81a3      	strh	r3, [r4, #12]
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	b94b      	cbnz	r3, 8005b56 <__swsetup_r+0x7a>
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b4c:	d003      	beq.n	8005b56 <__swsetup_r+0x7a>
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 fd2f 	bl	80065b4 <__smakebuf_r>
 8005b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b5a:	f013 0201 	ands.w	r2, r3, #1
 8005b5e:	d00a      	beq.n	8005b76 <__swsetup_r+0x9a>
 8005b60:	2200      	movs	r2, #0
 8005b62:	60a2      	str	r2, [r4, #8]
 8005b64:	6962      	ldr	r2, [r4, #20]
 8005b66:	4252      	negs	r2, r2
 8005b68:	61a2      	str	r2, [r4, #24]
 8005b6a:	6922      	ldr	r2, [r4, #16]
 8005b6c:	b942      	cbnz	r2, 8005b80 <__swsetup_r+0xa4>
 8005b6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b72:	d1c5      	bne.n	8005b00 <__swsetup_r+0x24>
 8005b74:	bd38      	pop	{r3, r4, r5, pc}
 8005b76:	0799      	lsls	r1, r3, #30
 8005b78:	bf58      	it	pl
 8005b7a:	6962      	ldrpl	r2, [r4, #20]
 8005b7c:	60a2      	str	r2, [r4, #8]
 8005b7e:	e7f4      	b.n	8005b6a <__swsetup_r+0x8e>
 8005b80:	2000      	movs	r0, #0
 8005b82:	e7f7      	b.n	8005b74 <__swsetup_r+0x98>
 8005b84:	20000028 	.word	0x20000028

08005b88 <memset>:
 8005b88:	4402      	add	r2, r0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d100      	bne.n	8005b92 <memset+0xa>
 8005b90:	4770      	bx	lr
 8005b92:	f803 1b01 	strb.w	r1, [r3], #1
 8005b96:	e7f9      	b.n	8005b8c <memset+0x4>

08005b98 <_close_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d06      	ldr	r5, [pc, #24]	@ (8005bb4 <_close_r+0x1c>)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	602b      	str	r3, [r5, #0]
 8005ba4:	f7fc fc62 	bl	800246c <_close>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_close_r+0x1a>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_close_r+0x1a>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	20025b88 	.word	0x20025b88

08005bb8 <_lseek_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d07      	ldr	r5, [pc, #28]	@ (8005bd8 <_lseek_r+0x20>)
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	4608      	mov	r0, r1
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	602a      	str	r2, [r5, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f7fc fc77 	bl	80024ba <_lseek>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_lseek_r+0x1e>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_lseek_r+0x1e>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	20025b88 	.word	0x20025b88

08005bdc <_read_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4d07      	ldr	r5, [pc, #28]	@ (8005bfc <_read_r+0x20>)
 8005be0:	4604      	mov	r4, r0
 8005be2:	4608      	mov	r0, r1
 8005be4:	4611      	mov	r1, r2
 8005be6:	2200      	movs	r2, #0
 8005be8:	602a      	str	r2, [r5, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f7fc fc05 	bl	80023fa <_read>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d102      	bne.n	8005bfa <_read_r+0x1e>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	b103      	cbz	r3, 8005bfa <_read_r+0x1e>
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	20025b88 	.word	0x20025b88

08005c00 <_write_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4d07      	ldr	r5, [pc, #28]	@ (8005c20 <_write_r+0x20>)
 8005c04:	4604      	mov	r4, r0
 8005c06:	4608      	mov	r0, r1
 8005c08:	4611      	mov	r1, r2
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	602a      	str	r2, [r5, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f7fc fc10 	bl	8002434 <_write>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d102      	bne.n	8005c1e <_write_r+0x1e>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	b103      	cbz	r3, 8005c1e <_write_r+0x1e>
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	20025b88 	.word	0x20025b88

08005c24 <__errno>:
 8005c24:	4b01      	ldr	r3, [pc, #4]	@ (8005c2c <__errno+0x8>)
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	20000028 	.word	0x20000028

08005c30 <__libc_init_array>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	4d0d      	ldr	r5, [pc, #52]	@ (8005c68 <__libc_init_array+0x38>)
 8005c34:	4c0d      	ldr	r4, [pc, #52]	@ (8005c6c <__libc_init_array+0x3c>)
 8005c36:	1b64      	subs	r4, r4, r5
 8005c38:	10a4      	asrs	r4, r4, #2
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	42a6      	cmp	r6, r4
 8005c3e:	d109      	bne.n	8005c54 <__libc_init_array+0x24>
 8005c40:	4d0b      	ldr	r5, [pc, #44]	@ (8005c70 <__libc_init_array+0x40>)
 8005c42:	4c0c      	ldr	r4, [pc, #48]	@ (8005c74 <__libc_init_array+0x44>)
 8005c44:	f000 fd24 	bl	8006690 <_init>
 8005c48:	1b64      	subs	r4, r4, r5
 8005c4a:	10a4      	asrs	r4, r4, #2
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	42a6      	cmp	r6, r4
 8005c50:	d105      	bne.n	8005c5e <__libc_init_array+0x2e>
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c58:	4798      	blx	r3
 8005c5a:	3601      	adds	r6, #1
 8005c5c:	e7ee      	b.n	8005c3c <__libc_init_array+0xc>
 8005c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c62:	4798      	blx	r3
 8005c64:	3601      	adds	r6, #1
 8005c66:	e7f2      	b.n	8005c4e <__libc_init_array+0x1e>
 8005c68:	08007920 	.word	0x08007920
 8005c6c:	08007920 	.word	0x08007920
 8005c70:	08007920 	.word	0x08007920
 8005c74:	08007924 	.word	0x08007924

08005c78 <__retarget_lock_init_recursive>:
 8005c78:	4770      	bx	lr

08005c7a <__retarget_lock_acquire_recursive>:
 8005c7a:	4770      	bx	lr

08005c7c <__retarget_lock_release_recursive>:
 8005c7c:	4770      	bx	lr
	...

08005c80 <_free_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4605      	mov	r5, r0
 8005c84:	2900      	cmp	r1, #0
 8005c86:	d041      	beq.n	8005d0c <_free_r+0x8c>
 8005c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c8c:	1f0c      	subs	r4, r1, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bfb8      	it	lt
 8005c92:	18e4      	addlt	r4, r4, r3
 8005c94:	f000 f8e0 	bl	8005e58 <__malloc_lock>
 8005c98:	4a1d      	ldr	r2, [pc, #116]	@ (8005d10 <_free_r+0x90>)
 8005c9a:	6813      	ldr	r3, [r2, #0]
 8005c9c:	b933      	cbnz	r3, 8005cac <_free_r+0x2c>
 8005c9e:	6063      	str	r3, [r4, #4]
 8005ca0:	6014      	str	r4, [r2, #0]
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ca8:	f000 b8dc 	b.w	8005e64 <__malloc_unlock>
 8005cac:	42a3      	cmp	r3, r4
 8005cae:	d908      	bls.n	8005cc2 <_free_r+0x42>
 8005cb0:	6820      	ldr	r0, [r4, #0]
 8005cb2:	1821      	adds	r1, r4, r0
 8005cb4:	428b      	cmp	r3, r1
 8005cb6:	bf01      	itttt	eq
 8005cb8:	6819      	ldreq	r1, [r3, #0]
 8005cba:	685b      	ldreq	r3, [r3, #4]
 8005cbc:	1809      	addeq	r1, r1, r0
 8005cbe:	6021      	streq	r1, [r4, #0]
 8005cc0:	e7ed      	b.n	8005c9e <_free_r+0x1e>
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	b10b      	cbz	r3, 8005ccc <_free_r+0x4c>
 8005cc8:	42a3      	cmp	r3, r4
 8005cca:	d9fa      	bls.n	8005cc2 <_free_r+0x42>
 8005ccc:	6811      	ldr	r1, [r2, #0]
 8005cce:	1850      	adds	r0, r2, r1
 8005cd0:	42a0      	cmp	r0, r4
 8005cd2:	d10b      	bne.n	8005cec <_free_r+0x6c>
 8005cd4:	6820      	ldr	r0, [r4, #0]
 8005cd6:	4401      	add	r1, r0
 8005cd8:	1850      	adds	r0, r2, r1
 8005cda:	4283      	cmp	r3, r0
 8005cdc:	6011      	str	r1, [r2, #0]
 8005cde:	d1e0      	bne.n	8005ca2 <_free_r+0x22>
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	6053      	str	r3, [r2, #4]
 8005ce6:	4408      	add	r0, r1
 8005ce8:	6010      	str	r0, [r2, #0]
 8005cea:	e7da      	b.n	8005ca2 <_free_r+0x22>
 8005cec:	d902      	bls.n	8005cf4 <_free_r+0x74>
 8005cee:	230c      	movs	r3, #12
 8005cf0:	602b      	str	r3, [r5, #0]
 8005cf2:	e7d6      	b.n	8005ca2 <_free_r+0x22>
 8005cf4:	6820      	ldr	r0, [r4, #0]
 8005cf6:	1821      	adds	r1, r4, r0
 8005cf8:	428b      	cmp	r3, r1
 8005cfa:	bf04      	itt	eq
 8005cfc:	6819      	ldreq	r1, [r3, #0]
 8005cfe:	685b      	ldreq	r3, [r3, #4]
 8005d00:	6063      	str	r3, [r4, #4]
 8005d02:	bf04      	itt	eq
 8005d04:	1809      	addeq	r1, r1, r0
 8005d06:	6021      	streq	r1, [r4, #0]
 8005d08:	6054      	str	r4, [r2, #4]
 8005d0a:	e7ca      	b.n	8005ca2 <_free_r+0x22>
 8005d0c:	bd38      	pop	{r3, r4, r5, pc}
 8005d0e:	bf00      	nop
 8005d10:	20025b94 	.word	0x20025b94

08005d14 <sbrk_aligned>:
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	4e0f      	ldr	r6, [pc, #60]	@ (8005d54 <sbrk_aligned+0x40>)
 8005d18:	460c      	mov	r4, r1
 8005d1a:	6831      	ldr	r1, [r6, #0]
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	b911      	cbnz	r1, 8005d26 <sbrk_aligned+0x12>
 8005d20:	f000 fca6 	bl	8006670 <_sbrk_r>
 8005d24:	6030      	str	r0, [r6, #0]
 8005d26:	4621      	mov	r1, r4
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f000 fca1 	bl	8006670 <_sbrk_r>
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	d103      	bne.n	8005d3a <sbrk_aligned+0x26>
 8005d32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005d36:	4620      	mov	r0, r4
 8005d38:	bd70      	pop	{r4, r5, r6, pc}
 8005d3a:	1cc4      	adds	r4, r0, #3
 8005d3c:	f024 0403 	bic.w	r4, r4, #3
 8005d40:	42a0      	cmp	r0, r4
 8005d42:	d0f8      	beq.n	8005d36 <sbrk_aligned+0x22>
 8005d44:	1a21      	subs	r1, r4, r0
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 fc92 	bl	8006670 <_sbrk_r>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d1f2      	bne.n	8005d36 <sbrk_aligned+0x22>
 8005d50:	e7ef      	b.n	8005d32 <sbrk_aligned+0x1e>
 8005d52:	bf00      	nop
 8005d54:	20025b90 	.word	0x20025b90

08005d58 <_malloc_r>:
 8005d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d5c:	1ccd      	adds	r5, r1, #3
 8005d5e:	f025 0503 	bic.w	r5, r5, #3
 8005d62:	3508      	adds	r5, #8
 8005d64:	2d0c      	cmp	r5, #12
 8005d66:	bf38      	it	cc
 8005d68:	250c      	movcc	r5, #12
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	db01      	blt.n	8005d74 <_malloc_r+0x1c>
 8005d70:	42a9      	cmp	r1, r5
 8005d72:	d904      	bls.n	8005d7e <_malloc_r+0x26>
 8005d74:	230c      	movs	r3, #12
 8005d76:	6033      	str	r3, [r6, #0]
 8005d78:	2000      	movs	r0, #0
 8005d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e54 <_malloc_r+0xfc>
 8005d82:	f000 f869 	bl	8005e58 <__malloc_lock>
 8005d86:	f8d8 3000 	ldr.w	r3, [r8]
 8005d8a:	461c      	mov	r4, r3
 8005d8c:	bb44      	cbnz	r4, 8005de0 <_malloc_r+0x88>
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7ff ffbf 	bl	8005d14 <sbrk_aligned>
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	4604      	mov	r4, r0
 8005d9a:	d158      	bne.n	8005e4e <_malloc_r+0xf6>
 8005d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8005da0:	4627      	mov	r7, r4
 8005da2:	2f00      	cmp	r7, #0
 8005da4:	d143      	bne.n	8005e2e <_malloc_r+0xd6>
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	d04b      	beq.n	8005e42 <_malloc_r+0xea>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	4639      	mov	r1, r7
 8005dae:	4630      	mov	r0, r6
 8005db0:	eb04 0903 	add.w	r9, r4, r3
 8005db4:	f000 fc5c 	bl	8006670 <_sbrk_r>
 8005db8:	4581      	cmp	r9, r0
 8005dba:	d142      	bne.n	8005e42 <_malloc_r+0xea>
 8005dbc:	6821      	ldr	r1, [r4, #0]
 8005dbe:	1a6d      	subs	r5, r5, r1
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7ff ffa6 	bl	8005d14 <sbrk_aligned>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d03a      	beq.n	8005e42 <_malloc_r+0xea>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	442b      	add	r3, r5
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	bb62      	cbnz	r2, 8005e34 <_malloc_r+0xdc>
 8005dda:	f8c8 7000 	str.w	r7, [r8]
 8005dde:	e00f      	b.n	8005e00 <_malloc_r+0xa8>
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	1b52      	subs	r2, r2, r5
 8005de4:	d420      	bmi.n	8005e28 <_malloc_r+0xd0>
 8005de6:	2a0b      	cmp	r2, #11
 8005de8:	d917      	bls.n	8005e1a <_malloc_r+0xc2>
 8005dea:	1961      	adds	r1, r4, r5
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	6025      	str	r5, [r4, #0]
 8005df0:	bf18      	it	ne
 8005df2:	6059      	strne	r1, [r3, #4]
 8005df4:	6863      	ldr	r3, [r4, #4]
 8005df6:	bf08      	it	eq
 8005df8:	f8c8 1000 	streq.w	r1, [r8]
 8005dfc:	5162      	str	r2, [r4, r5]
 8005dfe:	604b      	str	r3, [r1, #4]
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 f82f 	bl	8005e64 <__malloc_unlock>
 8005e06:	f104 000b 	add.w	r0, r4, #11
 8005e0a:	1d23      	adds	r3, r4, #4
 8005e0c:	f020 0007 	bic.w	r0, r0, #7
 8005e10:	1ac2      	subs	r2, r0, r3
 8005e12:	bf1c      	itt	ne
 8005e14:	1a1b      	subne	r3, r3, r0
 8005e16:	50a3      	strne	r3, [r4, r2]
 8005e18:	e7af      	b.n	8005d7a <_malloc_r+0x22>
 8005e1a:	6862      	ldr	r2, [r4, #4]
 8005e1c:	42a3      	cmp	r3, r4
 8005e1e:	bf0c      	ite	eq
 8005e20:	f8c8 2000 	streq.w	r2, [r8]
 8005e24:	605a      	strne	r2, [r3, #4]
 8005e26:	e7eb      	b.n	8005e00 <_malloc_r+0xa8>
 8005e28:	4623      	mov	r3, r4
 8005e2a:	6864      	ldr	r4, [r4, #4]
 8005e2c:	e7ae      	b.n	8005d8c <_malloc_r+0x34>
 8005e2e:	463c      	mov	r4, r7
 8005e30:	687f      	ldr	r7, [r7, #4]
 8005e32:	e7b6      	b.n	8005da2 <_malloc_r+0x4a>
 8005e34:	461a      	mov	r2, r3
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	d1fb      	bne.n	8005e34 <_malloc_r+0xdc>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	6053      	str	r3, [r2, #4]
 8005e40:	e7de      	b.n	8005e00 <_malloc_r+0xa8>
 8005e42:	230c      	movs	r3, #12
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	4630      	mov	r0, r6
 8005e48:	f000 f80c 	bl	8005e64 <__malloc_unlock>
 8005e4c:	e794      	b.n	8005d78 <_malloc_r+0x20>
 8005e4e:	6005      	str	r5, [r0, #0]
 8005e50:	e7d6      	b.n	8005e00 <_malloc_r+0xa8>
 8005e52:	bf00      	nop
 8005e54:	20025b94 	.word	0x20025b94

08005e58 <__malloc_lock>:
 8005e58:	4801      	ldr	r0, [pc, #4]	@ (8005e60 <__malloc_lock+0x8>)
 8005e5a:	f7ff bf0e 	b.w	8005c7a <__retarget_lock_acquire_recursive>
 8005e5e:	bf00      	nop
 8005e60:	20025b8c 	.word	0x20025b8c

08005e64 <__malloc_unlock>:
 8005e64:	4801      	ldr	r0, [pc, #4]	@ (8005e6c <__malloc_unlock+0x8>)
 8005e66:	f7ff bf09 	b.w	8005c7c <__retarget_lock_release_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	20025b8c 	.word	0x20025b8c

08005e70 <__sfputc_r>:
 8005e70:	6893      	ldr	r3, [r2, #8]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	b410      	push	{r4}
 8005e78:	6093      	str	r3, [r2, #8]
 8005e7a:	da08      	bge.n	8005e8e <__sfputc_r+0x1e>
 8005e7c:	6994      	ldr	r4, [r2, #24]
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	db01      	blt.n	8005e86 <__sfputc_r+0x16>
 8005e82:	290a      	cmp	r1, #10
 8005e84:	d103      	bne.n	8005e8e <__sfputc_r+0x1e>
 8005e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e8a:	f7ff bde8 	b.w	8005a5e <__swbuf_r>
 8005e8e:	6813      	ldr	r3, [r2, #0]
 8005e90:	1c58      	adds	r0, r3, #1
 8005e92:	6010      	str	r0, [r2, #0]
 8005e94:	7019      	strb	r1, [r3, #0]
 8005e96:	4608      	mov	r0, r1
 8005e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <__sfputs_r>:
 8005e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	460f      	mov	r7, r1
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	18d5      	adds	r5, r2, r3
 8005ea8:	42ac      	cmp	r4, r5
 8005eaa:	d101      	bne.n	8005eb0 <__sfputs_r+0x12>
 8005eac:	2000      	movs	r0, #0
 8005eae:	e007      	b.n	8005ec0 <__sfputs_r+0x22>
 8005eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb4:	463a      	mov	r2, r7
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f7ff ffda 	bl	8005e70 <__sfputc_r>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d1f3      	bne.n	8005ea8 <__sfputs_r+0xa>
 8005ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ec4 <_vfiprintf_r>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	460d      	mov	r5, r1
 8005eca:	b09d      	sub	sp, #116	@ 0x74
 8005ecc:	4614      	mov	r4, r2
 8005ece:	4698      	mov	r8, r3
 8005ed0:	4606      	mov	r6, r0
 8005ed2:	b118      	cbz	r0, 8005edc <_vfiprintf_r+0x18>
 8005ed4:	6a03      	ldr	r3, [r0, #32]
 8005ed6:	b90b      	cbnz	r3, 8005edc <_vfiprintf_r+0x18>
 8005ed8:	f7ff fcd8 	bl	800588c <__sinit>
 8005edc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ede:	07d9      	lsls	r1, r3, #31
 8005ee0:	d405      	bmi.n	8005eee <_vfiprintf_r+0x2a>
 8005ee2:	89ab      	ldrh	r3, [r5, #12]
 8005ee4:	059a      	lsls	r2, r3, #22
 8005ee6:	d402      	bmi.n	8005eee <_vfiprintf_r+0x2a>
 8005ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005eea:	f7ff fec6 	bl	8005c7a <__retarget_lock_acquire_recursive>
 8005eee:	89ab      	ldrh	r3, [r5, #12]
 8005ef0:	071b      	lsls	r3, r3, #28
 8005ef2:	d501      	bpl.n	8005ef8 <_vfiprintf_r+0x34>
 8005ef4:	692b      	ldr	r3, [r5, #16]
 8005ef6:	b99b      	cbnz	r3, 8005f20 <_vfiprintf_r+0x5c>
 8005ef8:	4629      	mov	r1, r5
 8005efa:	4630      	mov	r0, r6
 8005efc:	f7ff fdee 	bl	8005adc <__swsetup_r>
 8005f00:	b170      	cbz	r0, 8005f20 <_vfiprintf_r+0x5c>
 8005f02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f04:	07dc      	lsls	r4, r3, #31
 8005f06:	d504      	bpl.n	8005f12 <_vfiprintf_r+0x4e>
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f0c:	b01d      	add	sp, #116	@ 0x74
 8005f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f12:	89ab      	ldrh	r3, [r5, #12]
 8005f14:	0598      	lsls	r0, r3, #22
 8005f16:	d4f7      	bmi.n	8005f08 <_vfiprintf_r+0x44>
 8005f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f1a:	f7ff feaf 	bl	8005c7c <__retarget_lock_release_recursive>
 8005f1e:	e7f3      	b.n	8005f08 <_vfiprintf_r+0x44>
 8005f20:	2300      	movs	r3, #0
 8005f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f24:	2320      	movs	r3, #32
 8005f26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f2e:	2330      	movs	r3, #48	@ 0x30
 8005f30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80060e0 <_vfiprintf_r+0x21c>
 8005f34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f38:	f04f 0901 	mov.w	r9, #1
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	469a      	mov	sl, r3
 8005f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f44:	b10a      	cbz	r2, 8005f4a <_vfiprintf_r+0x86>
 8005f46:	2a25      	cmp	r2, #37	@ 0x25
 8005f48:	d1f9      	bne.n	8005f3e <_vfiprintf_r+0x7a>
 8005f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f4e:	d00b      	beq.n	8005f68 <_vfiprintf_r+0xa4>
 8005f50:	465b      	mov	r3, fp
 8005f52:	4622      	mov	r2, r4
 8005f54:	4629      	mov	r1, r5
 8005f56:	4630      	mov	r0, r6
 8005f58:	f7ff ffa1 	bl	8005e9e <__sfputs_r>
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	f000 80a7 	beq.w	80060b0 <_vfiprintf_r+0x1ec>
 8005f62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f64:	445a      	add	r2, fp
 8005f66:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f68:	f89a 3000 	ldrb.w	r3, [sl]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 809f 	beq.w	80060b0 <_vfiprintf_r+0x1ec>
 8005f72:	2300      	movs	r3, #0
 8005f74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f7c:	f10a 0a01 	add.w	sl, sl, #1
 8005f80:	9304      	str	r3, [sp, #16]
 8005f82:	9307      	str	r3, [sp, #28]
 8005f84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f88:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f8a:	4654      	mov	r4, sl
 8005f8c:	2205      	movs	r2, #5
 8005f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f92:	4853      	ldr	r0, [pc, #332]	@ (80060e0 <_vfiprintf_r+0x21c>)
 8005f94:	f7fa f92c 	bl	80001f0 <memchr>
 8005f98:	9a04      	ldr	r2, [sp, #16]
 8005f9a:	b9d8      	cbnz	r0, 8005fd4 <_vfiprintf_r+0x110>
 8005f9c:	06d1      	lsls	r1, r2, #27
 8005f9e:	bf44      	itt	mi
 8005fa0:	2320      	movmi	r3, #32
 8005fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fa6:	0713      	lsls	r3, r2, #28
 8005fa8:	bf44      	itt	mi
 8005faa:	232b      	movmi	r3, #43	@ 0x2b
 8005fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fb6:	d015      	beq.n	8005fe4 <_vfiprintf_r+0x120>
 8005fb8:	9a07      	ldr	r2, [sp, #28]
 8005fba:	4654      	mov	r4, sl
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	f04f 0c0a 	mov.w	ip, #10
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fc8:	3b30      	subs	r3, #48	@ 0x30
 8005fca:	2b09      	cmp	r3, #9
 8005fcc:	d94b      	bls.n	8006066 <_vfiprintf_r+0x1a2>
 8005fce:	b1b0      	cbz	r0, 8005ffe <_vfiprintf_r+0x13a>
 8005fd0:	9207      	str	r2, [sp, #28]
 8005fd2:	e014      	b.n	8005ffe <_vfiprintf_r+0x13a>
 8005fd4:	eba0 0308 	sub.w	r3, r0, r8
 8005fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	9304      	str	r3, [sp, #16]
 8005fe0:	46a2      	mov	sl, r4
 8005fe2:	e7d2      	b.n	8005f8a <_vfiprintf_r+0xc6>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	1d19      	adds	r1, r3, #4
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	9103      	str	r1, [sp, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bfbb      	ittet	lt
 8005ff0:	425b      	neglt	r3, r3
 8005ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ff6:	9307      	strge	r3, [sp, #28]
 8005ff8:	9307      	strlt	r3, [sp, #28]
 8005ffa:	bfb8      	it	lt
 8005ffc:	9204      	strlt	r2, [sp, #16]
 8005ffe:	7823      	ldrb	r3, [r4, #0]
 8006000:	2b2e      	cmp	r3, #46	@ 0x2e
 8006002:	d10a      	bne.n	800601a <_vfiprintf_r+0x156>
 8006004:	7863      	ldrb	r3, [r4, #1]
 8006006:	2b2a      	cmp	r3, #42	@ 0x2a
 8006008:	d132      	bne.n	8006070 <_vfiprintf_r+0x1ac>
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	1d1a      	adds	r2, r3, #4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	9203      	str	r2, [sp, #12]
 8006012:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006016:	3402      	adds	r4, #2
 8006018:	9305      	str	r3, [sp, #20]
 800601a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80060f0 <_vfiprintf_r+0x22c>
 800601e:	7821      	ldrb	r1, [r4, #0]
 8006020:	2203      	movs	r2, #3
 8006022:	4650      	mov	r0, sl
 8006024:	f7fa f8e4 	bl	80001f0 <memchr>
 8006028:	b138      	cbz	r0, 800603a <_vfiprintf_r+0x176>
 800602a:	9b04      	ldr	r3, [sp, #16]
 800602c:	eba0 000a 	sub.w	r0, r0, sl
 8006030:	2240      	movs	r2, #64	@ 0x40
 8006032:	4082      	lsls	r2, r0
 8006034:	4313      	orrs	r3, r2
 8006036:	3401      	adds	r4, #1
 8006038:	9304      	str	r3, [sp, #16]
 800603a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603e:	4829      	ldr	r0, [pc, #164]	@ (80060e4 <_vfiprintf_r+0x220>)
 8006040:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006044:	2206      	movs	r2, #6
 8006046:	f7fa f8d3 	bl	80001f0 <memchr>
 800604a:	2800      	cmp	r0, #0
 800604c:	d03f      	beq.n	80060ce <_vfiprintf_r+0x20a>
 800604e:	4b26      	ldr	r3, [pc, #152]	@ (80060e8 <_vfiprintf_r+0x224>)
 8006050:	bb1b      	cbnz	r3, 800609a <_vfiprintf_r+0x1d6>
 8006052:	9b03      	ldr	r3, [sp, #12]
 8006054:	3307      	adds	r3, #7
 8006056:	f023 0307 	bic.w	r3, r3, #7
 800605a:	3308      	adds	r3, #8
 800605c:	9303      	str	r3, [sp, #12]
 800605e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006060:	443b      	add	r3, r7
 8006062:	9309      	str	r3, [sp, #36]	@ 0x24
 8006064:	e76a      	b.n	8005f3c <_vfiprintf_r+0x78>
 8006066:	fb0c 3202 	mla	r2, ip, r2, r3
 800606a:	460c      	mov	r4, r1
 800606c:	2001      	movs	r0, #1
 800606e:	e7a8      	b.n	8005fc2 <_vfiprintf_r+0xfe>
 8006070:	2300      	movs	r3, #0
 8006072:	3401      	adds	r4, #1
 8006074:	9305      	str	r3, [sp, #20]
 8006076:	4619      	mov	r1, r3
 8006078:	f04f 0c0a 	mov.w	ip, #10
 800607c:	4620      	mov	r0, r4
 800607e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006082:	3a30      	subs	r2, #48	@ 0x30
 8006084:	2a09      	cmp	r2, #9
 8006086:	d903      	bls.n	8006090 <_vfiprintf_r+0x1cc>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0c6      	beq.n	800601a <_vfiprintf_r+0x156>
 800608c:	9105      	str	r1, [sp, #20]
 800608e:	e7c4      	b.n	800601a <_vfiprintf_r+0x156>
 8006090:	fb0c 2101 	mla	r1, ip, r1, r2
 8006094:	4604      	mov	r4, r0
 8006096:	2301      	movs	r3, #1
 8006098:	e7f0      	b.n	800607c <_vfiprintf_r+0x1b8>
 800609a:	ab03      	add	r3, sp, #12
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	462a      	mov	r2, r5
 80060a0:	4b12      	ldr	r3, [pc, #72]	@ (80060ec <_vfiprintf_r+0x228>)
 80060a2:	a904      	add	r1, sp, #16
 80060a4:	4630      	mov	r0, r6
 80060a6:	f3af 8000 	nop.w
 80060aa:	4607      	mov	r7, r0
 80060ac:	1c78      	adds	r0, r7, #1
 80060ae:	d1d6      	bne.n	800605e <_vfiprintf_r+0x19a>
 80060b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060b2:	07d9      	lsls	r1, r3, #31
 80060b4:	d405      	bmi.n	80060c2 <_vfiprintf_r+0x1fe>
 80060b6:	89ab      	ldrh	r3, [r5, #12]
 80060b8:	059a      	lsls	r2, r3, #22
 80060ba:	d402      	bmi.n	80060c2 <_vfiprintf_r+0x1fe>
 80060bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060be:	f7ff fddd 	bl	8005c7c <__retarget_lock_release_recursive>
 80060c2:	89ab      	ldrh	r3, [r5, #12]
 80060c4:	065b      	lsls	r3, r3, #25
 80060c6:	f53f af1f 	bmi.w	8005f08 <_vfiprintf_r+0x44>
 80060ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060cc:	e71e      	b.n	8005f0c <_vfiprintf_r+0x48>
 80060ce:	ab03      	add	r3, sp, #12
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	462a      	mov	r2, r5
 80060d4:	4b05      	ldr	r3, [pc, #20]	@ (80060ec <_vfiprintf_r+0x228>)
 80060d6:	a904      	add	r1, sp, #16
 80060d8:	4630      	mov	r0, r6
 80060da:	f000 f879 	bl	80061d0 <_printf_i>
 80060de:	e7e4      	b.n	80060aa <_vfiprintf_r+0x1e6>
 80060e0:	080078e4 	.word	0x080078e4
 80060e4:	080078ee 	.word	0x080078ee
 80060e8:	00000000 	.word	0x00000000
 80060ec:	08005e9f 	.word	0x08005e9f
 80060f0:	080078ea 	.word	0x080078ea

080060f4 <_printf_common>:
 80060f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f8:	4616      	mov	r6, r2
 80060fa:	4698      	mov	r8, r3
 80060fc:	688a      	ldr	r2, [r1, #8]
 80060fe:	690b      	ldr	r3, [r1, #16]
 8006100:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006104:	4293      	cmp	r3, r2
 8006106:	bfb8      	it	lt
 8006108:	4613      	movlt	r3, r2
 800610a:	6033      	str	r3, [r6, #0]
 800610c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006110:	4607      	mov	r7, r0
 8006112:	460c      	mov	r4, r1
 8006114:	b10a      	cbz	r2, 800611a <_printf_common+0x26>
 8006116:	3301      	adds	r3, #1
 8006118:	6033      	str	r3, [r6, #0]
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	0699      	lsls	r1, r3, #26
 800611e:	bf42      	ittt	mi
 8006120:	6833      	ldrmi	r3, [r6, #0]
 8006122:	3302      	addmi	r3, #2
 8006124:	6033      	strmi	r3, [r6, #0]
 8006126:	6825      	ldr	r5, [r4, #0]
 8006128:	f015 0506 	ands.w	r5, r5, #6
 800612c:	d106      	bne.n	800613c <_printf_common+0x48>
 800612e:	f104 0a19 	add.w	sl, r4, #25
 8006132:	68e3      	ldr	r3, [r4, #12]
 8006134:	6832      	ldr	r2, [r6, #0]
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	42ab      	cmp	r3, r5
 800613a:	dc26      	bgt.n	800618a <_printf_common+0x96>
 800613c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006140:	6822      	ldr	r2, [r4, #0]
 8006142:	3b00      	subs	r3, #0
 8006144:	bf18      	it	ne
 8006146:	2301      	movne	r3, #1
 8006148:	0692      	lsls	r2, r2, #26
 800614a:	d42b      	bmi.n	80061a4 <_printf_common+0xb0>
 800614c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006150:	4641      	mov	r1, r8
 8006152:	4638      	mov	r0, r7
 8006154:	47c8      	blx	r9
 8006156:	3001      	adds	r0, #1
 8006158:	d01e      	beq.n	8006198 <_printf_common+0xa4>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	6922      	ldr	r2, [r4, #16]
 800615e:	f003 0306 	and.w	r3, r3, #6
 8006162:	2b04      	cmp	r3, #4
 8006164:	bf02      	ittt	eq
 8006166:	68e5      	ldreq	r5, [r4, #12]
 8006168:	6833      	ldreq	r3, [r6, #0]
 800616a:	1aed      	subeq	r5, r5, r3
 800616c:	68a3      	ldr	r3, [r4, #8]
 800616e:	bf0c      	ite	eq
 8006170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006174:	2500      	movne	r5, #0
 8006176:	4293      	cmp	r3, r2
 8006178:	bfc4      	itt	gt
 800617a:	1a9b      	subgt	r3, r3, r2
 800617c:	18ed      	addgt	r5, r5, r3
 800617e:	2600      	movs	r6, #0
 8006180:	341a      	adds	r4, #26
 8006182:	42b5      	cmp	r5, r6
 8006184:	d11a      	bne.n	80061bc <_printf_common+0xc8>
 8006186:	2000      	movs	r0, #0
 8006188:	e008      	b.n	800619c <_printf_common+0xa8>
 800618a:	2301      	movs	r3, #1
 800618c:	4652      	mov	r2, sl
 800618e:	4641      	mov	r1, r8
 8006190:	4638      	mov	r0, r7
 8006192:	47c8      	blx	r9
 8006194:	3001      	adds	r0, #1
 8006196:	d103      	bne.n	80061a0 <_printf_common+0xac>
 8006198:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800619c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a0:	3501      	adds	r5, #1
 80061a2:	e7c6      	b.n	8006132 <_printf_common+0x3e>
 80061a4:	18e1      	adds	r1, r4, r3
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	2030      	movs	r0, #48	@ 0x30
 80061aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061ae:	4422      	add	r2, r4
 80061b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061b8:	3302      	adds	r3, #2
 80061ba:	e7c7      	b.n	800614c <_printf_common+0x58>
 80061bc:	2301      	movs	r3, #1
 80061be:	4622      	mov	r2, r4
 80061c0:	4641      	mov	r1, r8
 80061c2:	4638      	mov	r0, r7
 80061c4:	47c8      	blx	r9
 80061c6:	3001      	adds	r0, #1
 80061c8:	d0e6      	beq.n	8006198 <_printf_common+0xa4>
 80061ca:	3601      	adds	r6, #1
 80061cc:	e7d9      	b.n	8006182 <_printf_common+0x8e>
	...

080061d0 <_printf_i>:
 80061d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	7e0f      	ldrb	r7, [r1, #24]
 80061d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061d8:	2f78      	cmp	r7, #120	@ 0x78
 80061da:	4691      	mov	r9, r2
 80061dc:	4680      	mov	r8, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	469a      	mov	sl, r3
 80061e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061e6:	d807      	bhi.n	80061f8 <_printf_i+0x28>
 80061e8:	2f62      	cmp	r7, #98	@ 0x62
 80061ea:	d80a      	bhi.n	8006202 <_printf_i+0x32>
 80061ec:	2f00      	cmp	r7, #0
 80061ee:	f000 80d2 	beq.w	8006396 <_printf_i+0x1c6>
 80061f2:	2f58      	cmp	r7, #88	@ 0x58
 80061f4:	f000 80b9 	beq.w	800636a <_printf_i+0x19a>
 80061f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006200:	e03a      	b.n	8006278 <_printf_i+0xa8>
 8006202:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006206:	2b15      	cmp	r3, #21
 8006208:	d8f6      	bhi.n	80061f8 <_printf_i+0x28>
 800620a:	a101      	add	r1, pc, #4	@ (adr r1, 8006210 <_printf_i+0x40>)
 800620c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006210:	08006269 	.word	0x08006269
 8006214:	0800627d 	.word	0x0800627d
 8006218:	080061f9 	.word	0x080061f9
 800621c:	080061f9 	.word	0x080061f9
 8006220:	080061f9 	.word	0x080061f9
 8006224:	080061f9 	.word	0x080061f9
 8006228:	0800627d 	.word	0x0800627d
 800622c:	080061f9 	.word	0x080061f9
 8006230:	080061f9 	.word	0x080061f9
 8006234:	080061f9 	.word	0x080061f9
 8006238:	080061f9 	.word	0x080061f9
 800623c:	0800637d 	.word	0x0800637d
 8006240:	080062a7 	.word	0x080062a7
 8006244:	08006337 	.word	0x08006337
 8006248:	080061f9 	.word	0x080061f9
 800624c:	080061f9 	.word	0x080061f9
 8006250:	0800639f 	.word	0x0800639f
 8006254:	080061f9 	.word	0x080061f9
 8006258:	080062a7 	.word	0x080062a7
 800625c:	080061f9 	.word	0x080061f9
 8006260:	080061f9 	.word	0x080061f9
 8006264:	0800633f 	.word	0x0800633f
 8006268:	6833      	ldr	r3, [r6, #0]
 800626a:	1d1a      	adds	r2, r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6032      	str	r2, [r6, #0]
 8006270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006274:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006278:	2301      	movs	r3, #1
 800627a:	e09d      	b.n	80063b8 <_printf_i+0x1e8>
 800627c:	6833      	ldr	r3, [r6, #0]
 800627e:	6820      	ldr	r0, [r4, #0]
 8006280:	1d19      	adds	r1, r3, #4
 8006282:	6031      	str	r1, [r6, #0]
 8006284:	0606      	lsls	r6, r0, #24
 8006286:	d501      	bpl.n	800628c <_printf_i+0xbc>
 8006288:	681d      	ldr	r5, [r3, #0]
 800628a:	e003      	b.n	8006294 <_printf_i+0xc4>
 800628c:	0645      	lsls	r5, r0, #25
 800628e:	d5fb      	bpl.n	8006288 <_printf_i+0xb8>
 8006290:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006294:	2d00      	cmp	r5, #0
 8006296:	da03      	bge.n	80062a0 <_printf_i+0xd0>
 8006298:	232d      	movs	r3, #45	@ 0x2d
 800629a:	426d      	negs	r5, r5
 800629c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062a0:	4859      	ldr	r0, [pc, #356]	@ (8006408 <_printf_i+0x238>)
 80062a2:	230a      	movs	r3, #10
 80062a4:	e011      	b.n	80062ca <_printf_i+0xfa>
 80062a6:	6821      	ldr	r1, [r4, #0]
 80062a8:	6833      	ldr	r3, [r6, #0]
 80062aa:	0608      	lsls	r0, r1, #24
 80062ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80062b0:	d402      	bmi.n	80062b8 <_printf_i+0xe8>
 80062b2:	0649      	lsls	r1, r1, #25
 80062b4:	bf48      	it	mi
 80062b6:	b2ad      	uxthmi	r5, r5
 80062b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80062ba:	4853      	ldr	r0, [pc, #332]	@ (8006408 <_printf_i+0x238>)
 80062bc:	6033      	str	r3, [r6, #0]
 80062be:	bf14      	ite	ne
 80062c0:	230a      	movne	r3, #10
 80062c2:	2308      	moveq	r3, #8
 80062c4:	2100      	movs	r1, #0
 80062c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062ca:	6866      	ldr	r6, [r4, #4]
 80062cc:	60a6      	str	r6, [r4, #8]
 80062ce:	2e00      	cmp	r6, #0
 80062d0:	bfa2      	ittt	ge
 80062d2:	6821      	ldrge	r1, [r4, #0]
 80062d4:	f021 0104 	bicge.w	r1, r1, #4
 80062d8:	6021      	strge	r1, [r4, #0]
 80062da:	b90d      	cbnz	r5, 80062e0 <_printf_i+0x110>
 80062dc:	2e00      	cmp	r6, #0
 80062de:	d04b      	beq.n	8006378 <_printf_i+0x1a8>
 80062e0:	4616      	mov	r6, r2
 80062e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80062e6:	fb03 5711 	mls	r7, r3, r1, r5
 80062ea:	5dc7      	ldrb	r7, [r0, r7]
 80062ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062f0:	462f      	mov	r7, r5
 80062f2:	42bb      	cmp	r3, r7
 80062f4:	460d      	mov	r5, r1
 80062f6:	d9f4      	bls.n	80062e2 <_printf_i+0x112>
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d10b      	bne.n	8006314 <_printf_i+0x144>
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	07df      	lsls	r7, r3, #31
 8006300:	d508      	bpl.n	8006314 <_printf_i+0x144>
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	6861      	ldr	r1, [r4, #4]
 8006306:	4299      	cmp	r1, r3
 8006308:	bfde      	ittt	le
 800630a:	2330      	movle	r3, #48	@ 0x30
 800630c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006310:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006314:	1b92      	subs	r2, r2, r6
 8006316:	6122      	str	r2, [r4, #16]
 8006318:	f8cd a000 	str.w	sl, [sp]
 800631c:	464b      	mov	r3, r9
 800631e:	aa03      	add	r2, sp, #12
 8006320:	4621      	mov	r1, r4
 8006322:	4640      	mov	r0, r8
 8006324:	f7ff fee6 	bl	80060f4 <_printf_common>
 8006328:	3001      	adds	r0, #1
 800632a:	d14a      	bne.n	80063c2 <_printf_i+0x1f2>
 800632c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006330:	b004      	add	sp, #16
 8006332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	f043 0320 	orr.w	r3, r3, #32
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	4833      	ldr	r0, [pc, #204]	@ (800640c <_printf_i+0x23c>)
 8006340:	2778      	movs	r7, #120	@ 0x78
 8006342:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	6831      	ldr	r1, [r6, #0]
 800634a:	061f      	lsls	r7, r3, #24
 800634c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006350:	d402      	bmi.n	8006358 <_printf_i+0x188>
 8006352:	065f      	lsls	r7, r3, #25
 8006354:	bf48      	it	mi
 8006356:	b2ad      	uxthmi	r5, r5
 8006358:	6031      	str	r1, [r6, #0]
 800635a:	07d9      	lsls	r1, r3, #31
 800635c:	bf44      	itt	mi
 800635e:	f043 0320 	orrmi.w	r3, r3, #32
 8006362:	6023      	strmi	r3, [r4, #0]
 8006364:	b11d      	cbz	r5, 800636e <_printf_i+0x19e>
 8006366:	2310      	movs	r3, #16
 8006368:	e7ac      	b.n	80062c4 <_printf_i+0xf4>
 800636a:	4827      	ldr	r0, [pc, #156]	@ (8006408 <_printf_i+0x238>)
 800636c:	e7e9      	b.n	8006342 <_printf_i+0x172>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	f023 0320 	bic.w	r3, r3, #32
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	e7f6      	b.n	8006366 <_printf_i+0x196>
 8006378:	4616      	mov	r6, r2
 800637a:	e7bd      	b.n	80062f8 <_printf_i+0x128>
 800637c:	6833      	ldr	r3, [r6, #0]
 800637e:	6825      	ldr	r5, [r4, #0]
 8006380:	6961      	ldr	r1, [r4, #20]
 8006382:	1d18      	adds	r0, r3, #4
 8006384:	6030      	str	r0, [r6, #0]
 8006386:	062e      	lsls	r6, r5, #24
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	d501      	bpl.n	8006390 <_printf_i+0x1c0>
 800638c:	6019      	str	r1, [r3, #0]
 800638e:	e002      	b.n	8006396 <_printf_i+0x1c6>
 8006390:	0668      	lsls	r0, r5, #25
 8006392:	d5fb      	bpl.n	800638c <_printf_i+0x1bc>
 8006394:	8019      	strh	r1, [r3, #0]
 8006396:	2300      	movs	r3, #0
 8006398:	6123      	str	r3, [r4, #16]
 800639a:	4616      	mov	r6, r2
 800639c:	e7bc      	b.n	8006318 <_printf_i+0x148>
 800639e:	6833      	ldr	r3, [r6, #0]
 80063a0:	1d1a      	adds	r2, r3, #4
 80063a2:	6032      	str	r2, [r6, #0]
 80063a4:	681e      	ldr	r6, [r3, #0]
 80063a6:	6862      	ldr	r2, [r4, #4]
 80063a8:	2100      	movs	r1, #0
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7f9 ff20 	bl	80001f0 <memchr>
 80063b0:	b108      	cbz	r0, 80063b6 <_printf_i+0x1e6>
 80063b2:	1b80      	subs	r0, r0, r6
 80063b4:	6060      	str	r0, [r4, #4]
 80063b6:	6863      	ldr	r3, [r4, #4]
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	2300      	movs	r3, #0
 80063bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063c0:	e7aa      	b.n	8006318 <_printf_i+0x148>
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	4632      	mov	r2, r6
 80063c6:	4649      	mov	r1, r9
 80063c8:	4640      	mov	r0, r8
 80063ca:	47d0      	blx	sl
 80063cc:	3001      	adds	r0, #1
 80063ce:	d0ad      	beq.n	800632c <_printf_i+0x15c>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	079b      	lsls	r3, r3, #30
 80063d4:	d413      	bmi.n	80063fe <_printf_i+0x22e>
 80063d6:	68e0      	ldr	r0, [r4, #12]
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	4298      	cmp	r0, r3
 80063dc:	bfb8      	it	lt
 80063de:	4618      	movlt	r0, r3
 80063e0:	e7a6      	b.n	8006330 <_printf_i+0x160>
 80063e2:	2301      	movs	r3, #1
 80063e4:	4632      	mov	r2, r6
 80063e6:	4649      	mov	r1, r9
 80063e8:	4640      	mov	r0, r8
 80063ea:	47d0      	blx	sl
 80063ec:	3001      	adds	r0, #1
 80063ee:	d09d      	beq.n	800632c <_printf_i+0x15c>
 80063f0:	3501      	adds	r5, #1
 80063f2:	68e3      	ldr	r3, [r4, #12]
 80063f4:	9903      	ldr	r1, [sp, #12]
 80063f6:	1a5b      	subs	r3, r3, r1
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dcf2      	bgt.n	80063e2 <_printf_i+0x212>
 80063fc:	e7eb      	b.n	80063d6 <_printf_i+0x206>
 80063fe:	2500      	movs	r5, #0
 8006400:	f104 0619 	add.w	r6, r4, #25
 8006404:	e7f5      	b.n	80063f2 <_printf_i+0x222>
 8006406:	bf00      	nop
 8006408:	080078f5 	.word	0x080078f5
 800640c:	08007906 	.word	0x08007906

08006410 <__sflush_r>:
 8006410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006418:	0716      	lsls	r6, r2, #28
 800641a:	4605      	mov	r5, r0
 800641c:	460c      	mov	r4, r1
 800641e:	d454      	bmi.n	80064ca <__sflush_r+0xba>
 8006420:	684b      	ldr	r3, [r1, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	dc02      	bgt.n	800642c <__sflush_r+0x1c>
 8006426:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	dd48      	ble.n	80064be <__sflush_r+0xae>
 800642c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800642e:	2e00      	cmp	r6, #0
 8006430:	d045      	beq.n	80064be <__sflush_r+0xae>
 8006432:	2300      	movs	r3, #0
 8006434:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006438:	682f      	ldr	r7, [r5, #0]
 800643a:	6a21      	ldr	r1, [r4, #32]
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	d030      	beq.n	80064a2 <__sflush_r+0x92>
 8006440:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	0759      	lsls	r1, r3, #29
 8006446:	d505      	bpl.n	8006454 <__sflush_r+0x44>
 8006448:	6863      	ldr	r3, [r4, #4]
 800644a:	1ad2      	subs	r2, r2, r3
 800644c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800644e:	b10b      	cbz	r3, 8006454 <__sflush_r+0x44>
 8006450:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006452:	1ad2      	subs	r2, r2, r3
 8006454:	2300      	movs	r3, #0
 8006456:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006458:	6a21      	ldr	r1, [r4, #32]
 800645a:	4628      	mov	r0, r5
 800645c:	47b0      	blx	r6
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	d106      	bne.n	8006472 <__sflush_r+0x62>
 8006464:	6829      	ldr	r1, [r5, #0]
 8006466:	291d      	cmp	r1, #29
 8006468:	d82b      	bhi.n	80064c2 <__sflush_r+0xb2>
 800646a:	4a2a      	ldr	r2, [pc, #168]	@ (8006514 <__sflush_r+0x104>)
 800646c:	410a      	asrs	r2, r1
 800646e:	07d6      	lsls	r6, r2, #31
 8006470:	d427      	bmi.n	80064c2 <__sflush_r+0xb2>
 8006472:	2200      	movs	r2, #0
 8006474:	6062      	str	r2, [r4, #4]
 8006476:	04d9      	lsls	r1, r3, #19
 8006478:	6922      	ldr	r2, [r4, #16]
 800647a:	6022      	str	r2, [r4, #0]
 800647c:	d504      	bpl.n	8006488 <__sflush_r+0x78>
 800647e:	1c42      	adds	r2, r0, #1
 8006480:	d101      	bne.n	8006486 <__sflush_r+0x76>
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	b903      	cbnz	r3, 8006488 <__sflush_r+0x78>
 8006486:	6560      	str	r0, [r4, #84]	@ 0x54
 8006488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800648a:	602f      	str	r7, [r5, #0]
 800648c:	b1b9      	cbz	r1, 80064be <__sflush_r+0xae>
 800648e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006492:	4299      	cmp	r1, r3
 8006494:	d002      	beq.n	800649c <__sflush_r+0x8c>
 8006496:	4628      	mov	r0, r5
 8006498:	f7ff fbf2 	bl	8005c80 <_free_r>
 800649c:	2300      	movs	r3, #0
 800649e:	6363      	str	r3, [r4, #52]	@ 0x34
 80064a0:	e00d      	b.n	80064be <__sflush_r+0xae>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b0      	blx	r6
 80064a8:	4602      	mov	r2, r0
 80064aa:	1c50      	adds	r0, r2, #1
 80064ac:	d1c9      	bne.n	8006442 <__sflush_r+0x32>
 80064ae:	682b      	ldr	r3, [r5, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0c6      	beq.n	8006442 <__sflush_r+0x32>
 80064b4:	2b1d      	cmp	r3, #29
 80064b6:	d001      	beq.n	80064bc <__sflush_r+0xac>
 80064b8:	2b16      	cmp	r3, #22
 80064ba:	d11e      	bne.n	80064fa <__sflush_r+0xea>
 80064bc:	602f      	str	r7, [r5, #0]
 80064be:	2000      	movs	r0, #0
 80064c0:	e022      	b.n	8006508 <__sflush_r+0xf8>
 80064c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064c6:	b21b      	sxth	r3, r3
 80064c8:	e01b      	b.n	8006502 <__sflush_r+0xf2>
 80064ca:	690f      	ldr	r7, [r1, #16]
 80064cc:	2f00      	cmp	r7, #0
 80064ce:	d0f6      	beq.n	80064be <__sflush_r+0xae>
 80064d0:	0793      	lsls	r3, r2, #30
 80064d2:	680e      	ldr	r6, [r1, #0]
 80064d4:	bf08      	it	eq
 80064d6:	694b      	ldreq	r3, [r1, #20]
 80064d8:	600f      	str	r7, [r1, #0]
 80064da:	bf18      	it	ne
 80064dc:	2300      	movne	r3, #0
 80064de:	eba6 0807 	sub.w	r8, r6, r7
 80064e2:	608b      	str	r3, [r1, #8]
 80064e4:	f1b8 0f00 	cmp.w	r8, #0
 80064e8:	dde9      	ble.n	80064be <__sflush_r+0xae>
 80064ea:	6a21      	ldr	r1, [r4, #32]
 80064ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80064ee:	4643      	mov	r3, r8
 80064f0:	463a      	mov	r2, r7
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b0      	blx	r6
 80064f6:	2800      	cmp	r0, #0
 80064f8:	dc08      	bgt.n	800650c <__sflush_r+0xfc>
 80064fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800650c:	4407      	add	r7, r0
 800650e:	eba8 0800 	sub.w	r8, r8, r0
 8006512:	e7e7      	b.n	80064e4 <__sflush_r+0xd4>
 8006514:	dfbffffe 	.word	0xdfbffffe

08006518 <_fflush_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	4605      	mov	r5, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b913      	cbnz	r3, 8006528 <_fflush_r+0x10>
 8006522:	2500      	movs	r5, #0
 8006524:	4628      	mov	r0, r5
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	b118      	cbz	r0, 8006532 <_fflush_r+0x1a>
 800652a:	6a03      	ldr	r3, [r0, #32]
 800652c:	b90b      	cbnz	r3, 8006532 <_fflush_r+0x1a>
 800652e:	f7ff f9ad 	bl	800588c <__sinit>
 8006532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0f3      	beq.n	8006522 <_fflush_r+0xa>
 800653a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800653c:	07d0      	lsls	r0, r2, #31
 800653e:	d404      	bmi.n	800654a <_fflush_r+0x32>
 8006540:	0599      	lsls	r1, r3, #22
 8006542:	d402      	bmi.n	800654a <_fflush_r+0x32>
 8006544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006546:	f7ff fb98 	bl	8005c7a <__retarget_lock_acquire_recursive>
 800654a:	4628      	mov	r0, r5
 800654c:	4621      	mov	r1, r4
 800654e:	f7ff ff5f 	bl	8006410 <__sflush_r>
 8006552:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006554:	07da      	lsls	r2, r3, #31
 8006556:	4605      	mov	r5, r0
 8006558:	d4e4      	bmi.n	8006524 <_fflush_r+0xc>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	059b      	lsls	r3, r3, #22
 800655e:	d4e1      	bmi.n	8006524 <_fflush_r+0xc>
 8006560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006562:	f7ff fb8b 	bl	8005c7c <__retarget_lock_release_recursive>
 8006566:	e7dd      	b.n	8006524 <_fflush_r+0xc>

08006568 <__swhatbuf_r>:
 8006568:	b570      	push	{r4, r5, r6, lr}
 800656a:	460c      	mov	r4, r1
 800656c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006570:	2900      	cmp	r1, #0
 8006572:	b096      	sub	sp, #88	@ 0x58
 8006574:	4615      	mov	r5, r2
 8006576:	461e      	mov	r6, r3
 8006578:	da0d      	bge.n	8006596 <__swhatbuf_r+0x2e>
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006580:	f04f 0100 	mov.w	r1, #0
 8006584:	bf14      	ite	ne
 8006586:	2340      	movne	r3, #64	@ 0x40
 8006588:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800658c:	2000      	movs	r0, #0
 800658e:	6031      	str	r1, [r6, #0]
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	b016      	add	sp, #88	@ 0x58
 8006594:	bd70      	pop	{r4, r5, r6, pc}
 8006596:	466a      	mov	r2, sp
 8006598:	f000 f848 	bl	800662c <_fstat_r>
 800659c:	2800      	cmp	r0, #0
 800659e:	dbec      	blt.n	800657a <__swhatbuf_r+0x12>
 80065a0:	9901      	ldr	r1, [sp, #4]
 80065a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065aa:	4259      	negs	r1, r3
 80065ac:	4159      	adcs	r1, r3
 80065ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065b2:	e7eb      	b.n	800658c <__swhatbuf_r+0x24>

080065b4 <__smakebuf_r>:
 80065b4:	898b      	ldrh	r3, [r1, #12]
 80065b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b8:	079d      	lsls	r5, r3, #30
 80065ba:	4606      	mov	r6, r0
 80065bc:	460c      	mov	r4, r1
 80065be:	d507      	bpl.n	80065d0 <__smakebuf_r+0x1c>
 80065c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	6123      	str	r3, [r4, #16]
 80065c8:	2301      	movs	r3, #1
 80065ca:	6163      	str	r3, [r4, #20]
 80065cc:	b003      	add	sp, #12
 80065ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d0:	ab01      	add	r3, sp, #4
 80065d2:	466a      	mov	r2, sp
 80065d4:	f7ff ffc8 	bl	8006568 <__swhatbuf_r>
 80065d8:	9f00      	ldr	r7, [sp, #0]
 80065da:	4605      	mov	r5, r0
 80065dc:	4639      	mov	r1, r7
 80065de:	4630      	mov	r0, r6
 80065e0:	f7ff fbba 	bl	8005d58 <_malloc_r>
 80065e4:	b948      	cbnz	r0, 80065fa <__smakebuf_r+0x46>
 80065e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ea:	059a      	lsls	r2, r3, #22
 80065ec:	d4ee      	bmi.n	80065cc <__smakebuf_r+0x18>
 80065ee:	f023 0303 	bic.w	r3, r3, #3
 80065f2:	f043 0302 	orr.w	r3, r3, #2
 80065f6:	81a3      	strh	r3, [r4, #12]
 80065f8:	e7e2      	b.n	80065c0 <__smakebuf_r+0xc>
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	6020      	str	r0, [r4, #0]
 80065fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	9b01      	ldr	r3, [sp, #4]
 8006606:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800660a:	b15b      	cbz	r3, 8006624 <__smakebuf_r+0x70>
 800660c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006610:	4630      	mov	r0, r6
 8006612:	f000 f81d 	bl	8006650 <_isatty_r>
 8006616:	b128      	cbz	r0, 8006624 <__smakebuf_r+0x70>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	f023 0303 	bic.w	r3, r3, #3
 800661e:	f043 0301 	orr.w	r3, r3, #1
 8006622:	81a3      	strh	r3, [r4, #12]
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	431d      	orrs	r5, r3
 8006628:	81a5      	strh	r5, [r4, #12]
 800662a:	e7cf      	b.n	80065cc <__smakebuf_r+0x18>

0800662c <_fstat_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4d07      	ldr	r5, [pc, #28]	@ (800664c <_fstat_r+0x20>)
 8006630:	2300      	movs	r3, #0
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	4611      	mov	r1, r2
 8006638:	602b      	str	r3, [r5, #0]
 800663a:	f7fb ff23 	bl	8002484 <_fstat>
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	d102      	bne.n	8006648 <_fstat_r+0x1c>
 8006642:	682b      	ldr	r3, [r5, #0]
 8006644:	b103      	cbz	r3, 8006648 <_fstat_r+0x1c>
 8006646:	6023      	str	r3, [r4, #0]
 8006648:	bd38      	pop	{r3, r4, r5, pc}
 800664a:	bf00      	nop
 800664c:	20025b88 	.word	0x20025b88

08006650 <_isatty_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4d06      	ldr	r5, [pc, #24]	@ (800666c <_isatty_r+0x1c>)
 8006654:	2300      	movs	r3, #0
 8006656:	4604      	mov	r4, r0
 8006658:	4608      	mov	r0, r1
 800665a:	602b      	str	r3, [r5, #0]
 800665c:	f7fb ff22 	bl	80024a4 <_isatty>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_isatty_r+0x1a>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_isatty_r+0x1a>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	20025b88 	.word	0x20025b88

08006670 <_sbrk_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d06      	ldr	r5, [pc, #24]	@ (800668c <_sbrk_r+0x1c>)
 8006674:	2300      	movs	r3, #0
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	f7fb ff2a 	bl	80024d4 <_sbrk>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_sbrk_r+0x1a>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_sbrk_r+0x1a>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	20025b88 	.word	0x20025b88

08006690 <_init>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr

0800669c <_fini>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr
