
EJohnsonFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003530  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e0  080036dc  080036dc  000046dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048bc  080048bc  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  080048bc  080048bc  000058bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c4  080048c4  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c4  080048c4  000058c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048c8  080048c8  000058c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080048cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000601c  2**0
                  CONTENTS
 10 .bss          00025958  2000001c  2000001c  0000601c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025974  20025974  0000601c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ec6  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eca  00000000  00000000  0000ff12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  00011de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079d  00000000  00000000  00012830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c07  00000000  00000000  00012fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc6a  00000000  00000000  00038bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e05dc  00000000  00000000  0004483e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124e1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028a8  00000000  00000000  00124e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00127708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080036c4 	.word	0x080036c4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	080036c4 	.word	0x080036c4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f001 f888 	bl	80015f4 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f912 	bl	800070c <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f8cf 	bl	800068c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 f9d4 	bl	80008a0 <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	@ 0x30
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
 8000506:	4b5a      	ldr	r3, [pc, #360]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800050a:	4a59      	ldr	r2, [pc, #356]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800050c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000510:	6453      	str	r3, [r2, #68]	@ 0x44
 8000512:	4b57      	ldr	r3, [pc, #348]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000516:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800051a:	61bb      	str	r3, [r7, #24]
 800051c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	4b53      	ldr	r3, [pc, #332]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	4a52      	ldr	r2, [pc, #328]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	@ 0x30
 800052e:	4b50      	ldr	r3, [pc, #320]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	4b4c      	ldr	r3, [pc, #304]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a4b      	ldr	r2, [pc, #300]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b49      	ldr	r3, [pc, #292]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	4b45      	ldr	r3, [pc, #276]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a44      	ldr	r2, [pc, #272]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b42      	ldr	r3, [pc, #264]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	4b3e      	ldr	r3, [pc, #248]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	4a3d      	ldr	r2, [pc, #244]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	6313      	str	r3, [r2, #48]	@ 0x30
 8000582:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b37      	ldr	r3, [pc, #220]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	4a36      	ldr	r2, [pc, #216]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	6313      	str	r3, [r2, #48]	@ 0x30
 800059e:	4b34      	ldr	r3, [pc, #208]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	f003 0320 	and.w	r3, r3, #32
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b30      	ldr	r3, [pc, #192]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80005c6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80005ca:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80005d4:	2302      	movs	r3, #2
 80005d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80005d8:	230e      	movs	r3, #14
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	4824      	ldr	r0, [pc, #144]	@ (8000674 <LCD_GPIO_Init+0x178>)
 80005e4:	f001 f9c6 	bl	8001974 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80005e8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80005ec:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	4820      	ldr	r0, [pc, #128]	@ (8000678 <LCD_GPIO_Init+0x17c>)
 80005f6:	f001 f9bd 	bl	8001974 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80005fa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80005fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	481d      	ldr	r0, [pc, #116]	@ (800067c <LCD_GPIO_Init+0x180>)
 8000608:	f001 f9b4 	bl	8001974 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800060c:	2348      	movs	r3, #72	@ 0x48
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	481a      	ldr	r0, [pc, #104]	@ (8000680 <LCD_GPIO_Init+0x184>)
 8000618:	f001 f9ac 	bl	8001974 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800061c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4816      	ldr	r0, [pc, #88]	@ (8000684 <LCD_GPIO_Init+0x188>)
 800062a:	f001 f9a3 	bl	8001974 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800062e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000632:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4813      	ldr	r0, [pc, #76]	@ (8000688 <LCD_GPIO_Init+0x18c>)
 800063c:	f001 f99a 	bl	8001974 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000640:	2303      	movs	r3, #3
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000644:	2309      	movs	r3, #9
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	480a      	ldr	r0, [pc, #40]	@ (8000678 <LCD_GPIO_Init+0x17c>)
 8000650:	f001 f990 	bl	8001974 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000654:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	4809      	ldr	r0, [pc, #36]	@ (8000688 <LCD_GPIO_Init+0x18c>)
 8000662:	f001 f987 	bl	8001974 <HAL_GPIO_Init>
}
 8000666:	bf00      	nop
 8000668:	3730      	adds	r7, #48	@ 0x30
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40020000 	.word	0x40020000
 8000678:	40020400 	.word	0x40020400
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	40021400 	.word	0x40021400
 8000688:	40021800 	.word	0x40021800

0800068c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b090      	sub	sp, #64	@ 0x40
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800069a:	23f0      	movs	r3, #240	@ 0xf0
 800069c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80006a2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006a6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80006ac:	23ff      	movs	r3, #255	@ 0xff
 80006ae:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006ba:	2305      	movs	r3, #5
 80006bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <LTCD_Layer_Init+0x78>)
 80006c6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80006c8:	23f0      	movs	r3, #240	@ 0xf0
 80006ca:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80006cc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006d0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4806      	ldr	r0, [pc, #24]	@ (8000708 <LTCD_Layer_Init+0x7c>)
 80006ee:	f001 fce3 	bl	80020b8 <HAL_LTDC_ConfigLayer>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80006f8:	f000 fa6a 	bl	8000bd0 <LCD_Error_Handler>
	}
}
 80006fc:	bf00      	nop
 80006fe:	3740      	adds	r7, #64	@ 0x40
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000114 	.word	0x20000114
 8000708:	20000038 	.word	0x20000038

0800070c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000710:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <LTCD__Init+0xb0>)
 8000712:	4a2b      	ldr	r2, [pc, #172]	@ (80007c0 <LTCD__Init+0xb4>)
 8000714:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <LTCD__Init+0xb0>)
 8000718:	2209      	movs	r2, #9
 800071a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <LTCD__Init+0xb0>)
 800071e:	2201      	movs	r2, #1
 8000720:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <LTCD__Init+0xb0>)
 8000724:	221d      	movs	r2, #29
 8000726:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000728:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <LTCD__Init+0xb0>)
 800072a:	2203      	movs	r2, #3
 800072c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800072e:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <LTCD__Init+0xb0>)
 8000730:	f240 120d 	movw	r2, #269	@ 0x10d
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <LTCD__Init+0xb0>)
 8000738:	f240 1243 	movw	r2, #323	@ 0x143
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800073e:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <LTCD__Init+0xb0>)
 8000740:	f240 1217 	movw	r2, #279	@ 0x117
 8000744:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <LTCD__Init+0xb0>)
 8000748:	f240 1247 	movw	r2, #327	@ 0x147
 800074c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <LTCD__Init+0xb0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <LTCD__Init+0xb0>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <LTCD__Init+0xb0>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <LTCD__Init+0xb8>)
 8000768:	2208      	movs	r2, #8
 800076a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <LTCD__Init+0xb8>)
 800076e:	22c0      	movs	r2, #192	@ 0xc0
 8000770:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <LTCD__Init+0xb8>)
 8000774:	2204      	movs	r2, #4
 8000776:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <LTCD__Init+0xb8>)
 800077a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800077e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000780:	4810      	ldr	r0, [pc, #64]	@ (80007c4 <LTCD__Init+0xb8>)
 8000782:	f002 fad3 	bl	8002d2c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <LTCD__Init+0xb0>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800078c:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <LTCD__Init+0xb0>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000792:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <LTCD__Init+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <LTCD__Init+0xb0>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800079e:	f7ff fead 	bl	80004fc <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007a2:	4806      	ldr	r0, [pc, #24]	@ (80007bc <LTCD__Init+0xb0>)
 80007a4:	f001 fbb8 	bl	8001f18 <HAL_LTDC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80007ae:	f000 fa0f 	bl	8000bd0 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80007b2:	f000 fa13 	bl	8000bdc <ili9341_Init>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000038 	.word	0x20000038
 80007c0:	40016800 	.word	0x40016800
 80007c4:	200000e0 	.word	0x200000e0

080007c8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	80fb      	strh	r3, [r7, #6]
 80007d2:	460b      	mov	r3, r1
 80007d4:	80bb      	strh	r3, [r7, #4]
 80007d6:	4613      	mov	r3, r2
 80007d8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80007da:	88ba      	ldrh	r2, [r7, #4]
 80007dc:	4613      	mov	r3, r2
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	1a9b      	subs	r3, r3, r2
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	461a      	mov	r2, r3
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	4413      	add	r3, r2
 80007ea:	4905      	ldr	r1, [pc, #20]	@ (8000800 <LCD_Draw_Pixel+0x38>)
 80007ec:	887a      	ldrh	r2, [r7, #2]
 80007ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000114 	.word	0x20000114

08000804 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4604      	mov	r4, r0
 800080c:	4608      	mov	r0, r1
 800080e:	4611      	mov	r1, r2
 8000810:	461a      	mov	r2, r3
 8000812:	4623      	mov	r3, r4
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	4603      	mov	r3, r0
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	807b      	strh	r3, [r7, #2]
 800081e:	4613      	mov	r3, r2
 8000820:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000822:	2300      	movs	r3, #0
 8000824:	81fb      	strh	r3, [r7, #14]
 8000826:	e00b      	b.n	8000840 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000828:	89fa      	ldrh	r2, [r7, #14]
 800082a:	88bb      	ldrh	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	b299      	uxth	r1, r3
 8000830:	883a      	ldrh	r2, [r7, #0]
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ffc7 	bl	80007c8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	3301      	adds	r3, #1
 800083e:	81fb      	strh	r3, [r7, #14]
 8000840:	89fa      	ldrh	r2, [r7, #14]
 8000842:	887b      	ldrh	r3, [r7, #2]
 8000844:	429a      	cmp	r2, r3
 8000846:	d3ef      	bcc.n	8000828 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}

08000852 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000852:	b590      	push	{r4, r7, lr}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	4604      	mov	r4, r0
 800085a:	4608      	mov	r0, r1
 800085c:	4611      	mov	r1, r2
 800085e:	461a      	mov	r2, r3
 8000860:	4623      	mov	r3, r4
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	4603      	mov	r3, r0
 8000866:	80bb      	strh	r3, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
 800086c:	4613      	mov	r3, r2
 800086e:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000870:	2300      	movs	r3, #0
 8000872:	81fb      	strh	r3, [r7, #14]
 8000874:	e00b      	b.n	800088e <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000876:	89fa      	ldrh	r2, [r7, #14]
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	4413      	add	r3, r2
 800087c:	b29b      	uxth	r3, r3
 800087e:	883a      	ldrh	r2, [r7, #0]
 8000880:	88b9      	ldrh	r1, [r7, #4]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffa0 	bl	80007c8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000888:	89fb      	ldrh	r3, [r7, #14]
 800088a:	3301      	adds	r3, #1
 800088c:	81fb      	strh	r3, [r7, #14]
 800088e:	89fa      	ldrh	r2, [r7, #14]
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	429a      	cmp	r2, r3
 8000894:	d3ef      	bcc.n	8000876 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000896:	bf00      	nop
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	bd90      	pop	{r4, r7, pc}

080008a0 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	460a      	mov	r2, r1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d10e      	bne.n	80008d4 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	e007      	b.n	80008cc <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80008bc:	4908      	ldr	r1, [pc, #32]	@ (80008e0 <LCD_Clear+0x40>)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	88ba      	ldrh	r2, [r7, #4]
 80008c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3301      	adds	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80008d2:	d3f3      	bcc.n	80008bc <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	20000114 	.word	0x20000114

080008e4 <LCD_Draw_Rectangle_Empty>:

void LCD_Draw_Rectangle_Empty(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4604      	mov	r4, r0
 80008ec:	4608      	mov	r0, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	4623      	mov	r3, r4
 80008f4:	80fb      	strh	r3, [r7, #6]
 80008f6:	4603      	mov	r3, r0
 80008f8:	80bb      	strh	r3, [r7, #4]
 80008fa:	460b      	mov	r3, r1
 80008fc:	807b      	strh	r3, [r7, #2]
 80008fe:	4613      	mov	r3, r2
 8000900:	803b      	strh	r3, [r7, #0]
	//draw vertical x,y,height
	//draw vertical x+length,y,height
	//draw horizontal x,y,length
	//draw horizontal x,y+height,length
	LCD_Draw_Vertical_Line(Xpos,Ypos,height,color);
 8000902:	8b3b      	ldrh	r3, [r7, #24]
 8000904:	883a      	ldrh	r2, [r7, #0]
 8000906:	88b9      	ldrh	r1, [r7, #4]
 8000908:	88f8      	ldrh	r0, [r7, #6]
 800090a:	f7ff ff7b 	bl	8000804 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(Xpos+len,Ypos,height,color);
 800090e:	88fa      	ldrh	r2, [r7, #6]
 8000910:	887b      	ldrh	r3, [r7, #2]
 8000912:	4413      	add	r3, r2
 8000914:	b298      	uxth	r0, r3
 8000916:	8b3b      	ldrh	r3, [r7, #24]
 8000918:	883a      	ldrh	r2, [r7, #0]
 800091a:	88b9      	ldrh	r1, [r7, #4]
 800091c:	f7ff ff72 	bl	8000804 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos,len,color);
 8000920:	8b3b      	ldrh	r3, [r7, #24]
 8000922:	887a      	ldrh	r2, [r7, #2]
 8000924:	88b9      	ldrh	r1, [r7, #4]
 8000926:	88f8      	ldrh	r0, [r7, #6]
 8000928:	f7ff ff93 	bl	8000852 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos+height,len,color);
 800092c:	88ba      	ldrh	r2, [r7, #4]
 800092e:	883b      	ldrh	r3, [r7, #0]
 8000930:	4413      	add	r3, r2
 8000932:	b299      	uxth	r1, r3
 8000934:	8b3b      	ldrh	r3, [r7, #24]
 8000936:	887a      	ldrh	r2, [r7, #2]
 8000938:	88f8      	ldrh	r0, [r7, #6]
 800093a:	f7ff ff8a 	bl	8000852 <LCD_Draw_Horizontal_Line>
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bd90      	pop	{r4, r7, pc}

08000946 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 8000946:	b590      	push	{r4, r7, lr}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	4604      	mov	r4, r0
 800094e:	4608      	mov	r0, r1
 8000950:	4611      	mov	r1, r2
 8000952:	461a      	mov	r2, r3
 8000954:	4623      	mov	r3, r4
 8000956:	80fb      	strh	r3, [r7, #6]
 8000958:	4603      	mov	r3, r0
 800095a:	80bb      	strh	r3, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	807b      	strh	r3, [r7, #2]
 8000960:	4613      	mov	r3, r2
 8000962:	803b      	strh	r3, [r7, #0]
	for(int i = Xpos; i < Xpos+len; i++){
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	e00c      	b.n	8000984 <LCD_Draw_Rectangle_Fill+0x3e>
		//Draw a bunch of vertical lines from left to right
		LCD_Draw_Vertical_Line(Xpos+i,Ypos,height,color);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	b29a      	uxth	r2, r3
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	4413      	add	r3, r2
 8000972:	b298      	uxth	r0, r3
 8000974:	8c3b      	ldrh	r3, [r7, #32]
 8000976:	883a      	ldrh	r2, [r7, #0]
 8000978:	88b9      	ldrh	r1, [r7, #4]
 800097a:	f7ff ff43 	bl	8000804 <LCD_Draw_Vertical_Line>
	for(int i = Xpos; i < Xpos+len; i++){
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3301      	adds	r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	88fa      	ldrh	r2, [r7, #6]
 8000986:	887b      	ldrh	r3, [r7, #2]
 8000988:	4413      	add	r3, r2
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	429a      	cmp	r2, r3
 800098e:	dbec      	blt.n	800096a <LCD_Draw_Rectangle_Fill+0x24>
	}
	//i = xpos actually does not make sense lmao
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bd90      	pop	{r4, r7, pc}

0800099a <LCD_Draw_OBlock>:

void LCD_Draw_OBlock(uint16_t Xpos, uint16_t Ypos){
 800099a:	b580      	push	{r7, lr}
 800099c:	b084      	sub	sp, #16
 800099e:	af02      	add	r7, sp, #8
 80009a0:	4603      	mov	r3, r0
 80009a2:	460a      	mov	r2, r1
 80009a4:	80fb      	strh	r3, [r7, #6]
 80009a6:	4613      	mov	r3, r2
 80009a8:	80bb      	strh	r3, [r7, #4]
	//yellow
	//2x2
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,20,20,LCD_COLOR_YELLOW);
 80009aa:	88b9      	ldrh	r1, [r7, #4]
 80009ac:	88f8      	ldrh	r0, [r7, #6]
 80009ae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2314      	movs	r3, #20
 80009b6:	2214      	movs	r2, #20
 80009b8:	f7ff ffc5 	bl	8000946 <LCD_Draw_Rectangle_Fill>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <LCD_SetTextColor>:
	//3 tall
}

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80009ce:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <LCD_SetTextColor+0x1c>)
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	8013      	strh	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20000000 	.word	0x20000000

080009e4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <LCD_SetFont+0x1c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000110 	.word	0x20000110

08000a04 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	603a      	str	r2, [r7, #0]
 8000a0e:	80fb      	strh	r3, [r7, #6]
 8000a10:	460b      	mov	r3, r1
 8000a12:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e04c      	b.n	8000abc <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	e03f      	b.n	8000aa8 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	4619      	mov	r1, r3
 8000a34:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <LCD_Draw_Char+0xd0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	889b      	ldrh	r3, [r3, #4]
 8000a3a:	4a27      	ldr	r2, [pc, #156]	@ (8000ad8 <LCD_Draw_Char+0xd4>)
 8000a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a40:	08db      	lsrs	r3, r3, #3
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	2280      	movs	r2, #128	@ 0x80
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	fa42 f303 	asr.w	r3, r2, r3
 8000a50:	400b      	ands	r3, r1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d104      	bne.n	8000a60 <LCD_Draw_Char+0x5c>
 8000a56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <LCD_Draw_Char+0xd0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	889b      	ldrh	r3, [r3, #4]
 8000a5c:	2b0c      	cmp	r3, #12
 8000a5e:	d920      	bls.n	8000aa2 <LCD_Draw_Char+0x9e>
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	fa42 f303 	asr.w	r3, r2, r3
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d104      	bne.n	8000a84 <LCD_Draw_Char+0x80>
 8000a7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <LCD_Draw_Char+0xd0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	889b      	ldrh	r3, [r3, #4]
 8000a80:	2b0c      	cmp	r3, #12
 8000a82:	d80e      	bhi.n	8000aa2 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b298      	uxth	r0, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <LCD_Draw_Char+0xd8>)
 8000a9a:	8812      	ldrh	r2, [r2, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f7ff fe93 	bl	80007c8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <LCD_Draw_Char+0xd0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	889b      	ldrh	r3, [r3, #4]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d3b8      	bcc.n	8000a28 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <LCD_Draw_Char+0xd0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	88db      	ldrh	r3, [r3, #6]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d3ab      	bcc.n	8000a22 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000110 	.word	0x20000110
 8000ad8:	aaaaaaab 	.word	0xaaaaaaab
 8000adc:	20000000 	.word	0x20000000

08000ae0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	460b      	mov	r3, r1
 8000aec:	80bb      	strh	r3, [r7, #4]
 8000aee:	4613      	mov	r3, r2
 8000af0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	3b20      	subs	r3, #32
 8000af6:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000af8:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <LCD_DisplayChar+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	4907      	ldr	r1, [pc, #28]	@ (8000b20 <LCD_DisplayChar+0x40>)
 8000b02:	6809      	ldr	r1, [r1, #0]
 8000b04:	88c9      	ldrh	r1, [r1, #6]
 8000b06:	fb01 f303 	mul.w	r3, r1, r3
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	441a      	add	r2, r3
 8000b0e:	88b9      	ldrh	r1, [r7, #4]
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff76 	bl	8000a04 <LCD_Draw_Char>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000110 	.word	0x20000110

08000b24 <screen1>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void screen1(void){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000b2a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff feb6 	bl	80008a0 <LCD_Clear>

	//"Tetris"
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff ff45 	bl	80009c4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000b3a:	4824      	ldr	r0, [pc, #144]	@ (8000bcc <screen1+0xa8>)
 8000b3c:	f7ff ff52 	bl	80009e4 <LCD_SetFont>

	LCD_DisplayChar(80,140,'T');
 8000b40:	2254      	movs	r2, #84	@ 0x54
 8000b42:	218c      	movs	r1, #140	@ 0x8c
 8000b44:	2050      	movs	r0, #80	@ 0x50
 8000b46:	f7ff ffcb 	bl	8000ae0 <LCD_DisplayChar>
	LCD_DisplayChar(95,140,'E');
 8000b4a:	2245      	movs	r2, #69	@ 0x45
 8000b4c:	218c      	movs	r1, #140	@ 0x8c
 8000b4e:	205f      	movs	r0, #95	@ 0x5f
 8000b50:	f7ff ffc6 	bl	8000ae0 <LCD_DisplayChar>
	LCD_DisplayChar(110,140,'T');
 8000b54:	2254      	movs	r2, #84	@ 0x54
 8000b56:	218c      	movs	r1, #140	@ 0x8c
 8000b58:	206e      	movs	r0, #110	@ 0x6e
 8000b5a:	f7ff ffc1 	bl	8000ae0 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'R');
 8000b5e:	2252      	movs	r2, #82	@ 0x52
 8000b60:	218c      	movs	r1, #140	@ 0x8c
 8000b62:	207d      	movs	r0, #125	@ 0x7d
 8000b64:	f7ff ffbc 	bl	8000ae0 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'I');
 8000b68:	2249      	movs	r2, #73	@ 0x49
 8000b6a:	218c      	movs	r1, #140	@ 0x8c
 8000b6c:	2087      	movs	r0, #135	@ 0x87
 8000b6e:	f7ff ffb7 	bl	8000ae0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'S');
 8000b72:	2253      	movs	r2, #83	@ 0x53
 8000b74:	218c      	movs	r1, #140	@ 0x8c
 8000b76:	2091      	movs	r0, #145	@ 0x91
 8000b78:	f7ff ffb2 	bl	8000ae0 <LCD_DisplayChar>

	//Show all blocks
	LCD_Draw_OBlock(230,250);
 8000b7c:	21fa      	movs	r1, #250	@ 0xfa
 8000b7e:	20e6      	movs	r0, #230	@ 0xe6
 8000b80:	f7ff ff0b 	bl	800099a <LCD_Draw_OBlock>
	//Trying to figure out size of blocks
	//Assuming 10 levels
	//Maybe a square is 30x30 and borders limit play space to 300 pixels

	//Start button
	LCD_DisplayChar(100,200,'S');
 8000b84:	2253      	movs	r2, #83	@ 0x53
 8000b86:	21c8      	movs	r1, #200	@ 0xc8
 8000b88:	2064      	movs	r0, #100	@ 0x64
 8000b8a:	f7ff ffa9 	bl	8000ae0 <LCD_DisplayChar>
	LCD_DisplayChar(110,200,'t');
 8000b8e:	2274      	movs	r2, #116	@ 0x74
 8000b90:	21c8      	movs	r1, #200	@ 0xc8
 8000b92:	206e      	movs	r0, #110	@ 0x6e
 8000b94:	f7ff ffa4 	bl	8000ae0 <LCD_DisplayChar>
	LCD_DisplayChar(120,200,'a');
 8000b98:	2261      	movs	r2, #97	@ 0x61
 8000b9a:	21c8      	movs	r1, #200	@ 0xc8
 8000b9c:	2078      	movs	r0, #120	@ 0x78
 8000b9e:	f7ff ff9f 	bl	8000ae0 <LCD_DisplayChar>
	LCD_DisplayChar(130,200,'r');
 8000ba2:	2272      	movs	r2, #114	@ 0x72
 8000ba4:	21c8      	movs	r1, #200	@ 0xc8
 8000ba6:	2082      	movs	r0, #130	@ 0x82
 8000ba8:	f7ff ff9a 	bl	8000ae0 <LCD_DisplayChar>
	LCD_DisplayChar(137,200,'t');
 8000bac:	2274      	movs	r2, #116	@ 0x74
 8000bae:	21c8      	movs	r1, #200	@ 0xc8
 8000bb0:	2089      	movs	r0, #137	@ 0x89
 8000bb2:	f7ff ff95 	bl	8000ae0 <LCD_DisplayChar>

	LCD_Draw_Rectangle_Empty(90,195,67,30,LCD_COLOR_BLACK);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	231e      	movs	r3, #30
 8000bbc:	2243      	movs	r2, #67	@ 0x43
 8000bbe:	21c3      	movs	r1, #195	@ 0xc3
 8000bc0:	205a      	movs	r0, #90	@ 0x5a
 8000bc2:	f7ff fe8f 	bl	80008e4 <LCD_Draw_Rectangle_Empty>
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <LCD_Error_Handler+0x8>

08000bdc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000be0:	f000 f9fe 	bl	8000fe0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000be4:	20ca      	movs	r0, #202	@ 0xca
 8000be6:	f000 f943 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000bea:	20c3      	movs	r0, #195	@ 0xc3
 8000bec:	f000 f94d 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000bf0:	2008      	movs	r0, #8
 8000bf2:	f000 f94a 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000bf6:	2050      	movs	r0, #80	@ 0x50
 8000bf8:	f000 f947 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000bfc:	20cf      	movs	r0, #207	@ 0xcf
 8000bfe:	f000 f937 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 f941 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000c08:	20c1      	movs	r0, #193	@ 0xc1
 8000c0a:	f000 f93e 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000c0e:	2030      	movs	r0, #48	@ 0x30
 8000c10:	f000 f93b 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000c14:	20ed      	movs	r0, #237	@ 0xed
 8000c16:	f000 f92b 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000c1a:	2064      	movs	r0, #100	@ 0x64
 8000c1c:	f000 f935 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f932 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000c26:	2012      	movs	r0, #18
 8000c28:	f000 f92f 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000c2c:	2081      	movs	r0, #129	@ 0x81
 8000c2e:	f000 f92c 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000c32:	20e8      	movs	r0, #232	@ 0xe8
 8000c34:	f000 f91c 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000c38:	2085      	movs	r0, #133	@ 0x85
 8000c3a:	f000 f926 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f923 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000c44:	2078      	movs	r0, #120	@ 0x78
 8000c46:	f000 f920 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000c4a:	20cb      	movs	r0, #203	@ 0xcb
 8000c4c:	f000 f910 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000c50:	2039      	movs	r0, #57	@ 0x39
 8000c52:	f000 f91a 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000c56:	202c      	movs	r0, #44	@ 0x2c
 8000c58:	f000 f917 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 f914 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000c62:	2034      	movs	r0, #52	@ 0x34
 8000c64:	f000 f911 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f000 f90e 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000c6e:	20f7      	movs	r0, #247	@ 0xf7
 8000c70:	f000 f8fe 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000c74:	2020      	movs	r0, #32
 8000c76:	f000 f908 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000c7a:	20ea      	movs	r0, #234	@ 0xea
 8000c7c:	f000 f8f8 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 f902 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 f8ff 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000c8c:	20b1      	movs	r0, #177	@ 0xb1
 8000c8e:	f000 f8ef 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f8f9 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000c98:	201b      	movs	r0, #27
 8000c9a:	f000 f8f6 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000c9e:	20b6      	movs	r0, #182	@ 0xb6
 8000ca0:	f000 f8e6 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000ca4:	200a      	movs	r0, #10
 8000ca6:	f000 f8f0 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000caa:	20a2      	movs	r0, #162	@ 0xa2
 8000cac:	f000 f8ed 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000cb0:	20c0      	movs	r0, #192	@ 0xc0
 8000cb2:	f000 f8dd 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000cb6:	2010      	movs	r0, #16
 8000cb8:	f000 f8e7 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000cbc:	20c1      	movs	r0, #193	@ 0xc1
 8000cbe:	f000 f8d7 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000cc2:	2010      	movs	r0, #16
 8000cc4:	f000 f8e1 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000cc8:	20c5      	movs	r0, #197	@ 0xc5
 8000cca:	f000 f8d1 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000cce:	2045      	movs	r0, #69	@ 0x45
 8000cd0:	f000 f8db 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000cd4:	2015      	movs	r0, #21
 8000cd6:	f000 f8d8 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000cda:	20c7      	movs	r0, #199	@ 0xc7
 8000cdc:	f000 f8c8 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000ce0:	2090      	movs	r0, #144	@ 0x90
 8000ce2:	f000 f8d2 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000ce6:	2036      	movs	r0, #54	@ 0x36
 8000ce8:	f000 f8c2 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000cec:	20c8      	movs	r0, #200	@ 0xc8
 8000cee:	f000 f8cc 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000cf2:	20f2      	movs	r0, #242	@ 0xf2
 8000cf4:	f000 f8bc 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 f8c6 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000cfe:	20b0      	movs	r0, #176	@ 0xb0
 8000d00:	f000 f8b6 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000d04:	20c2      	movs	r0, #194	@ 0xc2
 8000d06:	f000 f8c0 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d0a:	20b6      	movs	r0, #182	@ 0xb6
 8000d0c:	f000 f8b0 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d10:	200a      	movs	r0, #10
 8000d12:	f000 f8ba 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000d16:	20a7      	movs	r0, #167	@ 0xa7
 8000d18:	f000 f8b7 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000d1c:	2027      	movs	r0, #39	@ 0x27
 8000d1e:	f000 f8b4 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000d22:	2004      	movs	r0, #4
 8000d24:	f000 f8b1 	bl	8000e8a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000d28:	202a      	movs	r0, #42	@ 0x2a
 8000d2a:	f000 f8a1 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 f8ab 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 f8a8 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f8a5 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000d40:	20ef      	movs	r0, #239	@ 0xef
 8000d42:	f000 f8a2 	bl	8000e8a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000d46:	202b      	movs	r0, #43	@ 0x2b
 8000d48:	f000 f892 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f000 f89c 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 f899 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f000 f896 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000d5e:	203f      	movs	r0, #63	@ 0x3f
 8000d60:	f000 f893 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000d64:	20f6      	movs	r0, #246	@ 0xf6
 8000d66:	f000 f883 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 f88d 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 f88a 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000d76:	2006      	movs	r0, #6
 8000d78:	f000 f887 	bl	8000e8a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000d7c:	202c      	movs	r0, #44	@ 0x2c
 8000d7e:	f000 f877 	bl	8000e70 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000d82:	20c8      	movs	r0, #200	@ 0xc8
 8000d84:	f000 f9e8 	bl	8001158 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000d88:	2026      	movs	r0, #38	@ 0x26
 8000d8a:	f000 f871 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f000 f87b 	bl	8000e8a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000d94:	20e0      	movs	r0, #224	@ 0xe0
 8000d96:	f000 f86b 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f875 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000da0:	2029      	movs	r0, #41	@ 0x29
 8000da2:	f000 f872 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000da6:	2024      	movs	r0, #36	@ 0x24
 8000da8:	f000 f86f 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000dac:	200c      	movs	r0, #12
 8000dae:	f000 f86c 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000db2:	200e      	movs	r0, #14
 8000db4:	f000 f869 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000db8:	2009      	movs	r0, #9
 8000dba:	f000 f866 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000dbe:	204e      	movs	r0, #78	@ 0x4e
 8000dc0:	f000 f863 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000dc4:	2078      	movs	r0, #120	@ 0x78
 8000dc6:	f000 f860 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000dca:	203c      	movs	r0, #60	@ 0x3c
 8000dcc:	f000 f85d 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000dd0:	2009      	movs	r0, #9
 8000dd2:	f000 f85a 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000dd6:	2013      	movs	r0, #19
 8000dd8:	f000 f857 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000ddc:	2005      	movs	r0, #5
 8000dde:	f000 f854 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000de2:	2017      	movs	r0, #23
 8000de4:	f000 f851 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000de8:	2011      	movs	r0, #17
 8000dea:	f000 f84e 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f84b 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000df4:	20e1      	movs	r0, #225	@ 0xe1
 8000df6:	f000 f83b 	bl	8000e70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f845 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000e00:	2016      	movs	r0, #22
 8000e02:	f000 f842 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000e06:	201b      	movs	r0, #27
 8000e08:	f000 f83f 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000e0c:	2004      	movs	r0, #4
 8000e0e:	f000 f83c 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e12:	2011      	movs	r0, #17
 8000e14:	f000 f839 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000e18:	2007      	movs	r0, #7
 8000e1a:	f000 f836 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000e1e:	2031      	movs	r0, #49	@ 0x31
 8000e20:	f000 f833 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000e24:	2033      	movs	r0, #51	@ 0x33
 8000e26:	f000 f830 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000e2a:	2042      	movs	r0, #66	@ 0x42
 8000e2c:	f000 f82d 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e30:	2005      	movs	r0, #5
 8000e32:	f000 f82a 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000e36:	200c      	movs	r0, #12
 8000e38:	f000 f827 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000e3c:	200a      	movs	r0, #10
 8000e3e:	f000 f824 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000e42:	2028      	movs	r0, #40	@ 0x28
 8000e44:	f000 f821 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000e48:	202f      	movs	r0, #47	@ 0x2f
 8000e4a:	f000 f81e 	bl	8000e8a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f000 f81b 	bl	8000e8a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000e54:	2011      	movs	r0, #17
 8000e56:	f000 f80b 	bl	8000e70 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000e5a:	20c8      	movs	r0, #200	@ 0xc8
 8000e5c:	f000 f97c 	bl	8001158 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000e60:	2029      	movs	r0, #41	@ 0x29
 8000e62:	f000 f805 	bl	8000e70 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000e66:	202c      	movs	r0, #44	@ 0x2c
 8000e68:	f000 f802 	bl	8000e70 <ili9341_Write_Reg>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f949 	bl	8001114 <LCD_IO_WriteReg>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f91a 	bl	80010d0 <LCD_IO_WriteData>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000ea8:	4819      	ldr	r0, [pc, #100]	@ (8000f10 <SPI_Init+0x6c>)
 8000eaa:	f002 faf4 	bl	8003496 <HAL_SPI_GetState>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d12b      	bne.n	8000f0c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <SPI_Init+0x6c>)
 8000eb6:	4a17      	ldr	r2, [pc, #92]	@ (8000f14 <SPI_Init+0x70>)
 8000eb8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <SPI_Init+0x6c>)
 8000ebc:	2218      	movs	r2, #24
 8000ebe:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <SPI_Init+0x6c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000ec6:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <SPI_Init+0x6c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <SPI_Init+0x6c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <SPI_Init+0x6c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <SPI_Init+0x6c>)
 8000eda:	2207      	movs	r2, #7
 8000edc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <SPI_Init+0x6c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <SPI_Init+0x6c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <SPI_Init+0x6c>)
 8000eec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <SPI_Init+0x6c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SPI_Init+0x6c>)
 8000efa:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000efe:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000f00:	4803      	ldr	r0, [pc, #12]	@ (8000f10 <SPI_Init+0x6c>)
 8000f02:	f000 f833 	bl	8000f6c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000f06:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <SPI_Init+0x6c>)
 8000f08:	f002 f8d0 	bl	80030ac <HAL_SPI_Init>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20025914 	.word	0x20025914
 8000f14:	40015000 	.word	0x40015000

08000f18 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <SPI_Write+0x34>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	1db9      	adds	r1, r7, #6
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4808      	ldr	r0, [pc, #32]	@ (8000f50 <SPI_Write+0x38>)
 8000f30:	f002 f96d 	bl	800320e <HAL_SPI_Transmit>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000f3e:	f000 f809 	bl	8000f54 <SPI_Error>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000000c 	.word	0x2000000c
 8000f50:	20025914 	.word	0x20025914

08000f54 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <SPI_Error+0x14>)
 8000f5a:	f002 f930 	bl	80031be <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000f5e:	f7ff ffa1 	bl	8000ea4 <SPI_Init>
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20025914 	.word	0x20025914

08000f6c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	@ 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <SPI_MspInit+0x6c>)
 8000f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7c:	4a16      	ldr	r2, [pc, #88]	@ (8000fd8 <SPI_MspInit+0x6c>)
 8000f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f82:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <SPI_MspInit+0x6c>)
 8000f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <SPI_MspInit+0x6c>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f98:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <SPI_MspInit+0x6c>)
 8000f9a:	f043 0320 	orr.w	r3, r3, #32
 8000f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <SPI_MspInit+0x6c>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8000fac:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <SPI_MspInit+0x70>)
 8000fca:	f000 fcd3 	bl	8001974 <HAL_GPIO_Init>
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	@ 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40021400 	.word	0x40021400

08000fe0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8000fe6:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <LCD_IO_Init+0xe0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d164      	bne.n	80010b8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8000fee:	4b34      	ldr	r3, [pc, #208]	@ (80010c0 <LCD_IO_Init+0xe0>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b32      	ldr	r3, [pc, #200]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffc:	4a31      	ldr	r2, [pc, #196]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6313      	str	r3, [r2, #48]	@ 0x30
 8001004:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001010:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001014:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4619      	mov	r1, r3
 8001028:	4827      	ldr	r0, [pc, #156]	@ (80010c8 <LCD_IO_Init+0xe8>)
 800102a:	f000 fca3 	bl	8001974 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a23      	ldr	r2, [pc, #140]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800104a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	4819      	ldr	r0, [pc, #100]	@ (80010c8 <LCD_IO_Init+0xe8>)
 8001064:	f000 fc86 	bl	8001974 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <LCD_IO_Init+0xe4>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001070:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6313      	str	r3, [r2, #48]	@ 0x30
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <LCD_IO_Init+0xe4>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001084:	2304      	movs	r3, #4
 8001086:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	480c      	ldr	r0, [pc, #48]	@ (80010cc <LCD_IO_Init+0xec>)
 800109c:	f000 fc6a 	bl	8001974 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80010a0:	2200      	movs	r2, #0
 80010a2:	2104      	movs	r1, #4
 80010a4:	4809      	ldr	r0, [pc, #36]	@ (80010cc <LCD_IO_Init+0xec>)
 80010a6:	f000 ff1d 	bl	8001ee4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80010aa:	2201      	movs	r2, #1
 80010ac:	2104      	movs	r1, #4
 80010ae:	4807      	ldr	r0, [pc, #28]	@ (80010cc <LCD_IO_Init+0xec>)
 80010b0:	f000 ff18 	bl	8001ee4 <HAL_GPIO_WritePin>

    SPI_Init();
 80010b4:	f7ff fef6 	bl	8000ea4 <SPI_Init>
  }
}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2002596c 	.word	0x2002596c
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40020800 	.word	0x40020800

080010d0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010e0:	480a      	ldr	r0, [pc, #40]	@ (800110c <LCD_IO_WriteData+0x3c>)
 80010e2:	f000 feff 	bl	8001ee4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80010e6:	2200      	movs	r2, #0
 80010e8:	2104      	movs	r1, #4
 80010ea:	4809      	ldr	r0, [pc, #36]	@ (8001110 <LCD_IO_WriteData+0x40>)
 80010ec:	f000 fefa 	bl	8001ee4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff10 	bl	8000f18 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80010f8:	2201      	movs	r2, #1
 80010fa:	2104      	movs	r1, #4
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <LCD_IO_WriteData+0x40>)
 80010fe:	f000 fef1 	bl	8001ee4 <HAL_GPIO_WritePin>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020c00 	.word	0x40020c00
 8001110:	40020800 	.word	0x40020800

08001114 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001124:	480a      	ldr	r0, [pc, #40]	@ (8001150 <LCD_IO_WriteReg+0x3c>)
 8001126:	f000 fedd 	bl	8001ee4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800112a:	2200      	movs	r2, #0
 800112c:	2104      	movs	r1, #4
 800112e:	4809      	ldr	r0, [pc, #36]	@ (8001154 <LCD_IO_WriteReg+0x40>)
 8001130:	f000 fed8 	bl	8001ee4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	b29b      	uxth	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff feed 	bl	8000f18 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800113e:	2201      	movs	r2, #1
 8001140:	2104      	movs	r1, #4
 8001142:	4804      	ldr	r0, [pc, #16]	@ (8001154 <LCD_IO_WriteReg+0x40>)
 8001144:	f000 fece 	bl	8001ee4 <HAL_GPIO_WritePin>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40020800 	.word	0x40020800

08001158 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fafd 	bl	8001760 <HAL_Delay>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001172:	f000 fa83 	bl	800167c <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 8001176:	f000 f80b 	bl	8001190 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 800117a:	f7ff f9af 	bl	80004dc <ApplicationInit>

  //LCD_Visual_Demo();

  HAL_Delay(5000);
 800117e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001182:	f000 faed 	bl	8001760 <HAL_Delay>

  screen1();
 8001186:	f7ff fccd 	bl	8000b24 <screen1>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 800118a:	bf00      	nop
 800118c:	e7fd      	b.n	800118a <main+0x1c>
	...

08001190 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b092      	sub	sp, #72	@ 0x48
 8001194:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <SystemClockOverride+0x7c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a1b      	ldr	r2, [pc, #108]	@ (800120c <SystemClockOverride+0x7c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <SystemClockOverride+0x7c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b2:	2301      	movs	r3, #1
 80011b4:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ba:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011c6:	2308      	movs	r3, #8
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011ca:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011d4:	2307      	movs	r3, #7
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f942 	bl	8002464 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80011e0:	230f      	movs	r3, #15
 80011e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e4:	2302      	movs	r3, #2
 80011e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f6:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80011f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011fc:	2105      	movs	r1, #5
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fba8 	bl	8002954 <HAL_RCC_ClockConfig>
}
 8001204:	bf00      	nop
 8001206:	3748      	adds	r7, #72	@ 0x48
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <Error_Handler+0x8>

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	4a0f      	ldr	r2, [pc, #60]	@ (8001268 <HAL_MspInit+0x4c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001230:	6453      	str	r3, [r2, #68]	@ 0x44
 8001232:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	@ 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800125a:	2007      	movs	r0, #7
 800125c:	f000 fb56 	bl	800190c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b09a      	sub	sp, #104	@ 0x68
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001288:	2230      	movs	r2, #48	@ 0x30
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f002 f9ed 	bl	800366c <memset>
  if(hltdc->Instance==LTDC)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a81      	ldr	r2, [pc, #516]	@ (800149c <HAL_LTDC_MspInit+0x230>)
 8001298:	4293      	cmp	r3, r2
 800129a:	f040 80fa 	bne.w	8001492 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800129e:	2308      	movs	r3, #8
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80012a2:	2332      	movs	r3, #50	@ 0x32
 80012a4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80012a6:	2302      	movs	r3, #2
 80012a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012aa:	2300      	movs	r3, #0
 80012ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fd3a 	bl	8002d2c <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80012be:	f7ff ffa7 	bl	8001210 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	4b76      	ldr	r3, [pc, #472]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a75      	ldr	r2, [pc, #468]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 80012cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b73      	ldr	r3, [pc, #460]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012da:	623b      	str	r3, [r7, #32]
 80012dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	4b6f      	ldr	r3, [pc, #444]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a6e      	ldr	r2, [pc, #440]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 80012e8:	f043 0320 	orr.w	r3, r3, #32
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b6c      	ldr	r3, [pc, #432]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	4b68      	ldr	r3, [pc, #416]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a67      	ldr	r2, [pc, #412]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b65      	ldr	r3, [pc, #404]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	4b61      	ldr	r3, [pc, #388]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a60      	ldr	r2, [pc, #384]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b5e      	ldr	r3, [pc, #376]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b5a      	ldr	r3, [pc, #360]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a59      	ldr	r2, [pc, #356]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 800133c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b57      	ldr	r3, [pc, #348]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b53      	ldr	r3, [pc, #332]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a52      	ldr	r2, [pc, #328]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b50      	ldr	r3, [pc, #320]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b4c      	ldr	r3, [pc, #304]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a4b      	ldr	r2, [pc, #300]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b49      	ldr	r3, [pc, #292]	@ (80014a0 <HAL_LTDC_MspInit+0x234>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800138a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001398:	230e      	movs	r3, #14
 800139a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013a0:	4619      	mov	r1, r3
 80013a2:	4840      	ldr	r0, [pc, #256]	@ (80014a4 <HAL_LTDC_MspInit+0x238>)
 80013a4:	f000 fae6 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80013a8:	f641 0358 	movw	r3, #6232	@ 0x1858
 80013ac:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013ba:	230e      	movs	r3, #14
 80013bc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013c2:	4619      	mov	r1, r3
 80013c4:	4838      	ldr	r0, [pc, #224]	@ (80014a8 <HAL_LTDC_MspInit+0x23c>)
 80013c6:	f000 fad5 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80013ca:	2303      	movs	r3, #3
 80013cc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013da:	2309      	movs	r3, #9
 80013dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013e2:	4619      	mov	r1, r3
 80013e4:	4831      	ldr	r0, [pc, #196]	@ (80014ac <HAL_LTDC_MspInit+0x240>)
 80013e6:	f000 fac5 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80013ea:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80013ee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013fc:	230e      	movs	r3, #14
 80013fe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001404:	4619      	mov	r1, r3
 8001406:	4829      	ldr	r0, [pc, #164]	@ (80014ac <HAL_LTDC_MspInit+0x240>)
 8001408:	f000 fab4 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800140c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001410:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800141e:	230e      	movs	r3, #14
 8001420:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001422:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001426:	4619      	mov	r1, r3
 8001428:	4821      	ldr	r0, [pc, #132]	@ (80014b0 <HAL_LTDC_MspInit+0x244>)
 800142a:	f000 faa3 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800142e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001432:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001440:	230e      	movs	r3, #14
 8001442:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001448:	4619      	mov	r1, r3
 800144a:	481a      	ldr	r0, [pc, #104]	@ (80014b4 <HAL_LTDC_MspInit+0x248>)
 800144c:	f000 fa92 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001450:	2348      	movs	r3, #72	@ 0x48
 8001452:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001460:	230e      	movs	r3, #14
 8001462:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001464:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001468:	4619      	mov	r1, r3
 800146a:	4813      	ldr	r0, [pc, #76]	@ (80014b8 <HAL_LTDC_MspInit+0x24c>)
 800146c:	f000 fa82 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001470:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001474:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001482:	2309      	movs	r3, #9
 8001484:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001486:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800148a:	4619      	mov	r1, r3
 800148c:	4808      	ldr	r0, [pc, #32]	@ (80014b0 <HAL_LTDC_MspInit+0x244>)
 800148e:	f000 fa71 	bl	8001974 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001492:	bf00      	nop
 8001494:	3768      	adds	r7, #104	@ 0x68
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40016800 	.word	0x40016800
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40021400 	.word	0x40021400
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40021800 	.word	0x40021800
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00

080014bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <HAL_SPI_MspInit+0x84>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12c      	bne.n	8001538 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 80014e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a10      	ldr	r2, [pc, #64]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_SPI_MspInit+0x88>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001516:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001528:	2305      	movs	r3, #5
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4805      	ldr	r0, [pc, #20]	@ (8001548 <HAL_SPI_MspInit+0x8c>)
 8001534:	f000 fa1e 	bl	8001974 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	@ 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40015000 	.word	0x40015000
 8001544:	40023800 	.word	0x40023800
 8001548:	40021400 	.word	0x40021400

0800154c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a08      	ldr	r2, [pc, #32]	@ (800157c <HAL_SPI_MspDeInit+0x30>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10a      	bne.n	8001574 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_SPI_MspDeInit+0x34>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <HAL_SPI_MspDeInit+0x34>)
 8001564:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001568:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800156a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <HAL_SPI_MspDeInit+0x38>)
 8001570:	f000 fbac 	bl	8001ccc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40015000 	.word	0x40015000
 8001580:	40023800 	.word	0x40023800
 8001584:	40021400 	.word	0x40021400

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <NMI_Handler+0x4>

08001590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <MemManage_Handler+0x4>

080015a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <UsageFault_Handler+0x4>

080015b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015de:	f000 f89f 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_DAC_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <SystemInit+0x20>)
 800160a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800160e:	4a05      	ldr	r2, [pc, #20]	@ (8001624 <SystemInit+0x20>)
 8001610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001628:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001660 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800162c:	f7ff ffea 	bl	8001604 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480c      	ldr	r0, [pc, #48]	@ (8001664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001632:	490d      	ldr	r1, [pc, #52]	@ (8001668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001648:	4c0a      	ldr	r4, [pc, #40]	@ (8001674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001656:	f002 f811 	bl	800367c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7ff fd88 	bl	800116e <main>
  bx  lr    
 800165e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001660:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001668:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800166c:	080048cc 	.word	0x080048cc
  ldr r2, =_sbss
 8001670:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001674:	20025974 	.word	0x20025974

08001678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC_IRQHandler>
	...

0800167c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001680:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <HAL_Init+0x40>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800168a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800168c:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <HAL_Init+0x40>)
 8001692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a07      	ldr	r2, [pc, #28]	@ (80016bc <HAL_Init+0x40>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 f931 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f000 f808 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b0:	f7ff fdb4 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023c00 	.word	0x40023c00

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f93b 	bl	800195a <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016fc:	f000 f911 	bl	8001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	@ (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000010 	.word	0x20000010
 8001718:	20000018 	.word	0x20000018
 800171c:	20000014 	.word	0x20000014

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000018 	.word	0x20000018
 8001744:	20025970 	.word	0x20025970

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20025970 	.word	0x20025970

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff ffee 	bl	8001748 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffde 	bl	8001748 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000018 	.word	0x20000018

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	@ (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	@ (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	@ 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018ec:	f7ff ff8e 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff47 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff5c 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff8e 	bl	8001860 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5d 	bl	800180c <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffb0 	bl	80018c8 <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	@ 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	e177      	b.n	8001c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001990:	2201      	movs	r2, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f040 8166 	bne.w	8001c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d005      	beq.n	80019c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d130      	bne.n	8001a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f003 0201 	and.w	r2, r3, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d017      	beq.n	8001a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d123      	bne.n	8001ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3208      	adds	r2, #8
 8001a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	08da      	lsrs	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3208      	adds	r2, #8
 8001ab2:	69b9      	ldr	r1, [r7, #24]
 8001ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80c0 	beq.w	8001c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b66      	ldr	r3, [pc, #408]	@ (8001c98 <HAL_GPIO_Init+0x324>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	4a65      	ldr	r2, [pc, #404]	@ (8001c98 <HAL_GPIO_Init+0x324>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0a:	4b63      	ldr	r3, [pc, #396]	@ (8001c98 <HAL_GPIO_Init+0x324>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b16:	4a61      	ldr	r2, [pc, #388]	@ (8001c9c <HAL_GPIO_Init+0x328>)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a58      	ldr	r2, [pc, #352]	@ (8001ca0 <HAL_GPIO_Init+0x32c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d037      	beq.n	8001bb2 <HAL_GPIO_Init+0x23e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a57      	ldr	r2, [pc, #348]	@ (8001ca4 <HAL_GPIO_Init+0x330>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d031      	beq.n	8001bae <HAL_GPIO_Init+0x23a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a56      	ldr	r2, [pc, #344]	@ (8001ca8 <HAL_GPIO_Init+0x334>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d02b      	beq.n	8001baa <HAL_GPIO_Init+0x236>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a55      	ldr	r2, [pc, #340]	@ (8001cac <HAL_GPIO_Init+0x338>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d025      	beq.n	8001ba6 <HAL_GPIO_Init+0x232>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a54      	ldr	r2, [pc, #336]	@ (8001cb0 <HAL_GPIO_Init+0x33c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01f      	beq.n	8001ba2 <HAL_GPIO_Init+0x22e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a53      	ldr	r2, [pc, #332]	@ (8001cb4 <HAL_GPIO_Init+0x340>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d019      	beq.n	8001b9e <HAL_GPIO_Init+0x22a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	@ (8001cb8 <HAL_GPIO_Init+0x344>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0x226>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a51      	ldr	r2, [pc, #324]	@ (8001cbc <HAL_GPIO_Init+0x348>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <HAL_GPIO_Init+0x222>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a50      	ldr	r2, [pc, #320]	@ (8001cc0 <HAL_GPIO_Init+0x34c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x21e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4f      	ldr	r2, [pc, #316]	@ (8001cc4 <HAL_GPIO_Init+0x350>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_GPIO_Init+0x21a>
 8001b8a:	2309      	movs	r3, #9
 8001b8c:	e012      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b8e:	230a      	movs	r3, #10
 8001b90:	e010      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b92:	2308      	movs	r3, #8
 8001b94:	e00e      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b96:	2307      	movs	r3, #7
 8001b98:	e00c      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	e00a      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	@ (8001c9c <HAL_GPIO_Init+0x328>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a34      	ldr	r2, [pc, #208]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b32      	ldr	r3, [pc, #200]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a29      	ldr	r2, [pc, #164]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c26:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c74:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f ae84 	bls.w	8001990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40021c00 	.word	0x40021c00
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40022400 	.word	0x40022400
 8001cc8:	40013c00 	.word	0x40013c00

08001ccc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e0d9      	b.n	8001e9c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	f040 80c9 	bne.w	8001e96 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001d04:	4a6b      	ldr	r2, [pc, #428]	@ (8001eb4 <HAL_GPIO_DeInit+0x1e8>)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	4013      	ands	r3, r2
 8001d24:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a63      	ldr	r2, [pc, #396]	@ (8001eb8 <HAL_GPIO_DeInit+0x1ec>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d037      	beq.n	8001d9e <HAL_GPIO_DeInit+0xd2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a62      	ldr	r2, [pc, #392]	@ (8001ebc <HAL_GPIO_DeInit+0x1f0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d031      	beq.n	8001d9a <HAL_GPIO_DeInit+0xce>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a61      	ldr	r2, [pc, #388]	@ (8001ec0 <HAL_GPIO_DeInit+0x1f4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d02b      	beq.n	8001d96 <HAL_GPIO_DeInit+0xca>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a60      	ldr	r2, [pc, #384]	@ (8001ec4 <HAL_GPIO_DeInit+0x1f8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d025      	beq.n	8001d92 <HAL_GPIO_DeInit+0xc6>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a5f      	ldr	r2, [pc, #380]	@ (8001ec8 <HAL_GPIO_DeInit+0x1fc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01f      	beq.n	8001d8e <HAL_GPIO_DeInit+0xc2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a5e      	ldr	r2, [pc, #376]	@ (8001ecc <HAL_GPIO_DeInit+0x200>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d019      	beq.n	8001d8a <HAL_GPIO_DeInit+0xbe>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a5d      	ldr	r2, [pc, #372]	@ (8001ed0 <HAL_GPIO_DeInit+0x204>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_GPIO_DeInit+0xba>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a5c      	ldr	r2, [pc, #368]	@ (8001ed4 <HAL_GPIO_DeInit+0x208>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00d      	beq.n	8001d82 <HAL_GPIO_DeInit+0xb6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed8 <HAL_GPIO_DeInit+0x20c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <HAL_GPIO_DeInit+0xb2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a5a      	ldr	r2, [pc, #360]	@ (8001edc <HAL_GPIO_DeInit+0x210>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_GPIO_DeInit+0xae>
 8001d76:	2309      	movs	r3, #9
 8001d78:	e012      	b.n	8001da0 <HAL_GPIO_DeInit+0xd4>
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	e010      	b.n	8001da0 <HAL_GPIO_DeInit+0xd4>
 8001d7e:	2308      	movs	r3, #8
 8001d80:	e00e      	b.n	8001da0 <HAL_GPIO_DeInit+0xd4>
 8001d82:	2307      	movs	r3, #7
 8001d84:	e00c      	b.n	8001da0 <HAL_GPIO_DeInit+0xd4>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e00a      	b.n	8001da0 <HAL_GPIO_DeInit+0xd4>
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	e008      	b.n	8001da0 <HAL_GPIO_DeInit+0xd4>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_DeInit+0xd4>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_DeInit+0xd4>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_DeInit+0xd4>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_DeInit+0xd4>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4093      	lsls	r3, r2
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d132      	bne.n	8001e16 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001db0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee0 <HAL_GPIO_DeInit+0x214>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	4949      	ldr	r1, [pc, #292]	@ (8001ee0 <HAL_GPIO_DeInit+0x214>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001dbe:	4b48      	ldr	r3, [pc, #288]	@ (8001ee0 <HAL_GPIO_DeInit+0x214>)
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	4946      	ldr	r1, [pc, #280]	@ (8001ee0 <HAL_GPIO_DeInit+0x214>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001dcc:	4b44      	ldr	r3, [pc, #272]	@ (8001ee0 <HAL_GPIO_DeInit+0x214>)
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	4942      	ldr	r1, [pc, #264]	@ (8001ee0 <HAL_GPIO_DeInit+0x214>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001dda:	4b41      	ldr	r3, [pc, #260]	@ (8001ee0 <HAL_GPIO_DeInit+0x214>)
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	493f      	ldr	r1, [pc, #252]	@ (8001ee0 <HAL_GPIO_DeInit+0x214>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001df8:	4a2e      	ldr	r2, [pc, #184]	@ (8001eb4 <HAL_GPIO_DeInit+0x1e8>)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	43da      	mvns	r2, r3
 8001e08:	482a      	ldr	r0, [pc, #168]	@ (8001eb4 <HAL_GPIO_DeInit+0x1e8>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	400a      	ands	r2, r1
 8001e10:	3302      	adds	r3, #2
 8001e12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2103      	movs	r1, #3
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	08d2      	lsrs	r2, r2, #3
 8001e4c:	4019      	ands	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3208      	adds	r2, #8
 8001e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2103      	movs	r1, #3
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	401a      	ands	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	2101      	movs	r1, #1
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2103      	movs	r1, #3
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	401a      	ands	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2b0f      	cmp	r3, #15
 8001ea0:	f67f af22 	bls.w	8001ce8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40013800 	.word	0x40013800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40021400 	.word	0x40021400
 8001ed0:	40021800 	.word	0x40021800
 8001ed4:	40021c00 	.word	0x40021c00
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	40022400 	.word	0x40022400
 8001ee0:	40013c00 	.word	0x40013c00

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f00:	e003      	b.n	8001f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	041a      	lsls	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	619a      	str	r2, [r3, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0bf      	b.n	80020aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff f994 	bl	800126c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8001f5a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6999      	ldr	r1, [r3, #24]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001f70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80020b4 <HAL_LTDC_Init+0x19c>)
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	041b      	lsls	r3, r3, #16
 8001f96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6899      	ldr	r1, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68d9      	ldr	r1, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80020b4 <HAL_LTDC_Init+0x19c>)
 8001fba:	400b      	ands	r3, r1
 8001fbc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	041b      	lsls	r3, r3, #16
 8001fc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68d9      	ldr	r1, [r3, #12]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6919      	ldr	r1, [r3, #16]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <HAL_LTDC_Init+0x19c>)
 8001fe8:	400b      	ands	r3, r1
 8001fea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6919      	ldr	r1, [r3, #16]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6959      	ldr	r1, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b27      	ldr	r3, [pc, #156]	@ (80020b4 <HAL_LTDC_Init+0x19c>)
 8002016:	400b      	ands	r3, r1
 8002018:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6959      	ldr	r1, [r3, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800205a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0206 	orr.w	r2, r2, #6
 8002086:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	f000f800 	.word	0xf000f800

080020b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80020b8:	b5b0      	push	{r4, r5, r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_LTDC_ConfigLayer+0x1a>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e02c      	b.n	800212c <HAL_LTDC_ConfigLayer+0x74>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2134      	movs	r1, #52	@ 0x34
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	4614      	mov	r4, r2
 80020f6:	461d      	mov	r5, r3
 80020f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f811 	bl	8002134 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bdb0      	pop	{r4, r5, r7, pc}

08002134 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002150:	4413      	add	r3, r2
 8002152:	041b      	lsls	r3, r3, #16
 8002154:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	01db      	lsls	r3, r3, #7
 8002160:	4413      	add	r3, r2
 8002162:	3384      	adds	r3, #132	@ 0x84
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	4611      	mov	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	01d2      	lsls	r2, r2, #7
 8002170:	440a      	add	r2, r1
 8002172:	3284      	adds	r2, #132	@ 0x84
 8002174:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002178:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800218a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800218c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4619      	mov	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	01db      	lsls	r3, r3, #7
 8002198:	440b      	add	r3, r1
 800219a:	3384      	adds	r3, #132	@ 0x84
 800219c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80021a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b2:	4413      	add	r3, r2
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	01db      	lsls	r3, r3, #7
 80021c2:	4413      	add	r3, r2
 80021c4:	3384      	adds	r3, #132	@ 0x84
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	4611      	mov	r1, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	01d2      	lsls	r2, r2, #7
 80021d2:	440a      	add	r2, r1
 80021d4:	3284      	adds	r2, #132	@ 0x84
 80021d6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80021da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ea:	4413      	add	r3, r2
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4619      	mov	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	01db      	lsls	r3, r3, #7
 80021f8:	440b      	add	r3, r1
 80021fa:	3384      	adds	r3, #132	@ 0x84
 80021fc:	4619      	mov	r1, r3
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	01db      	lsls	r3, r3, #7
 800220e:	4413      	add	r3, r2
 8002210:	3384      	adds	r3, #132	@ 0x84
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	4611      	mov	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	01d2      	lsls	r2, r2, #7
 800221e:	440a      	add	r2, r1
 8002220:	3284      	adds	r2, #132	@ 0x84
 8002222:	f023 0307 	bic.w	r3, r3, #7
 8002226:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	01db      	lsls	r3, r3, #7
 8002232:	4413      	add	r3, r2
 8002234:	3384      	adds	r3, #132	@ 0x84
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800224e:	041b      	lsls	r3, r3, #16
 8002250:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	061b      	lsls	r3, r3, #24
 8002258:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	01db      	lsls	r3, r3, #7
 8002264:	4413      	add	r3, r2
 8002266:	3384      	adds	r3, #132	@ 0x84
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	01db      	lsls	r3, r3, #7
 8002274:	4413      	add	r3, r2
 8002276:	3384      	adds	r3, #132	@ 0x84
 8002278:	461a      	mov	r2, r3
 800227a:	2300      	movs	r3, #0
 800227c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002284:	461a      	mov	r2, r3
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	431a      	orrs	r2, r3
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	431a      	orrs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4619      	mov	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	01db      	lsls	r3, r3, #7
 8002298:	440b      	add	r3, r1
 800229a:	3384      	adds	r3, #132	@ 0x84
 800229c:	4619      	mov	r1, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	01db      	lsls	r3, r3, #7
 80022ae:	4413      	add	r3, r2
 80022b0:	3384      	adds	r3, #132	@ 0x84
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	4611      	mov	r1, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	01d2      	lsls	r2, r2, #7
 80022be:	440a      	add	r2, r1
 80022c0:	3284      	adds	r2, #132	@ 0x84
 80022c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	01db      	lsls	r3, r3, #7
 80022d2:	4413      	add	r3, r2
 80022d4:	3384      	adds	r3, #132	@ 0x84
 80022d6:	461a      	mov	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	01db      	lsls	r3, r3, #7
 80022e8:	4413      	add	r3, r2
 80022ea:	3384      	adds	r3, #132	@ 0x84
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	4611      	mov	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	01d2      	lsls	r2, r2, #7
 80022f8:	440a      	add	r2, r1
 80022fa:	3284      	adds	r2, #132	@ 0x84
 80022fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002300:	f023 0307 	bic.w	r3, r3, #7
 8002304:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	69da      	ldr	r2, [r3, #28]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	68f9      	ldr	r1, [r7, #12]
 8002310:	6809      	ldr	r1, [r1, #0]
 8002312:	4608      	mov	r0, r1
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	01c9      	lsls	r1, r1, #7
 8002318:	4401      	add	r1, r0
 800231a:	3184      	adds	r1, #132	@ 0x84
 800231c:	4313      	orrs	r3, r2
 800231e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	01db      	lsls	r3, r3, #7
 800232a:	4413      	add	r3, r2
 800232c:	3384      	adds	r3, #132	@ 0x84
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	01db      	lsls	r3, r3, #7
 800233a:	4413      	add	r3, r2
 800233c:	3384      	adds	r3, #132	@ 0x84
 800233e:	461a      	mov	r2, r3
 8002340:	2300      	movs	r3, #0
 8002342:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	01db      	lsls	r3, r3, #7
 800234e:	4413      	add	r3, r2
 8002350:	3384      	adds	r3, #132	@ 0x84
 8002352:	461a      	mov	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002362:	2304      	movs	r3, #4
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	e01b      	b.n	80023a0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d102      	bne.n	8002376 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002370:	2303      	movs	r3, #3
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	e014      	b.n	80023a0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b04      	cmp	r3, #4
 800237c:	d00b      	beq.n	8002396 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002382:	2b02      	cmp	r3, #2
 8002384:	d007      	beq.n	8002396 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800238a:	2b03      	cmp	r3, #3
 800238c:	d003      	beq.n	8002396 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002392:	2b07      	cmp	r3, #7
 8002394:	d102      	bne.n	800239c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002396:	2302      	movs	r3, #2
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	e001      	b.n	80023a0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800239c:	2301      	movs	r3, #1
 800239e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	01db      	lsls	r3, r3, #7
 80023aa:	4413      	add	r3, r2
 80023ac:	3384      	adds	r3, #132	@ 0x84
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	4611      	mov	r1, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	01d2      	lsls	r2, r2, #7
 80023ba:	440a      	add	r2, r1
 80023bc:	3284      	adds	r2, #132	@ 0x84
 80023be:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80023c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1acb      	subs	r3, r1, r3
 80023da:	69f9      	ldr	r1, [r7, #28]
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80023e2:	68f9      	ldr	r1, [r7, #12]
 80023e4:	6809      	ldr	r1, [r1, #0]
 80023e6:	4608      	mov	r0, r1
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	01c9      	lsls	r1, r1, #7
 80023ec:	4401      	add	r1, r0
 80023ee:	3184      	adds	r1, #132	@ 0x84
 80023f0:	4313      	orrs	r3, r2
 80023f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	01db      	lsls	r3, r3, #7
 80023fe:	4413      	add	r3, r2
 8002400:	3384      	adds	r3, #132	@ 0x84
 8002402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	4611      	mov	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	01d2      	lsls	r2, r2, #7
 800240e:	440a      	add	r2, r1
 8002410:	3284      	adds	r2, #132	@ 0x84
 8002412:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	01db      	lsls	r3, r3, #7
 8002426:	4413      	add	r3, r2
 8002428:	3384      	adds	r3, #132	@ 0x84
 800242a:	461a      	mov	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	01db      	lsls	r3, r3, #7
 800243c:	4413      	add	r3, r2
 800243e:	3384      	adds	r3, #132	@ 0x84
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	4611      	mov	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	01d2      	lsls	r2, r2, #7
 800244c:	440a      	add	r2, r1
 800244e:	3284      	adds	r2, #132	@ 0x84
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6013      	str	r3, [r2, #0]
}
 8002456:	bf00      	nop
 8002458:	3724      	adds	r7, #36	@ 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e267      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d075      	beq.n	800256e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002482:	4b88      	ldr	r3, [pc, #544]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d00c      	beq.n	80024a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248e:	4b85      	ldr	r3, [pc, #532]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002496:	2b08      	cmp	r3, #8
 8002498:	d112      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249a:	4b82      	ldr	r3, [pc, #520]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024a6:	d10b      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	4b7e      	ldr	r3, [pc, #504]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d05b      	beq.n	800256c <HAL_RCC_OscConfig+0x108>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d157      	bne.n	800256c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e242      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c8:	d106      	bne.n	80024d8 <HAL_RCC_OscConfig+0x74>
 80024ca:	4b76      	ldr	r3, [pc, #472]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a75      	ldr	r2, [pc, #468]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e01d      	b.n	8002514 <HAL_RCC_OscConfig+0xb0>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x98>
 80024e2:	4b70      	ldr	r3, [pc, #448]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6f      	ldr	r2, [pc, #444]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b6d      	ldr	r3, [pc, #436]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6c      	ldr	r2, [pc, #432]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0xb0>
 80024fc:	4b69      	ldr	r3, [pc, #420]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a68      	ldr	r2, [pc, #416]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b66      	ldr	r3, [pc, #408]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a65      	ldr	r2, [pc, #404]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff f914 	bl	8001748 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff f910 	bl	8001748 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e207      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b5b      	ldr	r3, [pc, #364]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0xc0>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff f900 	bl	8001748 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7ff f8fc 	bl	8001748 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	@ 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1f3      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	4b51      	ldr	r3, [pc, #324]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0xe8>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d063      	beq.n	8002642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800257a:	4b4a      	ldr	r3, [pc, #296]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002586:	4b47      	ldr	r3, [pc, #284]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11c      	bne.n	80025cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002592:	4b44      	ldr	r3, [pc, #272]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d116      	bne.n	80025cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	4b41      	ldr	r3, [pc, #260]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x152>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1c7      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b3b      	ldr	r3, [pc, #236]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4937      	ldr	r1, [pc, #220]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	e03a      	b.n	8002642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d4:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <HAL_RCC_OscConfig+0x244>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7ff f8b5 	bl	8001748 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7ff f8b1 	bl	8001748 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1a8      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	4b2b      	ldr	r3, [pc, #172]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b28      	ldr	r3, [pc, #160]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4925      	ldr	r1, [pc, #148]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e015      	b.n	8002642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002616:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <HAL_RCC_OscConfig+0x244>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7ff f894 	bl	8001748 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002624:	f7ff f890 	bl	8001748 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e187      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d036      	beq.n	80026bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d016      	beq.n	8002684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <HAL_RCC_OscConfig+0x248>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7ff f874 	bl	8001748 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7ff f870 	bl	8001748 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e167      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x200>
 8002682:	e01b      	b.n	80026bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_RCC_OscConfig+0x248>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268a:	f7ff f85d 	bl	8001748 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002690:	e00e      	b.n	80026b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002692:	f7ff f859 	bl	8001748 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d907      	bls.n	80026b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e150      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
 80026a4:	40023800 	.word	0x40023800
 80026a8:	42470000 	.word	0x42470000
 80026ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	4b88      	ldr	r3, [pc, #544]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1ea      	bne.n	8002692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8097 	beq.w	80027f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ce:	4b81      	ldr	r3, [pc, #516]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	4b7d      	ldr	r3, [pc, #500]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	4a7c      	ldr	r2, [pc, #496]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ea:	4b7a      	ldr	r3, [pc, #488]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f6:	2301      	movs	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b77      	ldr	r3, [pc, #476]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d118      	bne.n	8002738 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002706:	4b74      	ldr	r3, [pc, #464]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a73      	ldr	r2, [pc, #460]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 800270c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002712:	f7ff f819 	bl	8001748 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271a:	f7ff f815 	bl	8001748 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e10c      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	4b6a      	ldr	r3, [pc, #424]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x2ea>
 8002740:	4b64      	ldr	r3, [pc, #400]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002744:	4a63      	ldr	r2, [pc, #396]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	@ 0x70
 800274c:	e01c      	b.n	8002788 <HAL_RCC_OscConfig+0x324>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b05      	cmp	r3, #5
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x30c>
 8002756:	4b5f      	ldr	r3, [pc, #380]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275a:	4a5e      	ldr	r2, [pc, #376]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	6713      	str	r3, [r2, #112]	@ 0x70
 8002762:	4b5c      	ldr	r3, [pc, #368]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	4a5b      	ldr	r2, [pc, #364]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6713      	str	r3, [r2, #112]	@ 0x70
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0x324>
 8002770:	4b58      	ldr	r3, [pc, #352]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002774:	4a57      	ldr	r2, [pc, #348]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	@ 0x70
 800277c:	4b55      	ldr	r3, [pc, #340]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	4a54      	ldr	r2, [pc, #336]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 0304 	bic.w	r3, r3, #4
 8002786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d015      	beq.n	80027bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe ffda 	bl	8001748 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002796:	e00a      	b.n	80027ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe ffd6 	bl	8001748 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0cb      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	4b49      	ldr	r3, [pc, #292]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0ee      	beq.n	8002798 <HAL_RCC_OscConfig+0x334>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027bc:	f7fe ffc4 	bl	8001748 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7fe ffc0 	bl	8001748 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0b5      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027da:	4b3e      	ldr	r3, [pc, #248]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ee      	bne.n	80027c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d105      	bne.n	80027f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ec:	4b39      	ldr	r3, [pc, #228]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	4a38      	ldr	r2, [pc, #224]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80a1 	beq.w	8002944 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002802:	4b34      	ldr	r3, [pc, #208]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b08      	cmp	r3, #8
 800280c:	d05c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d141      	bne.n	800289a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b31      	ldr	r3, [pc, #196]	@ (80028dc <HAL_RCC_OscConfig+0x478>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe ff94 	bl	8001748 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe ff90 	bl	8001748 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e087      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	019b      	lsls	r3, r3, #6
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	3b01      	subs	r3, #1
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	491b      	ldr	r1, [pc, #108]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_RCC_OscConfig+0x478>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe ff69 	bl	8001748 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe ff65 	bl	8001748 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e05c      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288c:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x416>
 8002898:	e054      	b.n	8002944 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <HAL_RCC_OscConfig+0x478>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe ff52 	bl	8001748 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe ff4e 	bl	8001748 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e045      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x444>
 80028c6:	e03d      	b.n	8002944 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e038      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <HAL_RCC_OscConfig+0x4ec>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d028      	beq.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d121      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d11a      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002918:	4293      	cmp	r3, r2
 800291a:	d111      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	3b01      	subs	r3, #1
 800292a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d107      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0cc      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b68      	ldr	r3, [pc, #416]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d90c      	bls.n	8002990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b65      	ldr	r3, [pc, #404]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b63      	ldr	r3, [pc, #396]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0b8      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a8:	4b59      	ldr	r3, [pc, #356]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a58      	ldr	r2, [pc, #352]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c0:	4b53      	ldr	r3, [pc, #332]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a52      	ldr	r2, [pc, #328]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029cc:	4b50      	ldr	r3, [pc, #320]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	494d      	ldr	r1, [pc, #308]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d044      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	4b47      	ldr	r3, [pc, #284]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d119      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e07f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	4b3f      	ldr	r3, [pc, #252]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e06f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	4b3b      	ldr	r3, [pc, #236]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e067      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a32:	4b37      	ldr	r3, [pc, #220]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4934      	ldr	r1, [pc, #208]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a44:	f7fe fe80 	bl	8001748 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7fe fe7c 	bl	8001748 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e04f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	4b2b      	ldr	r3, [pc, #172]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 020c 	and.w	r2, r3, #12
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1eb      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a74:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d20c      	bcs.n	8002a9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e032      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4916      	ldr	r1, [pc, #88]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac6:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	490e      	ldr	r1, [pc, #56]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ada:	f000 f821 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	490a      	ldr	r1, [pc, #40]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	5ccb      	ldrb	r3, [r1, r3]
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	4a09      	ldr	r2, [pc, #36]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002af6:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fde0 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023c00 	.word	0x40023c00
 8002b10:	40023800 	.word	0x40023800
 8002b14:	080048ac 	.word	0x080048ac
 8002b18:	20000010 	.word	0x20000010
 8002b1c:	20000014 	.word	0x20000014

08002b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b24:	b094      	sub	sp, #80	@ 0x50
 8002b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b38:	4b79      	ldr	r3, [pc, #484]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d00d      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x40>
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	f200 80e1 	bhi.w	8002d0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x34>
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b52:	e0db      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b73      	ldr	r3, [pc, #460]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b58:	e0db      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5a:	4b73      	ldr	r3, [pc, #460]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b5e:	e0d8      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b60:	4b6f      	ldr	r3, [pc, #444]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d063      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b6a      	ldr	r3, [pc, #424]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b92:	4622      	mov	r2, r4
 8002b94:	462b      	mov	r3, r5
 8002b96:	f04f 0000 	mov.w	r0, #0
 8002b9a:	f04f 0100 	mov.w	r1, #0
 8002b9e:	0159      	lsls	r1, r3, #5
 8002ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba4:	0150      	lsls	r0, r2, #5
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4621      	mov	r1, r4
 8002bac:	1a51      	subs	r1, r2, r1
 8002bae:	6139      	str	r1, [r7, #16]
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc4:	4659      	mov	r1, fp
 8002bc6:	018b      	lsls	r3, r1, #6
 8002bc8:	4651      	mov	r1, sl
 8002bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bce:	4651      	mov	r1, sl
 8002bd0:	018a      	lsls	r2, r1, #6
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bd8:	4659      	mov	r1, fp
 8002bda:	eb63 0901 	sbc.w	r9, r3, r1
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf2:	4690      	mov	r8, r2
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	4623      	mov	r3, r4
 8002bf8:	eb18 0303 	adds.w	r3, r8, r3
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	462b      	mov	r3, r5
 8002c00:	eb49 0303 	adc.w	r3, r9, r3
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c12:	4629      	mov	r1, r5
 8002c14:	024b      	lsls	r3, r1, #9
 8002c16:	4621      	mov	r1, r4
 8002c18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	024a      	lsls	r2, r1, #9
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c26:	2200      	movs	r2, #0
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c30:	f7fd fadc 	bl	80001ec <__aeabi_uldivmod>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4613      	mov	r3, r2
 8002c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c3c:	e058      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3e:	4b38      	ldr	r3, [pc, #224]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	2200      	movs	r2, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	4611      	mov	r1, r2
 8002c4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c4e:	623b      	str	r3, [r7, #32]
 8002c50:	2300      	movs	r3, #0
 8002c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c58:	4642      	mov	r2, r8
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	f04f 0000 	mov.w	r0, #0
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	0159      	lsls	r1, r3, #5
 8002c66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6a:	0150      	lsls	r0, r2, #5
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4641      	mov	r1, r8
 8002c72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c76:	4649      	mov	r1, r9
 8002c78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c90:	ebb2 040a 	subs.w	r4, r2, sl
 8002c94:	eb63 050b 	sbc.w	r5, r3, fp
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	00eb      	lsls	r3, r5, #3
 8002ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ca6:	00e2      	lsls	r2, r4, #3
 8002ca8:	4614      	mov	r4, r2
 8002caa:	461d      	mov	r5, r3
 8002cac:	4643      	mov	r3, r8
 8002cae:	18e3      	adds	r3, r4, r3
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	eb45 0303 	adc.w	r3, r5, r3
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	028b      	lsls	r3, r1, #10
 8002cca:	4621      	mov	r1, r4
 8002ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	028a      	lsls	r2, r1, #10
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	61fa      	str	r2, [r7, #28]
 8002ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce4:	f7fd fa82 	bl	80001ec <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4613      	mov	r3, r2
 8002cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3750      	adds	r7, #80	@ 0x50
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	00f42400 	.word	0x00f42400
 8002d28:	007a1200 	.word	0x007a1200

08002d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d075      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d60:	4b91      	ldr	r3, [pc, #580]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d66:	f7fe fcef 	bl	8001748 <HAL_GetTick>
 8002d6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d6e:	f7fe fceb 	bl	8001748 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e189      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d80:	4b8a      	ldr	r3, [pc, #552]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d009      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	019a      	lsls	r2, r3, #6
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	071b      	lsls	r3, r3, #28
 8002da4:	4981      	ldr	r1, [pc, #516]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01f      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002db8:	4b7c      	ldr	r3, [pc, #496]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dbe:	0f1b      	lsrs	r3, r3, #28
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	019a      	lsls	r2, r3, #6
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	071b      	lsls	r3, r3, #28
 8002dd8:	4974      	ldr	r1, [pc, #464]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002de0:	4b72      	ldr	r3, [pc, #456]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002de6:	f023 021f 	bic.w	r2, r3, #31
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	496e      	ldr	r1, [pc, #440]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	019a      	lsls	r2, r3, #6
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	061b      	lsls	r3, r3, #24
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	071b      	lsls	r3, r3, #28
 8002e18:	4964      	ldr	r1, [pc, #400]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e20:	4b61      	ldr	r3, [pc, #388]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e26:	f7fe fc8f 	bl	8001748 <HAL_GetTick>
 8002e2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e2e:	f7fe fc8b 	bl	8001748 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e129      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e40:	4b5a      	ldr	r3, [pc, #360]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d079      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e64:	4b52      	ldr	r3, [pc, #328]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e6a:	f7fe fc6d 	bl	8001748 <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e72:	f7fe fc69 	bl	8001748 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e107      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e84:	4b49      	ldr	r3, [pc, #292]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e90:	d0ef      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d020      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e9e:	4b43      	ldr	r3, [pc, #268]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea4:	0f1b      	lsrs	r3, r3, #28
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	019a      	lsls	r2, r3, #6
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	071b      	lsls	r3, r3, #28
 8002ebe:	493b      	ldr	r1, [pc, #236]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ec6:	4b39      	ldr	r3, [pc, #228]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ecc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	4934      	ldr	r1, [pc, #208]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01e      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eec:	4b2f      	ldr	r3, [pc, #188]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	0e1b      	lsrs	r3, r3, #24
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	019a      	lsls	r2, r3, #6
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	061b      	lsls	r3, r3, #24
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	071b      	lsls	r3, r3, #28
 8002f0c:	4927      	ldr	r1, [pc, #156]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f14:	4b25      	ldr	r3, [pc, #148]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	4922      	ldr	r1, [pc, #136]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f2a:	4b21      	ldr	r3, [pc, #132]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f30:	f7fe fc0a 	bl	8001748 <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f38:	f7fe fc06 	bl	8001748 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0a4      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f4a:	4b18      	ldr	r3, [pc, #96]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f56:	d1ef      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 808b 	beq.w	800307c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	4b10      	ldr	r3, [pc, #64]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f76:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f82:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f8e:	f7fe fbdb 	bl	8001748 <HAL_GetTick>
 8002f92:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002f94:	e010      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f96:	f7fe fbd7 	bl	8001748 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d909      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e075      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002fa8:	42470068 	.word	0x42470068
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	42470070 	.word	0x42470070
 8002fb4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002fb8:	4b38      	ldr	r3, [pc, #224]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0e8      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fc4:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fcc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d02f      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d028      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fec:	4b2d      	ldr	r3, [pc, #180]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ff8:	4a29      	ldr	r2, [pc, #164]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ffe:	4b28      	ldr	r3, [pc, #160]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	d114      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe fb9d 	bl	8001748 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003010:	e00a      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7fe fb99 	bl	8001748 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e035      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ee      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800303c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003040:	d10d      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003042:	4b17      	ldr	r3, [pc, #92]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003056:	4912      	ldr	r1, [pc, #72]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
 800305c:	e005      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800305e:	4b10      	ldr	r3, [pc, #64]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	4a0f      	ldr	r2, [pc, #60]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003064:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003068:	6093      	str	r3, [r2, #8]
 800306a:	4b0d      	ldr	r3, [pc, #52]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800306c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003076:	490a      	ldr	r1, [pc, #40]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003078:	4313      	orrs	r3, r2
 800307a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800308e:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003090:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40007000 	.word	0x40007000
 80030a0:	40023800 	.word	0x40023800
 80030a4:	42470e40 	.word	0x42470e40
 80030a8:	424711e0 	.word	0x424711e0

080030ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e07b      	b.n	80031b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030ce:	d009      	beq.n	80030e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	61da      	str	r2, [r3, #28]
 80030d6:	e005      	b.n	80030e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe f9dc 	bl	80014bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800311a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003168:	ea42 0103 	orr.w	r1, r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003170:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0104 	and.w	r1, r3, #4
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	f003 0210 	and.w	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e01a      	b.n	8003206 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7fe f9af 	bl	800154c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b088      	sub	sp, #32
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800321e:	f7fe fa93 	bl	8001748 <HAL_GetTick>
 8003222:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d001      	beq.n	8003238 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
 8003236:	e12a      	b.n	800348e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_SPI_Transmit+0x36>
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e122      	b.n	800348e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_SPI_Transmit+0x48>
 8003252:	2302      	movs	r3, #2
 8003254:	e11b      	b.n	800348e <HAL_SPI_Transmit+0x280>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2203      	movs	r2, #3
 8003262:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a4:	d10f      	bne.n	80032c6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d0:	2b40      	cmp	r3, #64	@ 0x40
 80032d2:	d007      	beq.n	80032e4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032ec:	d152      	bne.n	8003394 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <HAL_SPI_Transmit+0xee>
 80032f6:	8b7b      	ldrh	r3, [r7, #26]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d145      	bne.n	8003388 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003300:	881a      	ldrh	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	1c9a      	adds	r2, r3, #2
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003320:	e032      	b.n	8003388 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b02      	cmp	r3, #2
 800332e:	d112      	bne.n	8003356 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	881a      	ldrh	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	1c9a      	adds	r2, r3, #2
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003354:	e018      	b.n	8003388 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003356:	f7fe f9f7 	bl	8001748 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d803      	bhi.n	800336e <HAL_SPI_Transmit+0x160>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800336c:	d102      	bne.n	8003374 <HAL_SPI_Transmit+0x166>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e082      	b.n	800348e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1c7      	bne.n	8003322 <HAL_SPI_Transmit+0x114>
 8003392:	e053      	b.n	800343c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_SPI_Transmit+0x194>
 800339c:	8b7b      	ldrh	r3, [r7, #26]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d147      	bne.n	8003432 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	7812      	ldrb	r2, [r2, #0]
 80033ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033c8:	e033      	b.n	8003432 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d113      	bne.n	8003400 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	7812      	ldrb	r2, [r2, #0]
 80033e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033fe:	e018      	b.n	8003432 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003400:	f7fe f9a2 	bl	8001748 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d803      	bhi.n	8003418 <HAL_SPI_Transmit+0x20a>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003416:	d102      	bne.n	800341e <HAL_SPI_Transmit+0x210>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e02d      	b.n	800348e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1c6      	bne.n	80033ca <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	6839      	ldr	r1, [r7, #0]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f8bf 	bl	80035c4 <SPI_EndRxTxTransaction>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10a      	bne.n	8003470 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800348c:	2300      	movs	r3, #0
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3720      	adds	r7, #32
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034a4:	b2db      	uxtb	r3, r3
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034c4:	f7fe f940 	bl	8001748 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	4413      	add	r3, r2
 80034d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034d4:	f7fe f938 	bl	8001748 <HAL_GetTick>
 80034d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034da:	4b39      	ldr	r3, [pc, #228]	@ (80035c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	015b      	lsls	r3, r3, #5
 80034e0:	0d1b      	lsrs	r3, r3, #20
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ea:	e054      	b.n	8003596 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034f2:	d050      	beq.n	8003596 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034f4:	f7fe f928 	bl	8001748 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	429a      	cmp	r2, r3
 8003502:	d902      	bls.n	800350a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d13d      	bne.n	8003586 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003522:	d111      	bne.n	8003548 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800352c:	d004      	beq.n	8003538 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003536:	d107      	bne.n	8003548 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003546:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003550:	d10f      	bne.n	8003572 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e017      	b.n	80035b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	3b01      	subs	r3, #1
 8003594:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	bf0c      	ite	eq
 80035a6:	2301      	moveq	r3, #1
 80035a8:	2300      	movne	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d19b      	bne.n	80034ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000010 	.word	0x20000010

080035c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2201      	movs	r2, #1
 80035d8:	2102      	movs	r1, #2
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f7ff ff6a 	bl	80034b4 <SPI_WaitFlagStateUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d007      	beq.n	80035f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e032      	b.n	800365c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <SPI_EndRxTxTransaction+0xa0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003668 <SPI_EndRxTxTransaction+0xa4>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	0d5b      	lsrs	r3, r3, #21
 8003602:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003614:	d112      	bne.n	800363c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2200      	movs	r2, #0
 800361e:	2180      	movs	r1, #128	@ 0x80
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff ff47 	bl	80034b4 <SPI_WaitFlagStateUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d016      	beq.n	800365a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e00f      	b.n	800365c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3b01      	subs	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003652:	2b80      	cmp	r3, #128	@ 0x80
 8003654:	d0f2      	beq.n	800363c <SPI_EndRxTxTransaction+0x78>
 8003656:	e000      	b.n	800365a <SPI_EndRxTxTransaction+0x96>
        break;
 8003658:	bf00      	nop
  }

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000010 	.word	0x20000010
 8003668:	165e9f81 	.word	0x165e9f81

0800366c <memset>:
 800366c:	4402      	add	r2, r0
 800366e:	4603      	mov	r3, r0
 8003670:	4293      	cmp	r3, r2
 8003672:	d100      	bne.n	8003676 <memset+0xa>
 8003674:	4770      	bx	lr
 8003676:	f803 1b01 	strb.w	r1, [r3], #1
 800367a:	e7f9      	b.n	8003670 <memset+0x4>

0800367c <__libc_init_array>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	4d0d      	ldr	r5, [pc, #52]	@ (80036b4 <__libc_init_array+0x38>)
 8003680:	4c0d      	ldr	r4, [pc, #52]	@ (80036b8 <__libc_init_array+0x3c>)
 8003682:	1b64      	subs	r4, r4, r5
 8003684:	10a4      	asrs	r4, r4, #2
 8003686:	2600      	movs	r6, #0
 8003688:	42a6      	cmp	r6, r4
 800368a:	d109      	bne.n	80036a0 <__libc_init_array+0x24>
 800368c:	4d0b      	ldr	r5, [pc, #44]	@ (80036bc <__libc_init_array+0x40>)
 800368e:	4c0c      	ldr	r4, [pc, #48]	@ (80036c0 <__libc_init_array+0x44>)
 8003690:	f000 f818 	bl	80036c4 <_init>
 8003694:	1b64      	subs	r4, r4, r5
 8003696:	10a4      	asrs	r4, r4, #2
 8003698:	2600      	movs	r6, #0
 800369a:	42a6      	cmp	r6, r4
 800369c:	d105      	bne.n	80036aa <__libc_init_array+0x2e>
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a4:	4798      	blx	r3
 80036a6:	3601      	adds	r6, #1
 80036a8:	e7ee      	b.n	8003688 <__libc_init_array+0xc>
 80036aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ae:	4798      	blx	r3
 80036b0:	3601      	adds	r6, #1
 80036b2:	e7f2      	b.n	800369a <__libc_init_array+0x1e>
 80036b4:	080048c4 	.word	0x080048c4
 80036b8:	080048c4 	.word	0x080048c4
 80036bc:	080048c4 	.word	0x080048c4
 80036c0:	080048c8 	.word	0x080048c8

080036c4 <_init>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr

080036d0 <_fini>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr
