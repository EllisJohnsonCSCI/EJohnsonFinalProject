
EJohnsonFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063cc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001270  0800657c  0800657c  0000757c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077ec  080077ec  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  080077ec  080077ec  000087ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077f4  080077f4  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077f4  080077f4  000087f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077f8  080077f8  000087f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080077fc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009078  2**0
                  CONTENTS
 10 .bss          00025b1c  20000078  20000078  00009078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025b94  20025b94  00009078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e61a  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ac  00000000  00000000  000176c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00019f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae9  00000000  00000000  0001add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265e7  00000000  00000000  0001b8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001146a  00000000  00000000  00041ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1791  00000000  00000000  00053312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134aa3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004244  00000000  00000000  00134ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00138d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006564 	.word	0x08006564

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006564 	.word	0x08006564

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f001 fe9c 	bl	80022c0 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fa1e 	bl	80009c8 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f9d1 	bl	8000934 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fae0 	bl	8000b5c <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fd6e 	bl	800107c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <ApplicationInit+0x30>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 f805 	bl	80005b4 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000098 	.word	0x20000098

080005b4 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005cc:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005ce:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005d2:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4807      	ldr	r0, [pc, #28]	@ (800061c <LCDTouchScreenInterruptGPIOInit+0x68>)
 80005fe:	f002 f963 	bl	80028c8 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000602:	2028      	movs	r0, #40	@ 0x28
 8000604:	f002 f911 	bl	800282a <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800060a:	4a06      	ldr	r2, [pc, #24]	@ (8000624 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800060c:	601a      	str	r2, [r3, #0]

}
 800060e:	bf00      	nop
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000
 8000620:	200000a0 	.word	0x200000a0
 8000624:	0600000f 	.word	0x0600000f

08000628 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universal interrupt guard
 800062e:	2028      	movs	r0, #40	@ 0x28
 8000630:	f002 f909 	bl	8002846 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000634:	2300      	movs	r3, #0
 8000636:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000638:	4b52      	ldr	r3, [pc, #328]	@ (8000784 <EXTI15_10_IRQHandler+0x15c>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800063e:	e006      	b.n	800064e <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000640:	204c      	movs	r0, #76	@ 0x4c
 8000642:	f001 fbac 	bl	8001d9e <STMPE811_Read>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	4b4e      	ldr	r3, [pc, #312]	@ (8000784 <EXTI15_10_IRQHandler+0x15c>)
 800064c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800064e:	4b4d      	ldr	r3, [pc, #308]	@ (8000784 <EXTI15_10_IRQHandler+0x15c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0f4      	beq.n	8000640 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000656:	200a      	movs	r0, #10
 8000658:	f000 fd26 	bl	80010a8 <ReadRegisterFromTouchModule>
 800065c:	4603      	mov	r3, r0
 800065e:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000660:	2100      	movs	r1, #0
 8000662:	200a      	movs	r0, #10
 8000664:	f000 fd2e 	bl	80010c4 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000668:	200b      	movs	r0, #11
 800066a:	f000 fd1d 	bl	80010a8 <ReadRegisterFromTouchModule>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	4b45      	ldr	r3, [pc, #276]	@ (8000788 <EXTI15_10_IRQHandler+0x160>)
 8000674:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000676:	4b44      	ldr	r3, [pc, #272]	@ (8000788 <EXTI15_10_IRQHandler+0x160>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000680:	797b      	ldrb	r3, [r7, #5]
 8000682:	4619      	mov	r1, r3
 8000684:	200b      	movs	r0, #11
 8000686:	f000 fd1d 	bl	80010c4 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800068a:	2040      	movs	r0, #64	@ 0x40
 800068c:	f000 fd0c 	bl	80010a8 <ReadRegisterFromTouchModule>
 8000690:	4603      	mov	r3, r0
 8000692:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000694:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	da01      	bge.n	80006a0 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 800069c:	2301      	movs	r3, #1
 800069e:	71fb      	strb	r3, [r7, #7]
	}

	/* - ACTION TO EXECUTE DUE TO INTERRUPT - */

	switch(screenCount){
 80006a0:	4b3a      	ldr	r3, [pc, #232]	@ (800078c <EXTI15_10_IRQHandler+0x164>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <EXTI15_10_IRQHandler+0x86>
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d011      	beq.n	80006d0 <EXTI15_10_IRQHandler+0xa8>
		break;

	// Consider third screen if we include menu/replay button

	default:
		break;
 80006ac:	e04a      	b.n	8000744 <EXTI15_10_IRQHandler+0x11c>
		if(TM_STMPE811_TouchInRectangle(&StaticTouchData, 70, 160, 100, 100)){
 80006ae:	4b38      	ldr	r3, [pc, #224]	@ (8000790 <EXTI15_10_IRQHandler+0x168>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	2b45      	cmp	r3, #69	@ 0x45
 80006b4:	d906      	bls.n	80006c4 <EXTI15_10_IRQHandler+0x9c>
 80006b6:	4b36      	ldr	r3, [pc, #216]	@ (8000790 <EXTI15_10_IRQHandler+0x168>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	2ba9      	cmp	r3, #169	@ 0xa9
 80006bc:	d802      	bhi.n	80006c4 <EXTI15_10_IRQHandler+0x9c>
 80006be:	4b34      	ldr	r3, [pc, #208]	@ (8000790 <EXTI15_10_IRQHandler+0x168>)
 80006c0:	885b      	ldrh	r3, [r3, #2]
 80006c2:	2b9f      	cmp	r3, #159	@ 0x9f
		screenCount = 1;
 80006c4:	4b31      	ldr	r3, [pc, #196]	@ (800078c <EXTI15_10_IRQHandler+0x164>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
		screen2();
 80006ca:	f000 fcb3 	bl	8001034 <screen2>
		break;
 80006ce:	e039      	b.n	8000744 <EXTI15_10_IRQHandler+0x11c>
		if(isTouchDetected) // Touch has been detected
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d030      	beq.n	8000738 <EXTI15_10_IRQHandler+0x110>
			printf("\nPressed");
 80006d6:	482f      	ldr	r0, [pc, #188]	@ (8000794 <EXTI15_10_IRQHandler+0x16c>)
 80006d8:	f005 f878 	bl	80057cc <iprintf>
			DetermineTouchPosition(&StaticTouchData);
 80006dc:	482c      	ldr	r0, [pc, #176]	@ (8000790 <EXTI15_10_IRQHandler+0x168>)
 80006de:	f000 fcd8 	bl	8001092 <DetermineTouchPosition>
			printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <EXTI15_10_IRQHandler+0x168>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <EXTI15_10_IRQHandler+0x168>)
 80006ea:	885b      	ldrh	r3, [r3, #2]
 80006ec:	461a      	mov	r2, r3
 80006ee:	482a      	ldr	r0, [pc, #168]	@ (8000798 <EXTI15_10_IRQHandler+0x170>)
 80006f0:	f005 f86c 	bl	80057cc <iprintf>
			if(TM_STMPE811_TouchInRectangle(&StaticTouchData, 0, 0, 125, 320)){
 80006f4:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <EXTI15_10_IRQHandler+0x168>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	2b7c      	cmp	r3, #124	@ 0x7c
 80006fa:	d80a      	bhi.n	8000712 <EXTI15_10_IRQHandler+0xea>
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <EXTI15_10_IRQHandler+0x168>)
 80006fe:	885b      	ldrh	r3, [r3, #2]
 8000700:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000704:	d205      	bcs.n	8000712 <EXTI15_10_IRQHandler+0xea>
				LCD_Clear(0, LCD_COLOR_RED);
 8000706:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fa26 	bl	8000b5c <LCD_Clear>
		break;
 8000710:	e017      	b.n	8000742 <EXTI15_10_IRQHandler+0x11a>
			else if(TM_STMPE811_TouchInRectangle(&StaticTouchData, 125, 0, 125, 320)){
 8000712:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <EXTI15_10_IRQHandler+0x168>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	2b7c      	cmp	r3, #124	@ 0x7c
 8000718:	d913      	bls.n	8000742 <EXTI15_10_IRQHandler+0x11a>
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <EXTI15_10_IRQHandler+0x168>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	2bf9      	cmp	r3, #249	@ 0xf9
 8000720:	d80f      	bhi.n	8000742 <EXTI15_10_IRQHandler+0x11a>
 8000722:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <EXTI15_10_IRQHandler+0x168>)
 8000724:	885b      	ldrh	r3, [r3, #2]
 8000726:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800072a:	d20a      	bcs.n	8000742 <EXTI15_10_IRQHandler+0x11a>
				LCD_Clear(0, LCD_COLOR_GREEN);
 800072c:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000730:	2000      	movs	r0, #0
 8000732:	f000 fa13 	bl	8000b5c <LCD_Clear>
		break;
 8000736:	e004      	b.n	8000742 <EXTI15_10_IRQHandler+0x11a>
			printf("\nNot pressed \n");
 8000738:	4818      	ldr	r0, [pc, #96]	@ (800079c <EXTI15_10_IRQHandler+0x174>)
 800073a:	f005 f8af 	bl	800589c <puts>
			screen2();
 800073e:	f000 fc79 	bl	8001034 <screen2>
		break;
 8000742:	bf00      	nop
	}


	/* - I think everything below here is just taking care of interrupt bits - */

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000744:	2101      	movs	r1, #1
 8000746:	204b      	movs	r0, #75	@ 0x4b
 8000748:	f001 fb3a 	bl	8001dc0 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 800074c:	2100      	movs	r1, #0
 800074e:	204b      	movs	r0, #75	@ 0x4b
 8000750:	f001 fb36 	bl	8001dc0 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	4619      	mov	r1, r3
 8000758:	200a      	movs	r0, #10
 800075a:	f000 fcb3 	bl	80010c4 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 800075e:	2103      	movs	r1, #3
 8000760:	480f      	ldr	r0, [pc, #60]	@ (80007a0 <EXTI15_10_IRQHandler+0x178>)
 8000762:	f002 f899 	bl	8002898 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000766:	2028      	movs	r0, #40	@ 0x28
 8000768:	f002 f887 	bl	800287a <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800076c:	2028      	movs	r0, #40	@ 0x28
 800076e:	f002 f85c 	bl	800282a <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000772:	797b      	ldrb	r3, [r7, #5]
 8000774:	4619      	mov	r1, r3
 8000776:	200b      	movs	r0, #11
 8000778:	f000 fca4 	bl	80010c4 <WriteDataToTouchModule>

}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000ac 	.word	0x200000ac
 8000788:	200000a8 	.word	0x200000a8
 800078c:	20000094 	.word	0x20000094
 8000790:	20000098 	.word	0x20000098
 8000794:	080065a0 	.word	0x080065a0
 8000798:	080065ac 	.word	0x080065ac
 800079c:	080065c0 	.word	0x080065c0
 80007a0:	200000a0 	.word	0x200000a0

080007a4 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	@ 0x30
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000918 <LCD_GPIO_Init+0x174>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b2:	4a59      	ldr	r2, [pc, #356]	@ (8000918 <LCD_GPIO_Init+0x174>)
 80007b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ba:	4b57      	ldr	r3, [pc, #348]	@ (8000918 <LCD_GPIO_Init+0x174>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b53      	ldr	r3, [pc, #332]	@ (8000918 <LCD_GPIO_Init+0x174>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a52      	ldr	r2, [pc, #328]	@ (8000918 <LCD_GPIO_Init+0x174>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b50      	ldr	r3, [pc, #320]	@ (8000918 <LCD_GPIO_Init+0x174>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000918 <LCD_GPIO_Init+0x174>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a4b      	ldr	r2, [pc, #300]	@ (8000918 <LCD_GPIO_Init+0x174>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b49      	ldr	r3, [pc, #292]	@ (8000918 <LCD_GPIO_Init+0x174>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b45      	ldr	r3, [pc, #276]	@ (8000918 <LCD_GPIO_Init+0x174>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a44      	ldr	r2, [pc, #272]	@ (8000918 <LCD_GPIO_Init+0x174>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b42      	ldr	r3, [pc, #264]	@ (8000918 <LCD_GPIO_Init+0x174>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b3e      	ldr	r3, [pc, #248]	@ (8000918 <LCD_GPIO_Init+0x174>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a3d      	ldr	r2, [pc, #244]	@ (8000918 <LCD_GPIO_Init+0x174>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b3b      	ldr	r3, [pc, #236]	@ (8000918 <LCD_GPIO_Init+0x174>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b37      	ldr	r3, [pc, #220]	@ (8000918 <LCD_GPIO_Init+0x174>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a36      	ldr	r2, [pc, #216]	@ (8000918 <LCD_GPIO_Init+0x174>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b34      	ldr	r3, [pc, #208]	@ (8000918 <LCD_GPIO_Init+0x174>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b30      	ldr	r3, [pc, #192]	@ (8000918 <LCD_GPIO_Init+0x174>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a2f      	ldr	r2, [pc, #188]	@ (8000918 <LCD_GPIO_Init+0x174>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b2d      	ldr	r3, [pc, #180]	@ (8000918 <LCD_GPIO_Init+0x174>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800086e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000872:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800087c:	2302      	movs	r3, #2
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000880:	230e      	movs	r3, #14
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4824      	ldr	r0, [pc, #144]	@ (800091c <LCD_GPIO_Init+0x178>)
 800088c:	f002 f81c 	bl	80028c8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000890:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000894:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4820      	ldr	r0, [pc, #128]	@ (8000920 <LCD_GPIO_Init+0x17c>)
 800089e:	f002 f813 	bl	80028c8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80008a2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80008a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	481d      	ldr	r0, [pc, #116]	@ (8000924 <LCD_GPIO_Init+0x180>)
 80008b0:	f002 f80a 	bl	80028c8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80008b4:	2348      	movs	r3, #72	@ 0x48
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	481a      	ldr	r0, [pc, #104]	@ (8000928 <LCD_GPIO_Init+0x184>)
 80008c0:	f002 f802 	bl	80028c8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80008c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4816      	ldr	r0, [pc, #88]	@ (800092c <LCD_GPIO_Init+0x188>)
 80008d2:	f001 fff9 	bl	80028c8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80008d6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80008da:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4813      	ldr	r0, [pc, #76]	@ (8000930 <LCD_GPIO_Init+0x18c>)
 80008e4:	f001 fff0 	bl	80028c8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80008e8:	2303      	movs	r3, #3
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80008ec:	2309      	movs	r3, #9
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	480a      	ldr	r0, [pc, #40]	@ (8000920 <LCD_GPIO_Init+0x17c>)
 80008f8:	f001 ffe6 	bl	80028c8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80008fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4809      	ldr	r0, [pc, #36]	@ (8000930 <LCD_GPIO_Init+0x18c>)
 800090a:	f001 ffdd 	bl	80028c8 <HAL_GPIO_Init>
}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	@ 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020400 	.word	0x40020400
 8000924:	40020800 	.word	0x40020800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40021400 	.word	0x40021400
 8000930:	40021800 	.word	0x40021800

08000934 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b090      	sub	sp, #64	@ 0x40
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000942:	23f0      	movs	r3, #240	@ 0xf0
 8000944:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800094a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800094e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000950:	2302      	movs	r3, #2
 8000952:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000954:	23ff      	movs	r3, #255	@ 0xff
 8000956:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800095c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000962:	2305      	movs	r3, #5
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d101      	bne.n	8000970 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <LTCD_Layer_Init+0x78>)
 800096e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000970:	23f0      	movs	r3, #240	@ 0xf0
 8000972:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000974:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000978:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	4619      	mov	r1, r3
 8000994:	4806      	ldr	r0, [pc, #24]	@ (80009b0 <LTCD_Layer_Init+0x7c>)
 8000996:	f003 fb5d 	bl	8004054 <HAL_LTDC_ConfigLayer>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80009a0:	f000 fb66 	bl	8001070 <LCD_Error_Handler>
	}
}
 80009a4:	bf00      	nop
 80009a6:	3740      	adds	r7, #64	@ 0x40
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000018c 	.word	0x2000018c
 80009b0:	200000b0 	.word	0x200000b0

080009b4 <clearScreen>:

void clearScreen(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  LCD_Clear(0,LCD_COLOR_WHITE);
 80009b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f8cd 	bl	8000b5c <LCD_Clear>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <LTCD__Init>:

void LTCD__Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80009cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000a78 <LTCD__Init+0xb0>)
 80009ce:	4a2b      	ldr	r2, [pc, #172]	@ (8000a7c <LTCD__Init+0xb4>)
 80009d0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80009d2:	4b29      	ldr	r3, [pc, #164]	@ (8000a78 <LTCD__Init+0xb0>)
 80009d4:	2209      	movs	r2, #9
 80009d6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80009d8:	4b27      	ldr	r3, [pc, #156]	@ (8000a78 <LTCD__Init+0xb0>)
 80009da:	2201      	movs	r2, #1
 80009dc:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80009de:	4b26      	ldr	r3, [pc, #152]	@ (8000a78 <LTCD__Init+0xb0>)
 80009e0:	221d      	movs	r2, #29
 80009e2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80009e4:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <LTCD__Init+0xb0>)
 80009e6:	2203      	movs	r2, #3
 80009e8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80009ea:	4b23      	ldr	r3, [pc, #140]	@ (8000a78 <LTCD__Init+0xb0>)
 80009ec:	f240 120d 	movw	r2, #269	@ 0x10d
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80009f2:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <LTCD__Init+0xb0>)
 80009f4:	f240 1243 	movw	r2, #323	@ 0x143
 80009f8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <LTCD__Init+0xb0>)
 80009fc:	f240 1217 	movw	r2, #279	@ 0x117
 8000a00:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <LTCD__Init+0xb0>)
 8000a04:	f240 1247 	movw	r2, #327	@ 0x147
 8000a08:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <LTCD__Init+0xb0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <LTCD__Init+0xb0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <LTCD__Init+0xb0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <LTCD__Init+0xb8>)
 8000a24:	2208      	movs	r2, #8
 8000a26:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a28:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <LTCD__Init+0xb8>)
 8000a2a:	22c0      	movs	r2, #192	@ 0xc0
 8000a2c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <LTCD__Init+0xb8>)
 8000a30:	2204      	movs	r2, #4
 8000a32:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <LTCD__Init+0xb8>)
 8000a36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a3a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000a3c:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <LTCD__Init+0xb8>)
 8000a3e:	f004 f963 	bl	8004d08 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <LTCD__Init+0xb0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <LTCD__Init+0xb0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <LTCD__Init+0xb0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a54:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <LTCD__Init+0xb0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000a5a:	f7ff fea3 	bl	80007a4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <LTCD__Init+0xb0>)
 8000a60:	f003 fa28 	bl	8003eb4 <HAL_LTDC_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000a6a:	f000 fb01 	bl	8001070 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000a6e:	f000 fb3b 	bl	80010e8 <ili9341_Init>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000b0 	.word	0x200000b0
 8000a7c:	40016800 	.word	0x40016800
 8000a80:	20000158 	.word	0x20000158

08000a84 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000a96:	88ba      	ldrh	r2, [r7, #4]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	1a9b      	subs	r3, r3, r2
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4905      	ldr	r1, [pc, #20]	@ (8000abc <LCD_Draw_Pixel+0x38>)
 8000aa8:	887a      	ldrh	r2, [r7, #2]
 8000aaa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	2000018c 	.word	0x2000018c

08000ac0 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	4608      	mov	r0, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	461a      	mov	r2, r3
 8000ace:	4623      	mov	r3, r4
 8000ad0:	80fb      	strh	r3, [r7, #6]
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80bb      	strh	r3, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	807b      	strh	r3, [r7, #2]
 8000ada:	4613      	mov	r3, r2
 8000adc:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	81fb      	strh	r3, [r7, #14]
 8000ae2:	e00b      	b.n	8000afc <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000ae4:	89fa      	ldrh	r2, [r7, #14]
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	b299      	uxth	r1, r3
 8000aec:	883a      	ldrh	r2, [r7, #0]
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffc7 	bl	8000a84 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000af6:	89fb      	ldrh	r3, [r7, #14]
 8000af8:	3301      	adds	r3, #1
 8000afa:	81fb      	strh	r3, [r7, #14]
 8000afc:	89fa      	ldrh	r2, [r7, #14]
 8000afe:	887b      	ldrh	r3, [r7, #2]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d3ef      	bcc.n	8000ae4 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd90      	pop	{r4, r7, pc}

08000b0e <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000b0e:	b590      	push	{r4, r7, lr}
 8000b10:	b085      	sub	sp, #20
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4604      	mov	r4, r0
 8000b16:	4608      	mov	r0, r1
 8000b18:	4611      	mov	r1, r2
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4623      	mov	r3, r4
 8000b1e:	80fb      	strh	r3, [r7, #6]
 8000b20:	4603      	mov	r3, r0
 8000b22:	80bb      	strh	r3, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	807b      	strh	r3, [r7, #2]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	81fb      	strh	r3, [r7, #14]
 8000b30:	e00b      	b.n	8000b4a <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000b32:	89fa      	ldrh	r2, [r7, #14]
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	4413      	add	r3, r2
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	883a      	ldrh	r2, [r7, #0]
 8000b3c:	88b9      	ldrh	r1, [r7, #4]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ffa0 	bl	8000a84 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000b44:	89fb      	ldrh	r3, [r7, #14]
 8000b46:	3301      	adds	r3, #1
 8000b48:	81fb      	strh	r3, [r7, #14]
 8000b4a:	89fa      	ldrh	r2, [r7, #14]
 8000b4c:	887b      	ldrh	r3, [r7, #2]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d3ef      	bcc.n	8000b32 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd90      	pop	{r4, r7, pc}

08000b5c <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	460a      	mov	r2, r1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d10e      	bne.n	8000b90 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	e007      	b.n	8000b88 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000b78:	4908      	ldr	r1, [pc, #32]	@ (8000b9c <LCD_Clear+0x40>)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	88ba      	ldrh	r2, [r7, #4]
 8000b7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3301      	adds	r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000b8e:	d3f3      	bcc.n	8000b78 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	2000018c 	.word	0x2000018c

08000ba0 <LCD_Draw_Rectangle_Empty>:

void LCD_Draw_Rectangle_Empty(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	4608      	mov	r0, r1
 8000baa:	4611      	mov	r1, r2
 8000bac:	461a      	mov	r2, r3
 8000bae:	4623      	mov	r3, r4
 8000bb0:	80fb      	strh	r3, [r7, #6]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80bb      	strh	r3, [r7, #4]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	807b      	strh	r3, [r7, #2]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	803b      	strh	r3, [r7, #0]
	//draw vertical x,y,height
	//draw vertical x+length,y,height
	//draw horizontal x,y,length
	//draw horizontal x,y+height,length
	LCD_Draw_Vertical_Line(Xpos,Ypos,height,color);
 8000bbe:	8b3b      	ldrh	r3, [r7, #24]
 8000bc0:	883a      	ldrh	r2, [r7, #0]
 8000bc2:	88b9      	ldrh	r1, [r7, #4]
 8000bc4:	88f8      	ldrh	r0, [r7, #6]
 8000bc6:	f7ff ff7b 	bl	8000ac0 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(Xpos+len,Ypos,height,color);
 8000bca:	88fa      	ldrh	r2, [r7, #6]
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	4413      	add	r3, r2
 8000bd0:	b298      	uxth	r0, r3
 8000bd2:	8b3b      	ldrh	r3, [r7, #24]
 8000bd4:	883a      	ldrh	r2, [r7, #0]
 8000bd6:	88b9      	ldrh	r1, [r7, #4]
 8000bd8:	f7ff ff72 	bl	8000ac0 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos,len,color);
 8000bdc:	8b3b      	ldrh	r3, [r7, #24]
 8000bde:	887a      	ldrh	r2, [r7, #2]
 8000be0:	88b9      	ldrh	r1, [r7, #4]
 8000be2:	88f8      	ldrh	r0, [r7, #6]
 8000be4:	f7ff ff93 	bl	8000b0e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos+height,len,color);
 8000be8:	88ba      	ldrh	r2, [r7, #4]
 8000bea:	883b      	ldrh	r3, [r7, #0]
 8000bec:	4413      	add	r3, r2
 8000bee:	b299      	uxth	r1, r3
 8000bf0:	8b3b      	ldrh	r3, [r7, #24]
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	88f8      	ldrh	r0, [r7, #6]
 8000bf6:	f7ff ff8a 	bl	8000b0e <LCD_Draw_Horizontal_Line>
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd90      	pop	{r4, r7, pc}

08000c02 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 8000c02:	b590      	push	{r4, r7, lr}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4604      	mov	r4, r0
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4623      	mov	r3, r4
 8000c12:	80fb      	strh	r3, [r7, #6]
 8000c14:	4603      	mov	r3, r0
 8000c16:	80bb      	strh	r3, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	803b      	strh	r3, [r7, #0]
	for(int i = 0; i < len; i++){
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	e00c      	b.n	8000c40 <LCD_Draw_Rectangle_Fill+0x3e>
		//Draw a bunch of vertical lines from left to right
		LCD_Draw_Vertical_Line(Xpos+i,Ypos,height,color);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b298      	uxth	r0, r3
 8000c30:	8c3b      	ldrh	r3, [r7, #32]
 8000c32:	883a      	ldrh	r2, [r7, #0]
 8000c34:	88b9      	ldrh	r1, [r7, #4]
 8000c36:	f7ff ff43 	bl	8000ac0 <LCD_Draw_Vertical_Line>
	for(int i = 0; i < len; i++){
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbee      	blt.n	8000c26 <LCD_Draw_Rectangle_Fill+0x24>
	}
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd90      	pop	{r4, r7, pc}

08000c52 <LCD_Draw_OBlock>:

void LCD_Draw_OBlock(uint16_t Xpos, uint16_t Ypos){
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b084      	sub	sp, #16
 8000c56:	af02      	add	r7, sp, #8
 8000c58:	4603      	mov	r3, r0
 8000c5a:	460a      	mov	r2, r1
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH*2,LCD_COLOR_YELLOW);
 8000c62:	88b9      	ldrh	r1, [r7, #4]
 8000c64:	88f8      	ldrh	r0, [r7, #6]
 8000c66:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	233c      	movs	r3, #60	@ 0x3c
 8000c6e:	223c      	movs	r2, #60	@ 0x3c
 8000c70:	f7ff ffc7 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <LCD_Draw_IBlock>:
void LCD_Draw_IBlock(uint16_t Xpos, uint16_t Ypos){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	4603      	mov	r3, r0
 8000c84:	460a      	mov	r2, r1
 8000c86:	80fb      	strh	r3, [r7, #6]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*4,LCD_COLOR_CYAN);
 8000c8c:	88b9      	ldrh	r1, [r7, #4]
 8000c8e:	88f8      	ldrh	r0, [r7, #6]
 8000c90:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2378      	movs	r3, #120	@ 0x78
 8000c98:	221e      	movs	r2, #30
 8000c9a:	f7ff ffb2 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <LCD_Draw_SBlock>:
void LCD_Draw_SBlock(uint16_t Xpos, uint16_t Ypos){
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b084      	sub	sp, #16
 8000caa:	af02      	add	r7, sp, #8
 8000cac:	4603      	mov	r3, r0
 8000cae:	460a      	mov	r2, r1
 8000cb0:	80fb      	strh	r3, [r7, #6]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_RED);
 8000cb6:	88b9      	ldrh	r1, [r7, #4]
 8000cb8:	88f8      	ldrh	r0, [r7, #6]
 8000cba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	231e      	movs	r3, #30
 8000cc2:	223c      	movs	r2, #60	@ 0x3c
 8000cc4:	f7ff ff9d 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_RED);
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	3b1e      	subs	r3, #30
 8000ccc:	b298      	uxth	r0, r3
 8000cce:	88bb      	ldrh	r3, [r7, #4]
 8000cd0:	331e      	adds	r3, #30
 8000cd2:	b299      	uxth	r1, r3
 8000cd4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	231e      	movs	r3, #30
 8000cdc:	223c      	movs	r2, #60	@ 0x3c
 8000cde:	f7ff ff90 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <LCD_Draw_ZBlock>:
void LCD_Draw_ZBlock(uint16_t Xpos, uint16_t Ypos){
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af02      	add	r7, sp, #8
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	80fb      	strh	r3, [r7, #6]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_GREEN);
 8000cfa:	88b9      	ldrh	r1, [r7, #4]
 8000cfc:	88f8      	ldrh	r0, [r7, #6]
 8000cfe:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	231e      	movs	r3, #30
 8000d06:	223c      	movs	r2, #60	@ 0x3c
 8000d08:	f7ff ff7b 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_GREEN);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	331e      	adds	r3, #30
 8000d10:	b298      	uxth	r0, r3
 8000d12:	88bb      	ldrh	r3, [r7, #4]
 8000d14:	331e      	adds	r3, #30
 8000d16:	b299      	uxth	r1, r3
 8000d18:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	231e      	movs	r3, #30
 8000d20:	223c      	movs	r2, #60	@ 0x3c
 8000d22:	f7ff ff6e 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <LCD_Draw_LBlock>:
void LCD_Draw_LBlock(uint16_t Xpos, uint16_t Ypos){
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af02      	add	r7, sp, #8
 8000d34:	4603      	mov	r3, r0
 8000d36:	460a      	mov	r2, r1
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	80bb      	strh	r3, [r7, #4]
	//orange
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_BLUE2);
 8000d3e:	88b9      	ldrh	r1, [r7, #4]
 8000d40:	88f8      	ldrh	r0, [r7, #6]
 8000d42:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	235a      	movs	r3, #90	@ 0x5a
 8000d4a:	221e      	movs	r2, #30
 8000d4c:	f7ff ff59 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+(BLOCK_LENGTH*2),BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_BLUE2);
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	331e      	adds	r3, #30
 8000d54:	b298      	uxth	r0, r3
 8000d56:	88bb      	ldrh	r3, [r7, #4]
 8000d58:	333c      	adds	r3, #60	@ 0x3c
 8000d5a:	b299      	uxth	r1, r3
 8000d5c:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	231e      	movs	r3, #30
 8000d64:	221e      	movs	r2, #30
 8000d66:	f7ff ff4c 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <LCD_Draw_JBlock>:
void LCD_Draw_JBlock(uint16_t Xpos, uint16_t Ypos){
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af02      	add	r7, sp, #8
 8000d78:	4603      	mov	r3, r0
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	80fb      	strh	r3, [r7, #6]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	80bb      	strh	r3, [r7, #4]
	//pink
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_MAGENTA);
 8000d82:	88b9      	ldrh	r1, [r7, #4]
 8000d84:	88f8      	ldrh	r0, [r7, #6]
 8000d86:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	235a      	movs	r3, #90	@ 0x5a
 8000d8e:	221e      	movs	r2, #30
 8000d90:	f7ff ff37 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+(BLOCK_LENGTH*2),BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_MAGENTA);
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	3b1e      	subs	r3, #30
 8000d98:	b298      	uxth	r0, r3
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	333c      	adds	r3, #60	@ 0x3c
 8000d9e:	b299      	uxth	r1, r3
 8000da0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	231e      	movs	r3, #30
 8000da8:	221e      	movs	r2, #30
 8000daa:	f7ff ff2a 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <LCD_Draw_TBlock>:
void LCD_Draw_TBlock(uint16_t Xpos, uint16_t Ypos){
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af02      	add	r7, sp, #8
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	460a      	mov	r2, r1
 8000dc0:	80fb      	strh	r3, [r7, #6]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	80bb      	strh	r3, [r7, #4]
	//purple
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*3,BLOCK_LENGTH,LCD_COLOR_GREY);
 8000dc6:	88b9      	ldrh	r1, [r7, #4]
 8000dc8:	88f8      	ldrh	r0, [r7, #6]
 8000dca:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	231e      	movs	r3, #30
 8000dd2:	225a      	movs	r2, #90	@ 0x5a
 8000dd4:	f7ff ff15 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_GREY);
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	331e      	adds	r3, #30
 8000ddc:	b298      	uxth	r0, r3
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	331e      	adds	r3, #30
 8000de2:	b299      	uxth	r1, r3
 8000de4:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	231e      	movs	r3, #30
 8000dec:	221e      	movs	r2, #30
 8000dee:	f7ff ff08 	bl	8000c02 <LCD_Draw_Rectangle_Fill>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000e06:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <LCD_SetTextColor+0x1c>)
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	8013      	strh	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	20000000 	.word	0x20000000

08000e1c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <LCD_SetFont+0x1c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000188 	.word	0x20000188

08000e3c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	603a      	str	r2, [r7, #0]
 8000e46:	80fb      	strh	r3, [r7, #6]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	e04c      	b.n	8000ef4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	e03f      	b.n	8000ee0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <LCD_Draw_Char+0xd0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	889b      	ldrh	r3, [r3, #4]
 8000e72:	4a27      	ldr	r2, [pc, #156]	@ (8000f10 <LCD_Draw_Char+0xd4>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	2280      	movs	r2, #128	@ 0x80
 8000e80:	409a      	lsls	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	fa42 f303 	asr.w	r3, r2, r3
 8000e88:	400b      	ands	r3, r1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d104      	bne.n	8000e98 <LCD_Draw_Char+0x5c>
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <LCD_Draw_Char+0xd0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	889b      	ldrh	r3, [r3, #4]
 8000e94:	2b0c      	cmp	r3, #12
 8000e96:	d920      	bls.n	8000eda <LCD_Draw_Char+0x9e>
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	fa42 f303 	asr.w	r3, r2, r3
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d104      	bne.n	8000ebc <LCD_Draw_Char+0x80>
 8000eb2:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <LCD_Draw_Char+0xd0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	889b      	ldrh	r3, [r3, #4]
 8000eb8:	2b0c      	cmp	r3, #12
 8000eba:	d80e      	bhi.n	8000eda <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b298      	uxth	r0, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	88bb      	ldrh	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4a10      	ldr	r2, [pc, #64]	@ (8000f14 <LCD_Draw_Char+0xd8>)
 8000ed2:	8812      	ldrh	r2, [r2, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff fdd5 	bl	8000a84 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	3301      	adds	r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <LCD_Draw_Char+0xd0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	889b      	ldrh	r3, [r3, #4]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d3b8      	bcc.n	8000e60 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <LCD_Draw_Char+0xd0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	88db      	ldrh	r3, [r3, #6]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d3ab      	bcc.n	8000e5a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000188 	.word	0x20000188
 8000f10:	aaaaaaab 	.word	0xaaaaaaab
 8000f14:	20000000 	.word	0x20000000

08000f18 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
 8000f22:	460b      	mov	r3, r1
 8000f24:	80bb      	strh	r3, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000f2a:	78fb      	ldrb	r3, [r7, #3]
 8000f2c:	3b20      	subs	r3, #32
 8000f2e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000f30:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <LCD_DisplayChar+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	4907      	ldr	r1, [pc, #28]	@ (8000f58 <LCD_DisplayChar+0x40>)
 8000f3a:	6809      	ldr	r1, [r1, #0]
 8000f3c:	88c9      	ldrh	r1, [r1, #6]
 8000f3e:	fb01 f303 	mul.w	r3, r1, r3
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	441a      	add	r2, r3
 8000f46:	88b9      	ldrh	r1, [r7, #4]
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff76 	bl	8000e3c <LCD_Draw_Char>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000188 	.word	0x20000188

08000f5c <screen1>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void screen1(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af02      	add	r7, sp, #8
	clearScreen();
 8000f62:	f7ff fd27 	bl	80009b4 <clearScreen>

	//Show all blocks
	LCD_Draw_OBlock(90,250);
 8000f66:	21fa      	movs	r1, #250	@ 0xfa
 8000f68:	205a      	movs	r0, #90	@ 0x5a
 8000f6a:	f7ff fe72 	bl	8000c52 <LCD_Draw_OBlock>
	LCD_Draw_IBlock(105,110);
 8000f6e:	216e      	movs	r1, #110	@ 0x6e
 8000f70:	2069      	movs	r0, #105	@ 0x69
 8000f72:	f7ff fe83 	bl	8000c7c <LCD_Draw_IBlock>
	LCD_Draw_SBlock(170,200);
 8000f76:	21c8      	movs	r1, #200	@ 0xc8
 8000f78:	20aa      	movs	r0, #170	@ 0xaa
 8000f7a:	f7ff fe94 	bl	8000ca6 <LCD_Draw_SBlock>
	LCD_Draw_ZBlock(10,200);
 8000f7e:	21c8      	movs	r1, #200	@ 0xc8
 8000f80:	200a      	movs	r0, #10
 8000f82:	f7ff feb2 	bl	8000cea <LCD_Draw_ZBlock>
	LCD_Draw_LBlock(20,10);
 8000f86:	210a      	movs	r1, #10
 8000f88:	2014      	movs	r0, #20
 8000f8a:	f7ff fed0 	bl	8000d2e <LCD_Draw_LBlock>
	LCD_Draw_JBlock(190,10);
 8000f8e:	210a      	movs	r1, #10
 8000f90:	20be      	movs	r0, #190	@ 0xbe
 8000f92:	f7ff feee 	bl	8000d72 <LCD_Draw_JBlock>
	LCD_Draw_TBlock(75,35);
 8000f96:	2123      	movs	r1, #35	@ 0x23
 8000f98:	204b      	movs	r0, #75	@ 0x4b
 8000f9a:	f7ff ff0c 	bl	8000db6 <LCD_Draw_TBlock>

	//"Tetris"
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff ff2c 	bl	8000dfc <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000fa4:	4822      	ldr	r0, [pc, #136]	@ (8001030 <screen1+0xd4>)
 8000fa6:	f7ff ff39 	bl	8000e1c <LCD_SetFont>

	LCD_DisplayChar(80,40,'T');
 8000faa:	2254      	movs	r2, #84	@ 0x54
 8000fac:	2128      	movs	r1, #40	@ 0x28
 8000fae:	2050      	movs	r0, #80	@ 0x50
 8000fb0:	f7ff ffb2 	bl	8000f18 <LCD_DisplayChar>
	LCD_DisplayChar(95,40,'E');
 8000fb4:	2245      	movs	r2, #69	@ 0x45
 8000fb6:	2128      	movs	r1, #40	@ 0x28
 8000fb8:	205f      	movs	r0, #95	@ 0x5f
 8000fba:	f7ff ffad 	bl	8000f18 <LCD_DisplayChar>
	LCD_DisplayChar(110,40,'T');
 8000fbe:	2254      	movs	r2, #84	@ 0x54
 8000fc0:	2128      	movs	r1, #40	@ 0x28
 8000fc2:	206e      	movs	r0, #110	@ 0x6e
 8000fc4:	f7ff ffa8 	bl	8000f18 <LCD_DisplayChar>
	LCD_DisplayChar(125,40,'R');
 8000fc8:	2252      	movs	r2, #82	@ 0x52
 8000fca:	2128      	movs	r1, #40	@ 0x28
 8000fcc:	207d      	movs	r0, #125	@ 0x7d
 8000fce:	f7ff ffa3 	bl	8000f18 <LCD_DisplayChar>
	LCD_DisplayChar(135,40,'I');
 8000fd2:	2249      	movs	r2, #73	@ 0x49
 8000fd4:	2128      	movs	r1, #40	@ 0x28
 8000fd6:	2087      	movs	r0, #135	@ 0x87
 8000fd8:	f7ff ff9e 	bl	8000f18 <LCD_DisplayChar>
	LCD_DisplayChar(145,40,'S');
 8000fdc:	2253      	movs	r2, #83	@ 0x53
 8000fde:	2128      	movs	r1, #40	@ 0x28
 8000fe0:	2091      	movs	r0, #145	@ 0x91
 8000fe2:	f7ff ff99 	bl	8000f18 <LCD_DisplayChar>

	//Start button
	LCD_DisplayChar(95,200,'S');
 8000fe6:	2253      	movs	r2, #83	@ 0x53
 8000fe8:	21c8      	movs	r1, #200	@ 0xc8
 8000fea:	205f      	movs	r0, #95	@ 0x5f
 8000fec:	f7ff ff94 	bl	8000f18 <LCD_DisplayChar>
	LCD_DisplayChar(105,200,'t');
 8000ff0:	2274      	movs	r2, #116	@ 0x74
 8000ff2:	21c8      	movs	r1, #200	@ 0xc8
 8000ff4:	2069      	movs	r0, #105	@ 0x69
 8000ff6:	f7ff ff8f 	bl	8000f18 <LCD_DisplayChar>
	LCD_DisplayChar(115,200,'a');
 8000ffa:	2261      	movs	r2, #97	@ 0x61
 8000ffc:	21c8      	movs	r1, #200	@ 0xc8
 8000ffe:	2073      	movs	r0, #115	@ 0x73
 8001000:	f7ff ff8a 	bl	8000f18 <LCD_DisplayChar>
	LCD_DisplayChar(125,200,'r');
 8001004:	2272      	movs	r2, #114	@ 0x72
 8001006:	21c8      	movs	r1, #200	@ 0xc8
 8001008:	207d      	movs	r0, #125	@ 0x7d
 800100a:	f7ff ff85 	bl	8000f18 <LCD_DisplayChar>
	LCD_DisplayChar(132,200,'t');
 800100e:	2274      	movs	r2, #116	@ 0x74
 8001010:	21c8      	movs	r1, #200	@ 0xc8
 8001012:	2084      	movs	r0, #132	@ 0x84
 8001014:	f7ff ff80 	bl	8000f18 <LCD_DisplayChar>
	LCD_Draw_Rectangle_Empty(70,160,100,100,LCD_COLOR_BLACK);
 8001018:	2300      	movs	r3, #0
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2364      	movs	r3, #100	@ 0x64
 800101e:	2264      	movs	r2, #100	@ 0x64
 8001020:	21a0      	movs	r1, #160	@ 0xa0
 8001022:	2046      	movs	r0, #70	@ 0x46
 8001024:	f7ff fdbc 	bl	8000ba0 <LCD_Draw_Rectangle_Empty>
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000004 	.word	0x20000004

08001034 <screen2>:

void screen2(void){
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af02      	add	r7, sp, #8
	//320 = bottom of screen
	//250 = right of screen
	//10 tall x 6 wide
	//30*10 = 300
	//30*6 = 180
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fede 	bl	8000dfc <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001040:	480a      	ldr	r0, [pc, #40]	@ (800106c <screen2+0x38>)
 8001042:	f7ff feeb 	bl	8000e1c <LCD_SetFont>

	clearScreen();
 8001046:	f7ff fcb5 	bl	80009b4 <clearScreen>

	LCD_DisplayChar(120,40,'2');
 800104a:	2232      	movs	r2, #50	@ 0x32
 800104c:	2128      	movs	r1, #40	@ 0x28
 800104e:	2078      	movs	r0, #120	@ 0x78
 8001050:	f7ff ff62 	bl	8000f18 <LCD_DisplayChar>

	//Border
	LCD_Draw_Rectangle_Empty(30,10,180,300,LCD_COLOR_BLACK);
 8001054:	2300      	movs	r3, #0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800105c:	22b4      	movs	r2, #180	@ 0xb4
 800105e:	210a      	movs	r1, #10
 8001060:	201e      	movs	r0, #30
 8001062:	f7ff fd9d 	bl	8000ba0 <LCD_Draw_Rectangle_Empty>

	//Figure out moving block from side to side

	//Ensure button interrupt works
	//Figure out rotate block on button interrupt
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000004 	.word	0x20000004

08001070 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <LCD_Error_Handler+0x8>

0800107c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001080:	f000 fdc6 	bl	8001c10 <STMPE811_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b02      	cmp	r3, #2
 8001088:	d001      	beq.n	800108e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialization
 800108a:	bf00      	nop
 800108c:	e7fd      	b.n	800108a <InitializeLCDTouch+0xe>
  }
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}

08001092 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fea2 	bl	8001de4 <STMPE811_DetermineTouchPosition>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fe72 	bl	8001d9e <STMPE811_Read>
 80010ba:	4603      	mov	r3, r0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 80010d4:	79ba      	ldrb	r2, [r7, #6]
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fe70 	bl	8001dc0 <STMPE811_Write>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80010ec:	f000 f9fe 	bl	80014ec <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80010f0:	20ca      	movs	r0, #202	@ 0xca
 80010f2:	f000 f943 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80010f6:	20c3      	movs	r0, #195	@ 0xc3
 80010f8:	f000 f94d 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80010fc:	2008      	movs	r0, #8
 80010fe:	f000 f94a 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001102:	2050      	movs	r0, #80	@ 0x50
 8001104:	f000 f947 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001108:	20cf      	movs	r0, #207	@ 0xcf
 800110a:	f000 f937 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800110e:	2000      	movs	r0, #0
 8001110:	f000 f941 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001114:	20c1      	movs	r0, #193	@ 0xc1
 8001116:	f000 f93e 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800111a:	2030      	movs	r0, #48	@ 0x30
 800111c:	f000 f93b 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001120:	20ed      	movs	r0, #237	@ 0xed
 8001122:	f000 f92b 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001126:	2064      	movs	r0, #100	@ 0x64
 8001128:	f000 f935 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f932 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001132:	2012      	movs	r0, #18
 8001134:	f000 f92f 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001138:	2081      	movs	r0, #129	@ 0x81
 800113a:	f000 f92c 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800113e:	20e8      	movs	r0, #232	@ 0xe8
 8001140:	f000 f91c 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001144:	2085      	movs	r0, #133	@ 0x85
 8001146:	f000 f926 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f923 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001150:	2078      	movs	r0, #120	@ 0x78
 8001152:	f000 f920 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001156:	20cb      	movs	r0, #203	@ 0xcb
 8001158:	f000 f910 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800115c:	2039      	movs	r0, #57	@ 0x39
 800115e:	f000 f91a 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001162:	202c      	movs	r0, #44	@ 0x2c
 8001164:	f000 f917 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f000 f914 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800116e:	2034      	movs	r0, #52	@ 0x34
 8001170:	f000 f911 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001174:	2002      	movs	r0, #2
 8001176:	f000 f90e 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800117a:	20f7      	movs	r0, #247	@ 0xf7
 800117c:	f000 f8fe 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001180:	2020      	movs	r0, #32
 8001182:	f000 f908 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001186:	20ea      	movs	r0, #234	@ 0xea
 8001188:	f000 f8f8 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800118c:	2000      	movs	r0, #0
 800118e:	f000 f902 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f8ff 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001198:	20b1      	movs	r0, #177	@ 0xb1
 800119a:	f000 f8ef 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f8f9 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80011a4:	201b      	movs	r0, #27
 80011a6:	f000 f8f6 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80011aa:	20b6      	movs	r0, #182	@ 0xb6
 80011ac:	f000 f8e6 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80011b0:	200a      	movs	r0, #10
 80011b2:	f000 f8f0 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80011b6:	20a2      	movs	r0, #162	@ 0xa2
 80011b8:	f000 f8ed 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80011bc:	20c0      	movs	r0, #192	@ 0xc0
 80011be:	f000 f8dd 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80011c2:	2010      	movs	r0, #16
 80011c4:	f000 f8e7 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80011c8:	20c1      	movs	r0, #193	@ 0xc1
 80011ca:	f000 f8d7 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80011ce:	2010      	movs	r0, #16
 80011d0:	f000 f8e1 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80011d4:	20c5      	movs	r0, #197	@ 0xc5
 80011d6:	f000 f8d1 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80011da:	2045      	movs	r0, #69	@ 0x45
 80011dc:	f000 f8db 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80011e0:	2015      	movs	r0, #21
 80011e2:	f000 f8d8 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80011e6:	20c7      	movs	r0, #199	@ 0xc7
 80011e8:	f000 f8c8 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80011ec:	2090      	movs	r0, #144	@ 0x90
 80011ee:	f000 f8d2 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80011f2:	2036      	movs	r0, #54	@ 0x36
 80011f4:	f000 f8c2 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80011f8:	20c8      	movs	r0, #200	@ 0xc8
 80011fa:	f000 f8cc 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80011fe:	20f2      	movs	r0, #242	@ 0xf2
 8001200:	f000 f8bc 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f8c6 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800120a:	20b0      	movs	r0, #176	@ 0xb0
 800120c:	f000 f8b6 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001210:	20c2      	movs	r0, #194	@ 0xc2
 8001212:	f000 f8c0 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001216:	20b6      	movs	r0, #182	@ 0xb6
 8001218:	f000 f8b0 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800121c:	200a      	movs	r0, #10
 800121e:	f000 f8ba 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001222:	20a7      	movs	r0, #167	@ 0xa7
 8001224:	f000 f8b7 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001228:	2027      	movs	r0, #39	@ 0x27
 800122a:	f000 f8b4 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800122e:	2004      	movs	r0, #4
 8001230:	f000 f8b1 	bl	8001396 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001234:	202a      	movs	r0, #42	@ 0x2a
 8001236:	f000 f8a1 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f8ab 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001240:	2000      	movs	r0, #0
 8001242:	f000 f8a8 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f8a5 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800124c:	20ef      	movs	r0, #239	@ 0xef
 800124e:	f000 f8a2 	bl	8001396 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001252:	202b      	movs	r0, #43	@ 0x2b
 8001254:	f000 f892 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001258:	2000      	movs	r0, #0
 800125a:	f000 f89c 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f899 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001264:	2001      	movs	r0, #1
 8001266:	f000 f896 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800126a:	203f      	movs	r0, #63	@ 0x3f
 800126c:	f000 f893 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001270:	20f6      	movs	r0, #246	@ 0xf6
 8001272:	f000 f883 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001276:	2001      	movs	r0, #1
 8001278:	f000 f88d 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800127c:	2000      	movs	r0, #0
 800127e:	f000 f88a 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001282:	2006      	movs	r0, #6
 8001284:	f000 f887 	bl	8001396 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001288:	202c      	movs	r0, #44	@ 0x2c
 800128a:	f000 f877 	bl	800137c <ili9341_Write_Reg>
  LCD_Delay(200);
 800128e:	20c8      	movs	r0, #200	@ 0xc8
 8001290:	f000 f9e8 	bl	8001664 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001294:	2026      	movs	r0, #38	@ 0x26
 8001296:	f000 f871 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800129a:	2001      	movs	r0, #1
 800129c:	f000 f87b 	bl	8001396 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80012a0:	20e0      	movs	r0, #224	@ 0xe0
 80012a2:	f000 f86b 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80012a6:	200f      	movs	r0, #15
 80012a8:	f000 f875 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80012ac:	2029      	movs	r0, #41	@ 0x29
 80012ae:	f000 f872 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80012b2:	2024      	movs	r0, #36	@ 0x24
 80012b4:	f000 f86f 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80012b8:	200c      	movs	r0, #12
 80012ba:	f000 f86c 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80012be:	200e      	movs	r0, #14
 80012c0:	f000 f869 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80012c4:	2009      	movs	r0, #9
 80012c6:	f000 f866 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80012ca:	204e      	movs	r0, #78	@ 0x4e
 80012cc:	f000 f863 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80012d0:	2078      	movs	r0, #120	@ 0x78
 80012d2:	f000 f860 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80012d6:	203c      	movs	r0, #60	@ 0x3c
 80012d8:	f000 f85d 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80012dc:	2009      	movs	r0, #9
 80012de:	f000 f85a 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80012e2:	2013      	movs	r0, #19
 80012e4:	f000 f857 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80012e8:	2005      	movs	r0, #5
 80012ea:	f000 f854 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80012ee:	2017      	movs	r0, #23
 80012f0:	f000 f851 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80012f4:	2011      	movs	r0, #17
 80012f6:	f000 f84e 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f84b 	bl	8001396 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001300:	20e1      	movs	r0, #225	@ 0xe1
 8001302:	f000 f83b 	bl	800137c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f845 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800130c:	2016      	movs	r0, #22
 800130e:	f000 f842 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001312:	201b      	movs	r0, #27
 8001314:	f000 f83f 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001318:	2004      	movs	r0, #4
 800131a:	f000 f83c 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800131e:	2011      	movs	r0, #17
 8001320:	f000 f839 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001324:	2007      	movs	r0, #7
 8001326:	f000 f836 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800132a:	2031      	movs	r0, #49	@ 0x31
 800132c:	f000 f833 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001330:	2033      	movs	r0, #51	@ 0x33
 8001332:	f000 f830 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001336:	2042      	movs	r0, #66	@ 0x42
 8001338:	f000 f82d 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800133c:	2005      	movs	r0, #5
 800133e:	f000 f82a 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001342:	200c      	movs	r0, #12
 8001344:	f000 f827 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001348:	200a      	movs	r0, #10
 800134a:	f000 f824 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800134e:	2028      	movs	r0, #40	@ 0x28
 8001350:	f000 f821 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001354:	202f      	movs	r0, #47	@ 0x2f
 8001356:	f000 f81e 	bl	8001396 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800135a:	200f      	movs	r0, #15
 800135c:	f000 f81b 	bl	8001396 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001360:	2011      	movs	r0, #17
 8001362:	f000 f80b 	bl	800137c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001366:	20c8      	movs	r0, #200	@ 0xc8
 8001368:	f000 f97c 	bl	8001664 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800136c:	2029      	movs	r0, #41	@ 0x29
 800136e:	f000 f805 	bl	800137c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001372:	202c      	movs	r0, #44	@ 0x2c
 8001374:	f000 f802 	bl	800137c <ili9341_Write_Reg>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f949 	bl	8001620 <LCD_IO_WriteReg>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f91a 	bl	80015dc <LCD_IO_WriteData>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80013b4:	4819      	ldr	r0, [pc, #100]	@ (800141c <SPI_Init+0x6c>)
 80013b6:	f004 f85c 	bl	8005472 <HAL_SPI_GetState>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d12b      	bne.n	8001418 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <SPI_Init+0x6c>)
 80013c2:	4a17      	ldr	r2, [pc, #92]	@ (8001420 <SPI_Init+0x70>)
 80013c4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <SPI_Init+0x6c>)
 80013c8:	2218      	movs	r2, #24
 80013ca:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <SPI_Init+0x6c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <SPI_Init+0x6c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80013d8:	4b10      	ldr	r3, [pc, #64]	@ (800141c <SPI_Init+0x6c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <SPI_Init+0x6c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80013e4:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <SPI_Init+0x6c>)
 80013e6:	2207      	movs	r2, #7
 80013e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <SPI_Init+0x6c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <SPI_Init+0x6c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <SPI_Init+0x6c>)
 80013f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013fc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <SPI_Init+0x6c>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <SPI_Init+0x6c>)
 8001406:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800140a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800140c:	4803      	ldr	r0, [pc, #12]	@ (800141c <SPI_Init+0x6c>)
 800140e:	f000 f833 	bl	8001478 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001412:	4802      	ldr	r0, [pc, #8]	@ (800141c <SPI_Init+0x6c>)
 8001414:	f003 fe38 	bl	8005088 <HAL_SPI_Init>
  }
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2002598c 	.word	0x2002598c
 8001420:	40015000 	.word	0x40015000

08001424 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <SPI_Write+0x34>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1db9      	adds	r1, r7, #6
 8001438:	2201      	movs	r2, #1
 800143a:	4808      	ldr	r0, [pc, #32]	@ (800145c <SPI_Write+0x38>)
 800143c:	f003 fed5 	bl	80051ea <HAL_SPI_Transmit>
 8001440:	4603      	mov	r3, r0
 8001442:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800144a:	f000 f809 	bl	8001460 <SPI_Error>
  }
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000000c 	.word	0x2000000c
 800145c:	2002598c 	.word	0x2002598c

08001460 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001464:	4803      	ldr	r0, [pc, #12]	@ (8001474 <SPI_Error+0x14>)
 8001466:	f003 fe98 	bl	800519a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800146a:	f7ff ffa1 	bl	80013b0 <SPI_Init>
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2002598c 	.word	0x2002598c

08001478 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <SPI_MspInit+0x6c>)
 8001486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001488:	4a16      	ldr	r2, [pc, #88]	@ (80014e4 <SPI_MspInit+0x6c>)
 800148a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800148e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <SPI_MspInit+0x6c>)
 8001492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <SPI_MspInit+0x6c>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a4:	4a0f      	ldr	r2, [pc, #60]	@ (80014e4 <SPI_MspInit+0x6c>)
 80014a6:	f043 0320 	orr.w	r3, r3, #32
 80014aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ac:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <SPI_MspInit+0x6c>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80014b8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80014c6:	2301      	movs	r3, #1
 80014c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80014ca:	2305      	movs	r3, #5
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <SPI_MspInit+0x70>)
 80014d6:	f001 f9f7 	bl	80028c8 <HAL_GPIO_Init>
}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	@ 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40021400 	.word	0x40021400

080014ec <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80014f2:	4b36      	ldr	r3, [pc, #216]	@ (80015cc <LCD_IO_Init+0xe0>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d164      	bne.n	80015c4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80014fa:	4b34      	ldr	r3, [pc, #208]	@ (80015cc <LCD_IO_Init+0xe0>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	4b32      	ldr	r3, [pc, #200]	@ (80015d0 <LCD_IO_Init+0xe4>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	4a31      	ldr	r2, [pc, #196]	@ (80015d0 <LCD_IO_Init+0xe4>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001510:	4b2f      	ldr	r3, [pc, #188]	@ (80015d0 <LCD_IO_Init+0xe4>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800151c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001520:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	4619      	mov	r1, r3
 8001534:	4827      	ldr	r0, [pc, #156]	@ (80015d4 <LCD_IO_Init+0xe8>)
 8001536:	f001 f9c7 	bl	80028c8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <LCD_IO_Init+0xe4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a23      	ldr	r2, [pc, #140]	@ (80015d0 <LCD_IO_Init+0xe4>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <LCD_IO_Init+0xe4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	4819      	ldr	r0, [pc, #100]	@ (80015d4 <LCD_IO_Init+0xe8>)
 8001570:	f001 f9aa 	bl	80028c8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <LCD_IO_Init+0xe4>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157c:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <LCD_IO_Init+0xe4>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6313      	str	r3, [r2, #48]	@ 0x30
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <LCD_IO_Init+0xe4>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001590:	2304      	movs	r3, #4
 8001592:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <LCD_IO_Init+0xec>)
 80015a8:	f001 f98e 	bl	80028c8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80015ac:	2200      	movs	r2, #0
 80015ae:	2104      	movs	r1, #4
 80015b0:	4809      	ldr	r0, [pc, #36]	@ (80015d8 <LCD_IO_Init+0xec>)
 80015b2:	f001 fc41 	bl	8002e38 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80015b6:	2201      	movs	r2, #1
 80015b8:	2104      	movs	r1, #4
 80015ba:	4807      	ldr	r0, [pc, #28]	@ (80015d8 <LCD_IO_Init+0xec>)
 80015bc:	f001 fc3c 	bl	8002e38 <HAL_GPIO_WritePin>

    SPI_Init();
 80015c0:	f7ff fef6 	bl	80013b0 <SPI_Init>
  }
}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200259e4 	.word	0x200259e4
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	40020800 	.word	0x40020800

080015dc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ec:	480a      	ldr	r0, [pc, #40]	@ (8001618 <LCD_IO_WriteData+0x3c>)
 80015ee:	f001 fc23 	bl	8002e38 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80015f2:	2200      	movs	r2, #0
 80015f4:	2104      	movs	r1, #4
 80015f6:	4809      	ldr	r0, [pc, #36]	@ (800161c <LCD_IO_WriteData+0x40>)
 80015f8:	f001 fc1e 	bl	8002e38 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff10 	bl	8001424 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001604:	2201      	movs	r2, #1
 8001606:	2104      	movs	r1, #4
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <LCD_IO_WriteData+0x40>)
 800160a:	f001 fc15 	bl	8002e38 <HAL_GPIO_WritePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40020c00 	.word	0x40020c00
 800161c:	40020800 	.word	0x40020800

08001620 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001630:	480a      	ldr	r0, [pc, #40]	@ (800165c <LCD_IO_WriteReg+0x3c>)
 8001632:	f001 fc01 	bl	8002e38 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001636:	2200      	movs	r2, #0
 8001638:	2104      	movs	r1, #4
 800163a:	4809      	ldr	r0, [pc, #36]	@ (8001660 <LCD_IO_WriteReg+0x40>)
 800163c:	f001 fbfc 	bl	8002e38 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff feed 	bl	8001424 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800164a:	2201      	movs	r2, #1
 800164c:	2104      	movs	r1, #4
 800164e:	4804      	ldr	r0, [pc, #16]	@ (8001660 <LCD_IO_WriteReg+0x40>)
 8001650:	f001 fbf2 	bl	8002e38 <HAL_GPIO_WritePin>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40020800 	.word	0x40020800

08001664 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 ff7f 	bl	8002570 <HAL_Delay>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800167e:	f000 ff05 	bl	800248c <HAL_Init>

	// The default system configuration function is "suspect" so we need to make our own clock configuration
	// Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
	SystemClockOverride();
 8001682:	f000 f80b 	bl	800169c <SystemClockOverride>

	ApplicationInit(); // Initializes the LCD functionality
 8001686:	f7fe ff7b 	bl	8000580 <ApplicationInit>

	//LCD_Visual_Demo();

	HAL_Delay(5000);
 800168a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800168e:	f000 ff6f 	bl	8002570 <HAL_Delay>
	//while (1){
		//HAL_RNG_Init();
		//uint32_t generatedNum = HAL_RNG_GenerateRandomNumber();
	//}

	screen1();
 8001692:	f7ff fc63 	bl	8000f5c <screen1>

	// DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
	// Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
	//LCD_Touch_Polling_Demo(); // This function Will not return

	while (1){
 8001696:	bf00      	nop
 8001698:	e7fd      	b.n	8001696 <main+0x1c>
	...

0800169c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b092      	sub	sp, #72	@ 0x48
 80016a0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <SystemClockOverride+0x7c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001718 <SystemClockOverride+0x7c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <SystemClockOverride+0x7c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016be:	2301      	movs	r3, #1
 80016c0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016d2:	2308      	movs	r3, #8
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016d6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016dc:	2302      	movs	r3, #2
 80016de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016e0:	2307      	movs	r3, #7
 80016e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 fe8a 	bl	8004400 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80016ec:	230f      	movs	r3, #15
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2302      	movs	r3, #2
 80016f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001702:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001704:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001708:	2105      	movs	r1, #5
 800170a:	4618      	mov	r0, r3
 800170c:	f003 f8f0 	bl	80048f0 <HAL_RCC_ClockConfig>
}
 8001710:	bf00      	nop
 8001712:	3748      	adds	r7, #72	@ 0x48
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <Error_Handler+0x8>

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	4a0f      	ldr	r2, [pc, #60]	@ (8001774 <HAL_MspInit+0x4c>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800173c:	6453      	str	r3, [r2, #68]	@ 0x44
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_MspInit+0x4c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <HAL_MspInit+0x4c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	4a08      	ldr	r2, [pc, #32]	@ (8001774 <HAL_MspInit+0x4c>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	@ 0x40
 800175a:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001766:	2007      	movs	r0, #7
 8001768:	f001 f838 	bl	80027dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	@ 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a29      	ldr	r2, [pc, #164]	@ (800183c <HAL_I2C_MspInit+0xc4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d14b      	bne.n	8001832 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <HAL_I2C_MspInit+0xc8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a27      	ldr	r2, [pc, #156]	@ (8001840 <HAL_I2C_MspInit+0xc8>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <HAL_I2C_MspInit+0xc8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <HAL_I2C_MspInit+0xc8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a20      	ldr	r2, [pc, #128]	@ (8001840 <HAL_I2C_MspInit+0xc8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <HAL_I2C_MspInit+0xc8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80017d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d8:	2312      	movs	r3, #18
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017e4:	2304      	movs	r3, #4
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4815      	ldr	r0, [pc, #84]	@ (8001844 <HAL_I2C_MspInit+0xcc>)
 80017f0:	f001 f86a 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80017f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fa:	2312      	movs	r3, #18
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001806:	2304      	movs	r3, #4
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	480d      	ldr	r0, [pc, #52]	@ (8001848 <HAL_I2C_MspInit+0xd0>)
 8001812:	f001 f859 	bl	80028c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <HAL_I2C_MspInit+0xc8>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	4a08      	ldr	r2, [pc, #32]	@ (8001840 <HAL_I2C_MspInit+0xc8>)
 8001820:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001824:	6413      	str	r3, [r2, #64]	@ 0x40
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_I2C_MspInit+0xc8>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	@ 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40005c00 	.word	0x40005c00
 8001840:	40023800 	.word	0x40023800
 8001844:	40020800 	.word	0x40020800
 8001848:	40020000 	.word	0x40020000

0800184c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b09a      	sub	sp, #104	@ 0x68
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001868:	2230      	movs	r2, #48	@ 0x30
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f004 f8f5 	bl	8005a5c <memset>
  if(hltdc->Instance==LTDC)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a81      	ldr	r2, [pc, #516]	@ (8001a7c <HAL_LTDC_MspInit+0x230>)
 8001878:	4293      	cmp	r3, r2
 800187a:	f040 80fa 	bne.w	8001a72 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800187e:	2308      	movs	r3, #8
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001882:	2332      	movs	r3, #50	@ 0x32
 8001884:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001886:	2302      	movs	r3, #2
 8001888:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800188a:	2300      	movs	r3, #0
 800188c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fa38 	bl	8004d08 <HAL_RCCEx_PeriphCLKConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800189e:	f7ff ff3d 	bl	800171c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
 80018a6:	4b76      	ldr	r3, [pc, #472]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	4a75      	ldr	r2, [pc, #468]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 80018ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b2:	4b73      	ldr	r3, [pc, #460]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 80018c8:	f043 0320 	orr.w	r3, r3, #32
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0320 	and.w	r3, r3, #32
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	4b68      	ldr	r3, [pc, #416]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a67      	ldr	r2, [pc, #412]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b65      	ldr	r3, [pc, #404]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	4b61      	ldr	r3, [pc, #388]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a60      	ldr	r2, [pc, #384]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b5e      	ldr	r3, [pc, #376]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b5a      	ldr	r3, [pc, #360]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a59      	ldr	r2, [pc, #356]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 800191c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b57      	ldr	r3, [pc, #348]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b53      	ldr	r3, [pc, #332]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a52      	ldr	r2, [pc, #328]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b50      	ldr	r3, [pc, #320]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a4b      	ldr	r2, [pc, #300]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b49      	ldr	r3, [pc, #292]	@ (8001a80 <HAL_LTDC_MspInit+0x234>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800196a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001978:	230e      	movs	r3, #14
 800197a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001980:	4619      	mov	r1, r3
 8001982:	4840      	ldr	r0, [pc, #256]	@ (8001a84 <HAL_LTDC_MspInit+0x238>)
 8001984:	f000 ffa0 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001988:	f641 0358 	movw	r3, #6232	@ 0x1858
 800198c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800199a:	230e      	movs	r3, #14
 800199c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019a2:	4619      	mov	r1, r3
 80019a4:	4838      	ldr	r0, [pc, #224]	@ (8001a88 <HAL_LTDC_MspInit+0x23c>)
 80019a6:	f000 ff8f 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80019aa:	2303      	movs	r3, #3
 80019ac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80019ba:	2309      	movs	r3, #9
 80019bc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019c2:	4619      	mov	r1, r3
 80019c4:	4831      	ldr	r0, [pc, #196]	@ (8001a8c <HAL_LTDC_MspInit+0x240>)
 80019c6:	f000 ff7f 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80019ca:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80019ce:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019dc:	230e      	movs	r3, #14
 80019de:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019e4:	4619      	mov	r1, r3
 80019e6:	4829      	ldr	r0, [pc, #164]	@ (8001a8c <HAL_LTDC_MspInit+0x240>)
 80019e8:	f000 ff6e 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80019ec:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80019f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019fe:	230e      	movs	r3, #14
 8001a00:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a02:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a06:	4619      	mov	r1, r3
 8001a08:	4821      	ldr	r0, [pc, #132]	@ (8001a90 <HAL_LTDC_MspInit+0x244>)
 8001a0a:	f000 ff5d 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001a0e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001a12:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a20:	230e      	movs	r3, #14
 8001a22:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a28:	4619      	mov	r1, r3
 8001a2a:	481a      	ldr	r0, [pc, #104]	@ (8001a94 <HAL_LTDC_MspInit+0x248>)
 8001a2c:	f000 ff4c 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001a30:	2348      	movs	r3, #72	@ 0x48
 8001a32:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a40:	230e      	movs	r3, #14
 8001a42:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4813      	ldr	r0, [pc, #76]	@ (8001a98 <HAL_LTDC_MspInit+0x24c>)
 8001a4c:	f000 ff3c 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001a50:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a54:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a62:	2309      	movs	r3, #9
 8001a64:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4808      	ldr	r0, [pc, #32]	@ (8001a90 <HAL_LTDC_MspInit+0x244>)
 8001a6e:	f000 ff2b 	bl	80028c8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001a72:	bf00      	nop
 8001a74:	3768      	adds	r7, #104	@ 0x68
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40016800 	.word	0x40016800
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40021400 	.word	0x40021400
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40021800 	.word	0x40021800
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00

08001a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a19      	ldr	r2, [pc, #100]	@ (8001b20 <HAL_SPI_MspInit+0x84>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d12c      	bne.n	8001b18 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <HAL_SPI_MspInit+0x88>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	4a17      	ldr	r2, [pc, #92]	@ (8001b24 <HAL_SPI_MspInit+0x88>)
 8001ac8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ace:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <HAL_SPI_MspInit+0x88>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <HAL_SPI_MspInit+0x88>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a10      	ldr	r2, [pc, #64]	@ (8001b24 <HAL_SPI_MspInit+0x88>)
 8001ae4:	f043 0320 	orr.w	r3, r3, #32
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <HAL_SPI_MspInit+0x88>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001af6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001b08:	2305      	movs	r3, #5
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <HAL_SPI_MspInit+0x8c>)
 8001b14:	f000 fed8 	bl	80028c8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	@ 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40015000 	.word	0x40015000
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40021400 	.word	0x40021400

08001b2c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a08      	ldr	r2, [pc, #32]	@ (8001b5c <HAL_SPI_MspDeInit+0x30>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d10a      	bne.n	8001b54 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001b3e:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <HAL_SPI_MspDeInit+0x34>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	4a07      	ldr	r2, [pc, #28]	@ (8001b60 <HAL_SPI_MspDeInit+0x34>)
 8001b44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b48:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001b4a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <HAL_SPI_MspDeInit+0x38>)
 8001b50:	f001 f866 	bl	8002c20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40015000 	.word	0x40015000
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40021400 	.word	0x40021400

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <NMI_Handler+0x4>

08001b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <MemManage_Handler+0x4>

08001b80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <BusFault_Handler+0x4>

08001b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <UsageFault_Handler+0x4>

08001b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bbe:	f000 fcb7 	bl	8002530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_DAC_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4907      	ldr	r1, [pc, #28]	@ (8001c0c <__NVIC_EnableIRQ+0x38>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001c16:	f000 f9dd 	bl	8001fd4 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001c1a:	f000 f99d 	bl	8001f58 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001c1e:	2202      	movs	r2, #2
 8001c20:	2103      	movs	r1, #3
 8001c22:	2082      	movs	r0, #130	@ 0x82
 8001c24:	f000 fa2a 	bl	800207c <I2C3_Write>
    HAL_Delay(5);
 8001c28:	2005      	movs	r0, #5
 8001c2a:	f000 fca1 	bl	8002570 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2103      	movs	r1, #3
 8001c32:	2082      	movs	r0, #130	@ 0x82
 8001c34:	f000 fa22 	bl	800207c <I2C3_Write>
    HAL_Delay(2);
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f000 fc99 	bl	8002570 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001c3e:	1cba      	adds	r2, r7, #2
 8001c40:	2302      	movs	r3, #2
 8001c42:	2100      	movs	r1, #0
 8001c44:	2082      	movs	r0, #130	@ 0x82
 8001c46:	f000 fa69 	bl	800211c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	f640 0211 	movw	r2, #2065	@ 0x811
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d001      	beq.n	8001c6a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e095      	b.n	8001d96 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	2103      	movs	r1, #3
 8001c6e:	2082      	movs	r0, #130	@ 0x82
 8001c70:	f000 fa04 	bl	800207c <I2C3_Write>
    HAL_Delay(5);
 8001c74:	2005      	movs	r0, #5
 8001c76:	f000 fc7b 	bl	8002570 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	2082      	movs	r0, #130	@ 0x82
 8001c80:	f000 f9fc 	bl	800207c <I2C3_Write>
    HAL_Delay(2);
 8001c84:	2002      	movs	r0, #2
 8001c86:	f000 fc73 	bl	8002570 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001c8a:	2004      	movs	r0, #4
 8001c8c:	f000 f887 	bl	8001d9e <STMPE811_Read>
 8001c90:	4603      	mov	r3, r0
 8001c92:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8001c94:	797b      	ldrb	r3, [r7, #5]
 8001c96:	f023 0301 	bic.w	r3, r3, #1
 8001c9a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001c9c:	797b      	ldrb	r3, [r7, #5]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	2082      	movs	r0, #130	@ 0x82
 8001ca4:	f000 f9ea 	bl	800207c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001ca8:	2004      	movs	r0, #4
 8001caa:	f000 f878 	bl	8001d9e <STMPE811_Read>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8001cb2:	797b      	ldrb	r3, [r7, #5]
 8001cb4:	f023 0302 	bic.w	r3, r3, #2
 8001cb8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001cba:	797b      	ldrb	r3, [r7, #5]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	2082      	movs	r0, #130	@ 0x82
 8001cc2:	f000 f9db 	bl	800207c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8001cc6:	2249      	movs	r2, #73	@ 0x49
 8001cc8:	2120      	movs	r1, #32
 8001cca:	2082      	movs	r0, #130	@ 0x82
 8001ccc:	f000 f9d6 	bl	800207c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8001cd0:	2002      	movs	r0, #2
 8001cd2:	f000 fc4d 	bl	8002570 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2121      	movs	r1, #33	@ 0x21
 8001cda:	2082      	movs	r0, #130	@ 0x82
 8001cdc:	f000 f9ce 	bl	800207c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8001ce0:	2017      	movs	r0, #23
 8001ce2:	f000 f85c 	bl	8001d9e <STMPE811_Read>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8001cea:	797b      	ldrb	r3, [r7, #5]
 8001cec:	f043 031e 	orr.w	r3, r3, #30
 8001cf0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8001cf2:	797b      	ldrb	r3, [r7, #5]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2117      	movs	r1, #23
 8001cf8:	2082      	movs	r0, #130	@ 0x82
 8001cfa:	f000 f9bf 	bl	800207c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8001cfe:	229a      	movs	r2, #154	@ 0x9a
 8001d00:	2141      	movs	r1, #65	@ 0x41
 8001d02:	2082      	movs	r0, #130	@ 0x82
 8001d04:	f000 f9ba 	bl	800207c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	214a      	movs	r1, #74	@ 0x4a
 8001d0c:	2082      	movs	r0, #130	@ 0x82
 8001d0e:	f000 f9b5 	bl	800207c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001d12:	2201      	movs	r2, #1
 8001d14:	214b      	movs	r1, #75	@ 0x4b
 8001d16:	2082      	movs	r0, #130	@ 0x82
 8001d18:	f000 f9b0 	bl	800207c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	214b      	movs	r1, #75	@ 0x4b
 8001d20:	2082      	movs	r0, #130	@ 0x82
 8001d22:	f000 f9ab 	bl	800207c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8001d26:	2201      	movs	r2, #1
 8001d28:	2156      	movs	r1, #86	@ 0x56
 8001d2a:	2082      	movs	r0, #130	@ 0x82
 8001d2c:	f000 f9a6 	bl	800207c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8001d30:	2201      	movs	r2, #1
 8001d32:	2158      	movs	r1, #88	@ 0x58
 8001d34:	2082      	movs	r0, #130	@ 0x82
 8001d36:	f000 f9a1 	bl	800207c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	2140      	movs	r1, #64	@ 0x40
 8001d3e:	2082      	movs	r0, #130	@ 0x82
 8001d40:	f000 f99c 	bl	800207c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001d44:	22ff      	movs	r2, #255	@ 0xff
 8001d46:	210b      	movs	r1, #11
 8001d48:	2082      	movs	r0, #130	@ 0x82
 8001d4a:	f000 f997 	bl	800207c <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8001d4e:	f000 f8c1 	bl	8001ed4 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8001d52:	2009      	movs	r0, #9
 8001d54:	f000 f823 	bl	8001d9e <STMPE811_Read>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8001d5c:	797b      	ldrb	r3, [r7, #5]
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8001d64:	797b      	ldrb	r3, [r7, #5]
 8001d66:	461a      	mov	r2, r3
 8001d68:	2109      	movs	r1, #9
 8001d6a:	2082      	movs	r0, #130	@ 0x82
 8001d6c:	f000 f986 	bl	800207c <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8001d70:	200a      	movs	r0, #10
 8001d72:	f000 f814 	bl	8001d9e <STMPE811_Read>
 8001d76:	4603      	mov	r3, r0
 8001d78:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8001d7a:	797b      	ldrb	r3, [r7, #5]
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8001d82:	797b      	ldrb	r3, [r7, #5]
 8001d84:	461a      	mov	r2, r3
 8001d86:	210a      	movs	r1, #10
 8001d88:	2082      	movs	r0, #130	@ 0x82
 8001d8a:	f000 f977 	bl	800207c <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8001d8e:	20c8      	movs	r0, #200	@ 0xc8
 8001d90:	f000 fbee 	bl	8002570 <HAL_Delay>

    return STMPE811_State_Ok;
 8001d94:	2302      	movs	r3, #2

}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8001da8:	f107 020f 	add.w	r2, r7, #15
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	4619      	mov	r1, r3
 8001db0:	2082      	movs	r0, #130	@ 0x82
 8001db2:	f000 f98d 	bl	80020d0 <I2C3_Read>

    return readData;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	460a      	mov	r2, r1
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8001dd0:	79ba      	ldrb	r2, [r7, #6]
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	2082      	movs	r0, #130	@ 0x82
 8001dd8:	f000 f950 	bl	800207c <I2C3_Write>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	799b      	ldrb	r3, [r3, #6]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d117      	bne.n	8001e24 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f9b1 	bl	8002160 <TM_STMPE811_ReadX>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	885b      	ldrh	r3, [r3, #2]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fa04 	bl	800221c <TM_STMPE811_ReadY>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	805a      	strh	r2, [r3, #2]
 8001e22:	e048      	b.n	8001eb6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	799b      	ldrb	r3, [r3, #6]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d112      	bne.n	8001e52 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 f995 	bl	8002160 <TM_STMPE811_ReadX>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	885b      	ldrh	r3, [r3, #2]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f9ea 	bl	800221c <TM_STMPE811_ReadY>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	805a      	strh	r2, [r3, #2]
 8001e50:	e031      	b.n	8001eb6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	799b      	ldrb	r3, [r3, #6]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d115      	bne.n	8001e86 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	885b      	ldrh	r3, [r3, #2]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f97e 	bl	8002160 <TM_STMPE811_ReadX>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f9d3 	bl	800221c <TM_STMPE811_ReadY>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	e017      	b.n	8001eb6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	799b      	ldrb	r3, [r3, #6]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d113      	bne.n	8001eb6 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f964 	bl	8002160 <TM_STMPE811_ReadX>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f9b7 	bl	800221c <TM_STMPE811_ReadY>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	214b      	movs	r1, #75	@ 0x4b
 8001eba:	2082      	movs	r0, #130	@ 0x82
 8001ebc:	f000 f8de 	bl	800207c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	214b      	movs	r1, #75	@ 0x4b
 8001ec4:	2082      	movs	r0, #130	@ 0x82
 8001ec6:	f000 f8d9 	bl	800207c <I2C3_Write>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <enableInterruptSupportForTouch+0x5c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a13      	ldr	r2, [pc, #76]	@ (8001f30 <enableInterruptSupportForTouch+0x5c>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <enableInterruptSupportForTouch+0x5c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f08:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f0a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001f0e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f14:	2302      	movs	r3, #2
 8001f16:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <enableInterruptSupportForTouch+0x60>)
 8001f1e:	f000 fcd3 	bl	80028c8 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f22:	2028      	movs	r0, #40	@ 0x28
 8001f24:	f7ff fe56 	bl	8001bd4 <__NVIC_EnableIRQ>

}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020000 	.word	0x40020000

08001f38 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20025a3c 	.word	0x20025a3c

08001f58 <I2C3_Init>:

static void I2C3_Init()
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <I2C3_Init+0x6c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	4a17      	ldr	r2, [pc, #92]	@ (8001fc4 <I2C3_Init+0x6c>)
 8001f68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <I2C3_Init+0x6c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8001f7a:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <I2C3_Init+0x70>)
 8001f7c:	4a13      	ldr	r2, [pc, #76]	@ (8001fcc <I2C3_Init+0x74>)
 8001f7e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <I2C3_Init+0x70>)
 8001f82:	4a13      	ldr	r2, [pc, #76]	@ (8001fd0 <I2C3_Init+0x78>)
 8001f84:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <I2C3_Init+0x70>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <I2C3_Init+0x70>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f92:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <I2C3_Init+0x70>)
 8001f94:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f98:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <I2C3_Init+0x70>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <I2C3_Init+0x70>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8001fa6:	4808      	ldr	r0, [pc, #32]	@ (8001fc8 <I2C3_Init+0x70>)
 8001fa8:	f000 ff60 	bl	8002e6c <HAL_I2C_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8001fb6:	bf00      	nop
 8001fb8:	e7fd      	b.n	8001fb6 <I2C3_Init+0x5e>
    }
    return;
 8001fba:	bf00      	nop
}
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	200259e8 	.word	0x200259e8
 8001fcc:	40005c00 	.word	0x40005c00
 8001fd0:	000186a0 	.word	0x000186a0

08001fd4 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fda:	f107 030c 	add.w	r3, r7, #12
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <I2C3_MspInit+0x9c>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8002070 <I2C3_MspInit+0x9c>)
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <I2C3_MspInit+0x9c>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <I2C3_MspInit+0x9c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <I2C3_MspInit+0x9c>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <I2C3_MspInit+0x9c>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002026:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002028:	2312      	movs	r3, #18
 800202a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002034:	2304      	movs	r3, #4
 8002036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	4619      	mov	r1, r3
 800203e:	480d      	ldr	r0, [pc, #52]	@ (8002074 <I2C3_MspInit+0xa0>)
 8002040:	f000 fc42 	bl	80028c8 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002048:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800204a:	2312      	movs	r3, #18
 800204c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002056:	2304      	movs	r3, #4
 8002058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	@ (8002078 <I2C3_MspInit+0xa4>)
 8002062:	f000 fc31 	bl	80028c8 <HAL_GPIO_Init>
    
}
 8002066:	bf00      	nop
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40020800 	.word	0x40020800
 8002078:	40020000 	.word	0x40020000

0800207c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af04      	add	r7, sp, #16
 8002082:	4603      	mov	r3, r0
 8002084:	80fb      	strh	r3, [r7, #6]
 8002086:	460b      	mov	r3, r1
 8002088:	717b      	strb	r3, [r7, #5]
 800208a:	4613      	mov	r3, r2
 800208c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800208e:	793b      	ldrb	r3, [r7, #4]
 8002090:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002092:	797b      	ldrb	r3, [r7, #5]
 8002094:	b29a      	uxth	r2, r3
 8002096:	88f9      	ldrh	r1, [r7, #6]
 8002098:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <I2C3_Write+0x48>)
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	2301      	movs	r3, #1
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	f107 030f 	add.w	r3, r7, #15
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2301      	movs	r3, #1
 80020a8:	4807      	ldr	r0, [pc, #28]	@ (80020c8 <I2C3_Write+0x4c>)
 80020aa:	f001 f823 	bl	80030f4 <HAL_I2C_Mem_Write>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <I2C3_Write+0x50>)
 80020b4:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80020b6:	f7ff ff3f 	bl	8001f38 <verifyHAL_I2C_IS_OKAY>
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	0003d090 	.word	0x0003d090
 80020c8:	200259e8 	.word	0x200259e8
 80020cc:	20025a3c 	.word	0x20025a3c

080020d0 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	4603      	mov	r3, r0
 80020d8:	603a      	str	r2, [r7, #0]
 80020da:	71fb      	strb	r3, [r7, #7]
 80020dc:	460b      	mov	r3, r1
 80020de:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	b299      	uxth	r1, r3
 80020e4:	79bb      	ldrb	r3, [r7, #6]
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <I2C3_Read+0x40>)
 80020ea:	9302      	str	r3, [sp, #8]
 80020ec:	2301      	movs	r3, #1
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	4807      	ldr	r0, [pc, #28]	@ (8002114 <I2C3_Read+0x44>)
 80020f8:	f001 f8f6 	bl	80032e8 <HAL_I2C_Mem_Read>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <I2C3_Read+0x48>)
 8002102:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002104:	f7ff ff18 	bl	8001f38 <verifyHAL_I2C_IS_OKAY>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	0003d090 	.word	0x0003d090
 8002114:	200259e8 	.word	0x200259e8
 8002118:	20025a3c 	.word	0x20025a3c

0800211c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af04      	add	r7, sp, #16
 8002122:	603a      	str	r2, [r7, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
 800212a:	460b      	mov	r3, r1
 800212c:	71bb      	strb	r3, [r7, #6]
 800212e:	4613      	mov	r3, r2
 8002130:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	b299      	uxth	r1, r3
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <I2C3_MulitByteRead+0x3c>)
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	88bb      	ldrh	r3, [r7, #4]
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2301      	movs	r3, #1
 8002148:	4804      	ldr	r0, [pc, #16]	@ (800215c <I2C3_MulitByteRead+0x40>)
 800214a:	f001 f8cd 	bl	80032e8 <HAL_I2C_Mem_Read>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	0003d090 	.word	0x0003d090
 800215c:	200259e8 	.word	0x200259e8

08002160 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800216a:	204d      	movs	r0, #77	@ 0x4d
 800216c:	f7ff fe17 	bl	8001d9e <STMPE811_Read>
 8002170:	4603      	mov	r3, r0
 8002172:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002174:	204e      	movs	r0, #78	@ 0x4e
 8002176:	f7ff fe12 	bl	8001d9e <STMPE811_Read>
 800217a:	4603      	mov	r3, r0
 800217c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800217e:	7a7b      	ldrb	r3, [r7, #9]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b21a      	sxth	r2, r3
 8002184:	7a3b      	ldrb	r3, [r7, #8]
 8002186:	b21b      	sxth	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800218c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002190:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002194:	4293      	cmp	r3, r2
 8002196:	dc06      	bgt.n	80021a6 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002198:	89fb      	ldrh	r3, [r7, #14]
 800219a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800219e:	330c      	adds	r3, #12
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	81fb      	strh	r3, [r7, #14]
 80021a4:	e005      	b.n	80021b2 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80021ac:	3308      	adds	r3, #8
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80021b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021b6:	4a18      	ldr	r2, [pc, #96]	@ (8002218 <TM_STMPE811_ReadX+0xb8>)
 80021b8:	fb82 1203 	smull	r1, r2, r2, r3
 80021bc:	441a      	add	r2, r3
 80021be:	10d2      	asrs	r2, r2, #3
 80021c0:	17db      	asrs	r3, r3, #31
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80021c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021ca:	2bef      	cmp	r3, #239	@ 0xef
 80021cc:	dd02      	ble.n	80021d4 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80021ce:	23ef      	movs	r3, #239	@ 0xef
 80021d0:	81fb      	strh	r3, [r7, #14]
 80021d2:	e005      	b.n	80021e0 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80021d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da01      	bge.n	80021e0 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80021e0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	dd05      	ble.n	80021f6 <TM_STMPE811_ReadX+0x96>
 80021ea:	89fa      	ldrh	r2, [r7, #14]
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	e004      	b.n	8002200 <TM_STMPE811_ReadX+0xa0>
 80021f6:	89fb      	ldrh	r3, [r7, #14]
 80021f8:	88fa      	ldrh	r2, [r7, #6]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b21b      	sxth	r3, r3
 8002200:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002202:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002206:	2b04      	cmp	r3, #4
 8002208:	dd01      	ble.n	800220e <TM_STMPE811_ReadX+0xae>
        return val;
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	e000      	b.n	8002210 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800220e:	88fb      	ldrh	r3, [r7, #6]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	88888889 	.word	0x88888889

0800221c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002226:	204f      	movs	r0, #79	@ 0x4f
 8002228:	f7ff fdb9 	bl	8001d9e <STMPE811_Read>
 800222c:	4603      	mov	r3, r0
 800222e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002230:	2050      	movs	r0, #80	@ 0x50
 8002232:	f7ff fdb4 	bl	8001d9e <STMPE811_Read>
 8002236:	4603      	mov	r3, r0
 8002238:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800223a:	7a7b      	ldrb	r3, [r7, #9]
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	b21a      	sxth	r2, r3
 8002240:	7a3b      	ldrb	r3, [r7, #8]
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002248:	89fb      	ldrh	r3, [r7, #14]
 800224a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800224e:	b29b      	uxth	r3, r3
 8002250:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002252:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002256:	4a19      	ldr	r2, [pc, #100]	@ (80022bc <TM_STMPE811_ReadY+0xa0>)
 8002258:	fb82 1203 	smull	r1, r2, r2, r3
 800225c:	1052      	asrs	r2, r2, #1
 800225e:	17db      	asrs	r3, r3, #31
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002264:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002268:	2b00      	cmp	r3, #0
 800226a:	dc02      	bgt.n	8002272 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	81fb      	strh	r3, [r7, #14]
 8002270:	e007      	b.n	8002282 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002272:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002276:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800227a:	db02      	blt.n	8002282 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800227c:	f240 133f 	movw	r3, #319	@ 0x13f
 8002280:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002282:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	429a      	cmp	r2, r3
 800228a:	dd05      	ble.n	8002298 <TM_STMPE811_ReadY+0x7c>
 800228c:	89fa      	ldrh	r2, [r7, #14]
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	b29b      	uxth	r3, r3
 8002294:	b21b      	sxth	r3, r3
 8002296:	e004      	b.n	80022a2 <TM_STMPE811_ReadY+0x86>
 8002298:	89fb      	ldrh	r3, [r7, #14]
 800229a:	88fa      	ldrh	r2, [r7, #6]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	b29b      	uxth	r3, r3
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80022a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	dd01      	ble.n	80022b0 <TM_STMPE811_ReadY+0x94>
        return val;
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	e000      	b.n	80022b2 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80022b0:	88fb      	ldrh	r3, [r7, #6]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2e8ba2e9 	.word	0x2e8ba2e9

080022c0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e00a      	b.n	80022f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e0:	f3af 8000 	nop.w
 80022e4:	4601      	mov	r1, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	b2ca      	uxtb	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3301      	adds	r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	dbf0      	blt.n	80022e0 <_read+0x12>
  }

  return len;
 80022fe:	687b      	ldr	r3, [r7, #4]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e009      	b.n	800232e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	60ba      	str	r2, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	dbf1      	blt.n	800231a <_write+0x12>
  }
  return len;
 8002336:	687b      	ldr	r3, [r7, #4]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_close>:

int _close(int file)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002368:	605a      	str	r2, [r3, #4]
  return 0;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_isatty>:

int _isatty(int file)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002380:	2301      	movs	r3, #1
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	@ (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	@ (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	@ (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f003 fb8e 	bl	8005af8 <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	@ (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20030000 	.word	0x20030000
 8002408:	00000400 	.word	0x00000400
 800240c:	20025a40 	.word	0x20025a40
 8002410:	20025b98 	.word	0x20025b98

08002414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	@ (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002438:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002470 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800243c:	f7ff ffea 	bl	8002414 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002440:	480c      	ldr	r0, [pc, #48]	@ (8002474 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002442:	490d      	ldr	r1, [pc, #52]	@ (8002478 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002444:	4a0d      	ldr	r2, [pc, #52]	@ (800247c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002448:	e002      	b.n	8002450 <LoopCopyDataInit>

0800244a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800244c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244e:	3304      	adds	r3, #4

08002450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002454:	d3f9      	bcc.n	800244a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002456:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002458:	4c0a      	ldr	r4, [pc, #40]	@ (8002484 <LoopFillZerobss+0x22>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800245c:	e001      	b.n	8002462 <LoopFillZerobss>

0800245e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002460:	3204      	adds	r2, #4

08002462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002464:	d3fb      	bcc.n	800245e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002466:	f003 fb4d 	bl	8005b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246a:	f7ff f906 	bl	800167a <main>
  bx  lr    
 800246e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002470:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002478:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800247c:	080077fc 	.word	0x080077fc
  ldr r2, =_sbss
 8002480:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002484:	20025b94 	.word	0x20025b94

08002488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002488:	e7fe      	b.n	8002488 <ADC_IRQHandler>
	...

0800248c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002490:	4b0e      	ldr	r3, [pc, #56]	@ (80024cc <HAL_Init+0x40>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0d      	ldr	r2, [pc, #52]	@ (80024cc <HAL_Init+0x40>)
 8002496:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800249a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <HAL_Init+0x40>)
 80024a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a8:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a07      	ldr	r2, [pc, #28]	@ (80024cc <HAL_Init+0x40>)
 80024ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b4:	2003      	movs	r0, #3
 80024b6:	f000 f991 	bl	80027dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f000 f808 	bl	80024d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c0:	f7ff f932 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023c00 	.word	0x40023c00

080024d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d8:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <HAL_InitTick+0x54>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <HAL_InitTick+0x58>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f9b7 	bl	8002862 <HAL_SYSTICK_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00e      	b.n	800251c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b0f      	cmp	r3, #15
 8002502:	d80a      	bhi.n	800251a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002504:	2200      	movs	r2, #0
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800250c:	f000 f971 	bl	80027f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002510:	4a06      	ldr	r2, [pc, #24]	@ (800252c <HAL_InitTick+0x5c>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000010 	.word	0x20000010
 8002528:	20000018 	.word	0x20000018
 800252c:	20000014 	.word	0x20000014

08002530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002534:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_IncTick+0x20>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_IncTick+0x24>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4413      	add	r3, r2
 8002540:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <HAL_IncTick+0x24>)
 8002542:	6013      	str	r3, [r2, #0]
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000018 	.word	0x20000018
 8002554:	20025a44 	.word	0x20025a44

08002558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return uwTick;
 800255c:	4b03      	ldr	r3, [pc, #12]	@ (800256c <HAL_GetTick+0x14>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20025a44 	.word	0x20025a44

08002570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff ffee 	bl	8002558 <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002588:	d005      	beq.n	8002596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <HAL_Delay+0x44>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002596:	bf00      	nop
 8002598:	f7ff ffde 	bl	8002558 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d8f7      	bhi.n	8002598 <HAL_Delay+0x28>
  {
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000018 	.word	0x20000018

080025b8 <__NVIC_SetPriorityGrouping>:
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c8:	4b0c      	ldr	r3, [pc, #48]	@ (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025d4:	4013      	ands	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ea:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	60d3      	str	r3, [r2, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_GetPriorityGrouping>:
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002604:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <__NVIC_GetPriorityGrouping+0x18>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	f003 0307 	and.w	r3, r3, #7
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_EnableIRQ>:
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	2b00      	cmp	r3, #0
 800262c:	db0b      	blt.n	8002646 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4907      	ldr	r1, [pc, #28]	@ (8002654 <__NVIC_EnableIRQ+0x38>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2001      	movs	r0, #1
 800263e:	fa00 f202 	lsl.w	r2, r0, r2
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000e100 	.word	0xe000e100

08002658 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db12      	blt.n	8002690 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	490a      	ldr	r1, [pc, #40]	@ (800269c <__NVIC_DisableIRQ+0x44>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	3320      	adds	r3, #32
 8002680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002684:	f3bf 8f4f 	dsb	sy
}
 8002688:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800268a:	f3bf 8f6f 	isb	sy
}
 800268e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000e100 	.word	0xe000e100

080026a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0c      	blt.n	80026cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4907      	ldr	r1, [pc, #28]	@ (80026d8 <__NVIC_ClearPendingIRQ+0x38>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	3360      	adds	r3, #96	@ 0x60
 80026c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	@ (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	@ (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	@ 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	@ 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027a8:	d301      	bcc.n	80027ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ae:	4a0a      	ldr	r2, [pc, #40]	@ (80027d8 <SysTick_Config+0x40>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b6:	210f      	movs	r1, #15
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027bc:	f7ff ff8e 	bl	80026dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c0:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <SysTick_Config+0x40>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c6:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <SysTick_Config+0x40>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	e000e010 	.word	0xe000e010

080027dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff fee7 	bl	80025b8 <__NVIC_SetPriorityGrouping>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002804:	f7ff fefc 	bl	8002600 <__NVIC_GetPriorityGrouping>
 8002808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f7ff ff8e 	bl	8002730 <NVIC_EncodePriority>
 8002814:	4602      	mov	r2, r0
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff5d 	bl	80026dc <__NVIC_SetPriority>
}
 8002822:	bf00      	nop
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff feef 	bl	800261c <__NVIC_EnableIRQ>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff feff 	bl	8002658 <__NVIC_DisableIRQ>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff94 	bl	8002798 <SysTick_Config>
 8002870:	4603      	mov	r3, r0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff09 	bl	80026a0 <__NVIC_ClearPendingIRQ>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	2201      	movs	r2, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80028b2:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <HAL_EXTI_ClearPending+0x2c>)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6153      	str	r3, [r2, #20]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40013c00 	.word	0x40013c00

080028c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	@ 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	e177      	b.n	8002bd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e4:	2201      	movs	r2, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	f040 8166 	bne.w	8002bce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d005      	beq.n	800291a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002916:	2b02      	cmp	r3, #2
 8002918:	d130      	bne.n	800297c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 0201 	and.w	r2, r3, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b03      	cmp	r3, #3
 8002986:	d017      	beq.n	80029b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d123      	bne.n	8002a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	08da      	lsrs	r2, r3, #3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3208      	adds	r2, #8
 80029cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	220f      	movs	r2, #15
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	08da      	lsrs	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3208      	adds	r2, #8
 8002a06:	69b9      	ldr	r1, [r7, #24]
 8002a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0203 	and.w	r2, r3, #3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80c0 	beq.w	8002bce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b66      	ldr	r3, [pc, #408]	@ (8002bec <HAL_GPIO_Init+0x324>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	4a65      	ldr	r2, [pc, #404]	@ (8002bec <HAL_GPIO_Init+0x324>)
 8002a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a5e:	4b63      	ldr	r3, [pc, #396]	@ (8002bec <HAL_GPIO_Init+0x324>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6a:	4a61      	ldr	r2, [pc, #388]	@ (8002bf0 <HAL_GPIO_Init+0x328>)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a58      	ldr	r2, [pc, #352]	@ (8002bf4 <HAL_GPIO_Init+0x32c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d037      	beq.n	8002b06 <HAL_GPIO_Init+0x23e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a57      	ldr	r2, [pc, #348]	@ (8002bf8 <HAL_GPIO_Init+0x330>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d031      	beq.n	8002b02 <HAL_GPIO_Init+0x23a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a56      	ldr	r2, [pc, #344]	@ (8002bfc <HAL_GPIO_Init+0x334>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d02b      	beq.n	8002afe <HAL_GPIO_Init+0x236>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a55      	ldr	r2, [pc, #340]	@ (8002c00 <HAL_GPIO_Init+0x338>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d025      	beq.n	8002afa <HAL_GPIO_Init+0x232>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a54      	ldr	r2, [pc, #336]	@ (8002c04 <HAL_GPIO_Init+0x33c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01f      	beq.n	8002af6 <HAL_GPIO_Init+0x22e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a53      	ldr	r2, [pc, #332]	@ (8002c08 <HAL_GPIO_Init+0x340>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <HAL_GPIO_Init+0x22a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	@ (8002c0c <HAL_GPIO_Init+0x344>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0x226>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a51      	ldr	r2, [pc, #324]	@ (8002c10 <HAL_GPIO_Init+0x348>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00d      	beq.n	8002aea <HAL_GPIO_Init+0x222>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a50      	ldr	r2, [pc, #320]	@ (8002c14 <HAL_GPIO_Init+0x34c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <HAL_GPIO_Init+0x21e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4f      	ldr	r2, [pc, #316]	@ (8002c18 <HAL_GPIO_Init+0x350>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_GPIO_Init+0x21a>
 8002ade:	2309      	movs	r3, #9
 8002ae0:	e012      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002ae2:	230a      	movs	r3, #10
 8002ae4:	e010      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	e00e      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002aea:	2307      	movs	r3, #7
 8002aec:	e00c      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002aee:	2306      	movs	r3, #6
 8002af0:	e00a      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002af2:	2305      	movs	r3, #5
 8002af4:	e008      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002af6:	2304      	movs	r3, #4
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002afa:	2303      	movs	r3, #3
 8002afc:	e004      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e002      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002b06:	2300      	movs	r3, #0
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f002 0203 	and.w	r2, r2, #3
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	4093      	lsls	r3, r2
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b18:	4935      	ldr	r1, [pc, #212]	@ (8002bf0 <HAL_GPIO_Init+0x328>)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b26:	4b3d      	ldr	r3, [pc, #244]	@ (8002c1c <HAL_GPIO_Init+0x354>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b4a:	4a34      	ldr	r2, [pc, #208]	@ (8002c1c <HAL_GPIO_Init+0x354>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b50:	4b32      	ldr	r3, [pc, #200]	@ (8002c1c <HAL_GPIO_Init+0x354>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b74:	4a29      	ldr	r2, [pc, #164]	@ (8002c1c <HAL_GPIO_Init+0x354>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b7a:	4b28      	ldr	r3, [pc, #160]	@ (8002c1c <HAL_GPIO_Init+0x354>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c1c <HAL_GPIO_Init+0x354>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <HAL_GPIO_Init+0x354>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc8:	4a14      	ldr	r2, [pc, #80]	@ (8002c1c <HAL_GPIO_Init+0x354>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b0f      	cmp	r3, #15
 8002bd8:	f67f ae84 	bls.w	80028e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3724      	adds	r7, #36	@ 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020c00 	.word	0x40020c00
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40021400 	.word	0x40021400
 8002c0c:	40021800 	.word	0x40021800
 8002c10:	40021c00 	.word	0x40021c00
 8002c14:	40022000 	.word	0x40022000
 8002c18:	40022400 	.word	0x40022400
 8002c1c:	40013c00 	.word	0x40013c00

08002c20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	e0d9      	b.n	8002df0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	f040 80c9 	bne.w	8002dea <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c58:	4a6b      	ldr	r2, [pc, #428]	@ (8002e08 <HAL_GPIO_DeInit+0x1e8>)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3302      	adds	r3, #2
 8002c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c64:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	4013      	ands	r3, r2
 8002c78:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a63      	ldr	r2, [pc, #396]	@ (8002e0c <HAL_GPIO_DeInit+0x1ec>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d037      	beq.n	8002cf2 <HAL_GPIO_DeInit+0xd2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a62      	ldr	r2, [pc, #392]	@ (8002e10 <HAL_GPIO_DeInit+0x1f0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d031      	beq.n	8002cee <HAL_GPIO_DeInit+0xce>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a61      	ldr	r2, [pc, #388]	@ (8002e14 <HAL_GPIO_DeInit+0x1f4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d02b      	beq.n	8002cea <HAL_GPIO_DeInit+0xca>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a60      	ldr	r2, [pc, #384]	@ (8002e18 <HAL_GPIO_DeInit+0x1f8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d025      	beq.n	8002ce6 <HAL_GPIO_DeInit+0xc6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a5f      	ldr	r2, [pc, #380]	@ (8002e1c <HAL_GPIO_DeInit+0x1fc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01f      	beq.n	8002ce2 <HAL_GPIO_DeInit+0xc2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a5e      	ldr	r2, [pc, #376]	@ (8002e20 <HAL_GPIO_DeInit+0x200>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d019      	beq.n	8002cde <HAL_GPIO_DeInit+0xbe>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a5d      	ldr	r2, [pc, #372]	@ (8002e24 <HAL_GPIO_DeInit+0x204>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_DeInit+0xba>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a5c      	ldr	r2, [pc, #368]	@ (8002e28 <HAL_GPIO_DeInit+0x208>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_DeInit+0xb6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a5b      	ldr	r2, [pc, #364]	@ (8002e2c <HAL_GPIO_DeInit+0x20c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_DeInit+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8002e30 <HAL_GPIO_DeInit+0x210>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_DeInit+0xae>
 8002cca:	2309      	movs	r3, #9
 8002ccc:	e012      	b.n	8002cf4 <HAL_GPIO_DeInit+0xd4>
 8002cce:	230a      	movs	r3, #10
 8002cd0:	e010      	b.n	8002cf4 <HAL_GPIO_DeInit+0xd4>
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	e00e      	b.n	8002cf4 <HAL_GPIO_DeInit+0xd4>
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_DeInit+0xd4>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_DeInit+0xd4>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_DeInit+0xd4>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_DeInit+0xd4>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_DeInit+0xd4>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_DeInit+0xd4>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_DeInit+0xd4>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d132      	bne.n	8002d6a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002d04:	4b4b      	ldr	r3, [pc, #300]	@ (8002e34 <HAL_GPIO_DeInit+0x214>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	4949      	ldr	r1, [pc, #292]	@ (8002e34 <HAL_GPIO_DeInit+0x214>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002d12:	4b48      	ldr	r3, [pc, #288]	@ (8002e34 <HAL_GPIO_DeInit+0x214>)
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	4946      	ldr	r1, [pc, #280]	@ (8002e34 <HAL_GPIO_DeInit+0x214>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002d20:	4b44      	ldr	r3, [pc, #272]	@ (8002e34 <HAL_GPIO_DeInit+0x214>)
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	4942      	ldr	r1, [pc, #264]	@ (8002e34 <HAL_GPIO_DeInit+0x214>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002d2e:	4b41      	ldr	r3, [pc, #260]	@ (8002e34 <HAL_GPIO_DeInit+0x214>)
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	493f      	ldr	r1, [pc, #252]	@ (8002e34 <HAL_GPIO_DeInit+0x214>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e08 <HAL_GPIO_DeInit+0x1e8>)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	3302      	adds	r3, #2
 8002d54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	482a      	ldr	r0, [pc, #168]	@ (8002e08 <HAL_GPIO_DeInit+0x1e8>)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	400a      	ands	r2, r1
 8002d64:	3302      	adds	r3, #2
 8002d66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2103      	movs	r1, #3
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	08da      	lsrs	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3208      	adds	r2, #8
 8002d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	220f      	movs	r2, #15
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	08d2      	lsrs	r2, r2, #3
 8002da0:	4019      	ands	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3208      	adds	r2, #8
 8002da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2103      	movs	r1, #3
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	401a      	ands	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	2103      	movs	r1, #3
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	401a      	ands	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	3301      	adds	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b0f      	cmp	r3, #15
 8002df4:	f67f af22 	bls.w	8002c3c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40013800 	.word	0x40013800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40020400 	.word	0x40020400
 8002e14:	40020800 	.word	0x40020800
 8002e18:	40020c00 	.word	0x40020c00
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40021400 	.word	0x40021400
 8002e24:	40021800 	.word	0x40021800
 8002e28:	40021c00 	.word	0x40021c00
 8002e2c:	40022000 	.word	0x40022000
 8002e30:	40022400 	.word	0x40022400
 8002e34:	40013c00 	.word	0x40013c00

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
 8002e44:	4613      	mov	r3, r2
 8002e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e48:	787b      	ldrb	r3, [r7, #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e54:	e003      	b.n	8002e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	041a      	lsls	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	619a      	str	r2, [r3, #24]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e12b      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe fc70 	bl	8001778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	@ 0x24
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f001 ff06 	bl	8004ce0 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a81      	ldr	r2, [pc, #516]	@ (80030e0 <HAL_I2C_Init+0x274>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d807      	bhi.n	8002ef0 <HAL_I2C_Init+0x84>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a80      	ldr	r2, [pc, #512]	@ (80030e4 <HAL_I2C_Init+0x278>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	bf94      	ite	ls
 8002ee8:	2301      	movls	r3, #1
 8002eea:	2300      	movhi	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e006      	b.n	8002efe <HAL_I2C_Init+0x92>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a7d      	ldr	r2, [pc, #500]	@ (80030e8 <HAL_I2C_Init+0x27c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	bf94      	ite	ls
 8002ef8:	2301      	movls	r3, #1
 8002efa:	2300      	movhi	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0e7      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a78      	ldr	r2, [pc, #480]	@ (80030ec <HAL_I2C_Init+0x280>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9b      	lsrs	r3, r3, #18
 8002f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4a6a      	ldr	r2, [pc, #424]	@ (80030e0 <HAL_I2C_Init+0x274>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d802      	bhi.n	8002f40 <HAL_I2C_Init+0xd4>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	e009      	b.n	8002f54 <HAL_I2C_Init+0xe8>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	4a69      	ldr	r2, [pc, #420]	@ (80030f0 <HAL_I2C_Init+0x284>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	3301      	adds	r3, #1
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	495c      	ldr	r1, [pc, #368]	@ (80030e0 <HAL_I2C_Init+0x274>)
 8002f70:	428b      	cmp	r3, r1
 8002f72:	d819      	bhi.n	8002fa8 <HAL_I2C_Init+0x13c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e59      	subs	r1, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f88:	400b      	ands	r3, r1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_I2C_Init+0x138>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1e59      	subs	r1, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa2:	e051      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e04f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d111      	bne.n	8002fd4 <HAL_I2C_Init+0x168>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e012      	b.n	8002ffa <HAL_I2C_Init+0x18e>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x196>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e022      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10e      	bne.n	8003028 <HAL_I2C_Init+0x1bc>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1e58      	subs	r0, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	440b      	add	r3, r1
 8003018:	fbb0 f3f3 	udiv	r3, r0, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003026:	e00f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	0099      	lsls	r1, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	6809      	ldr	r1, [r1, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003076:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6911      	ldr	r1, [r2, #16]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	430b      	orrs	r3, r1
 800308a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	000186a0 	.word	0x000186a0
 80030e4:	001e847f 	.word	0x001e847f
 80030e8:	003d08ff 	.word	0x003d08ff
 80030ec:	431bde83 	.word	0x431bde83
 80030f0:	10624dd3 	.word	0x10624dd3

080030f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	4603      	mov	r3, r0
 8003104:	817b      	strh	r3, [r7, #10]
 8003106:	460b      	mov	r3, r1
 8003108:	813b      	strh	r3, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800310e:	f7ff fa23 	bl	8002558 <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b20      	cmp	r3, #32
 800311e:	f040 80d9 	bne.w	80032d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2319      	movs	r3, #25
 8003128:	2201      	movs	r2, #1
 800312a:	496d      	ldr	r1, [pc, #436]	@ (80032e0 <HAL_I2C_Mem_Write+0x1ec>)
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fc8b 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
 800313a:	e0cc      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_I2C_Mem_Write+0x56>
 8003146:	2302      	movs	r3, #2
 8003148:	e0c5      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d007      	beq.n	8003170 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800317e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2221      	movs	r2, #33	@ 0x21
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2240      	movs	r2, #64	@ 0x40
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a4d      	ldr	r2, [pc, #308]	@ (80032e4 <HAL_I2C_Mem_Write+0x1f0>)
 80031b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031b2:	88f8      	ldrh	r0, [r7, #6]
 80031b4:	893a      	ldrh	r2, [r7, #8]
 80031b6:	8979      	ldrh	r1, [r7, #10]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	4603      	mov	r3, r0
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fac2 	bl	800374c <I2C_RequestMemoryWrite>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d052      	beq.n	8003274 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e081      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fd50 	bl	8003c7c <I2C_WaitOnTXEFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d107      	bne.n	80031fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e06b      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	781a      	ldrb	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b04      	cmp	r3, #4
 800323a:	d11b      	bne.n	8003274 <HAL_I2C_Mem_Write+0x180>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d017      	beq.n	8003274 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1aa      	bne.n	80031d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fd43 	bl	8003d0c <I2C_WaitOnBTFFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	2b04      	cmp	r3, #4
 8003292:	d107      	bne.n	80032a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e016      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e000      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032d4:	2302      	movs	r3, #2
  }
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	00100002 	.word	0x00100002
 80032e4:	ffff0000 	.word	0xffff0000

080032e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	@ 0x30
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	817b      	strh	r3, [r7, #10]
 80032fa:	460b      	mov	r3, r1
 80032fc:	813b      	strh	r3, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003302:	f7ff f929 	bl	8002558 <HAL_GetTick>
 8003306:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b20      	cmp	r3, #32
 8003312:	f040 8214 	bne.w	800373e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2319      	movs	r3, #25
 800331c:	2201      	movs	r2, #1
 800331e:	497b      	ldr	r1, [pc, #492]	@ (800350c <HAL_I2C_Mem_Read+0x224>)
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fb91 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
 800332e:	e207      	b.n	8003740 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_I2C_Mem_Read+0x56>
 800333a:	2302      	movs	r3, #2
 800333c:	e200      	b.n	8003740 <HAL_I2C_Mem_Read+0x458>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d007      	beq.n	8003364 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003372:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2222      	movs	r2, #34	@ 0x22
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2240      	movs	r2, #64	@ 0x40
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800338e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003394:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003510 <HAL_I2C_Mem_Read+0x228>)
 80033a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033a6:	88f8      	ldrh	r0, [r7, #6]
 80033a8:	893a      	ldrh	r2, [r7, #8]
 80033aa:	8979      	ldrh	r1, [r7, #10]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	4603      	mov	r3, r0
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fa5e 	bl	8003878 <I2C_RequestMemoryRead>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e1bc      	b.n	8003740 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d113      	bne.n	80033f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	623b      	str	r3, [r7, #32]
 80033e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e190      	b.n	8003718 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d11b      	bne.n	8003436 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e170      	b.n	8003718 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343a:	2b02      	cmp	r3, #2
 800343c:	d11b      	bne.n	8003476 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800344c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800345c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	e150      	b.n	8003718 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800348c:	e144      	b.n	8003718 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003492:	2b03      	cmp	r3, #3
 8003494:	f200 80f1 	bhi.w	800367a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349c:	2b01      	cmp	r3, #1
 800349e:	d123      	bne.n	80034e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fc79 	bl	8003d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e145      	b.n	8003740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034e6:	e117      	b.n	8003718 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d14e      	bne.n	800358e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f6:	2200      	movs	r2, #0
 80034f8:	4906      	ldr	r1, [pc, #24]	@ (8003514 <HAL_I2C_Mem_Read+0x22c>)
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 faa4 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e11a      	b.n	8003740 <HAL_I2C_Mem_Read+0x458>
 800350a:	bf00      	nop
 800350c:	00100002 	.word	0x00100002
 8003510:	ffff0000 	.word	0xffff0000
 8003514:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800358c:	e0c4      	b.n	8003718 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003594:	2200      	movs	r2, #0
 8003596:	496c      	ldr	r1, [pc, #432]	@ (8003748 <HAL_I2C_Mem_Read+0x460>)
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fa55 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0cb      	b.n	8003740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f0:	2200      	movs	r2, #0
 80035f2:	4955      	ldr	r1, [pc, #340]	@ (8003748 <HAL_I2C_Mem_Read+0x460>)
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fa27 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e09d      	b.n	8003740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003678:	e04e      	b.n	8003718 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fb8c 	bl	8003d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e058      	b.n	8003740 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d124      	bne.n	8003718 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d107      	bne.n	80036e6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	f47f aeb6 	bne.w	800348e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e000      	b.n	8003740 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	3728      	adds	r7, #40	@ 0x28
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	00010004 	.word	0x00010004

0800374c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	4608      	mov	r0, r1
 8003756:	4611      	mov	r1, r2
 8003758:	461a      	mov	r2, r3
 800375a:	4603      	mov	r3, r0
 800375c:	817b      	strh	r3, [r7, #10]
 800375e:	460b      	mov	r3, r1
 8003760:	813b      	strh	r3, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003774:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	2200      	movs	r2, #0
 800377e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f960 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800379c:	d103      	bne.n	80037a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e05f      	b.n	800386a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	492d      	ldr	r1, [pc, #180]	@ (8003874 <I2C_RequestMemoryWrite+0x128>)
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f9bb 	bl	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e04c      	b.n	800386a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e8:	6a39      	ldr	r1, [r7, #32]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fa46 	bl	8003c7c <I2C_WaitOnTXEFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d107      	bne.n	800380e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e02b      	b.n	800386a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d105      	bne.n	8003824 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003818:	893b      	ldrh	r3, [r7, #8]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	611a      	str	r2, [r3, #16]
 8003822:	e021      	b.n	8003868 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003824:	893b      	ldrh	r3, [r7, #8]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	b29b      	uxth	r3, r3
 800382a:	b2da      	uxtb	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003834:	6a39      	ldr	r1, [r7, #32]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fa20 	bl	8003c7c <I2C_WaitOnTXEFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	2b04      	cmp	r3, #4
 8003848:	d107      	bne.n	800385a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003858:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e005      	b.n	800386a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800385e:	893b      	ldrh	r3, [r7, #8]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	00010002 	.word	0x00010002

08003878 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	4603      	mov	r3, r0
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	460b      	mov	r3, r1
 800388c:	813b      	strh	r3, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f8c2 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d8:	d103      	bne.n	80038e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0aa      	b.n	8003a3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038e6:	897b      	ldrh	r3, [r7, #10]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	6a3a      	ldr	r2, [r7, #32]
 80038fa:	4952      	ldr	r1, [pc, #328]	@ (8003a44 <I2C_RequestMemoryRead+0x1cc>)
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f91d 	bl	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e097      	b.n	8003a3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003924:	6a39      	ldr	r1, [r7, #32]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f9a8 	bl	8003c7c <I2C_WaitOnTXEFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	2b04      	cmp	r3, #4
 8003938:	d107      	bne.n	800394a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003948:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e076      	b.n	8003a3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d105      	bne.n	8003960 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003954:	893b      	ldrh	r3, [r7, #8]
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	611a      	str	r2, [r3, #16]
 800395e:	e021      	b.n	80039a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003960:	893b      	ldrh	r3, [r7, #8]
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	b29b      	uxth	r3, r3
 8003966:	b2da      	uxtb	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800396e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003970:	6a39      	ldr	r1, [r7, #32]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f982 	bl	8003c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00d      	beq.n	800399a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	2b04      	cmp	r3, #4
 8003984:	d107      	bne.n	8003996 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003994:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e050      	b.n	8003a3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800399a:	893b      	ldrh	r3, [r7, #8]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a6:	6a39      	ldr	r1, [r7, #32]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f967 	bl	8003c7c <I2C_WaitOnTXEFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00d      	beq.n	80039d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d107      	bne.n	80039cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e035      	b.n	8003a3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f82b 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00d      	beq.n	8003a14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a06:	d103      	bne.n	8003a10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e013      	b.n	8003a3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a14:	897b      	ldrh	r3, [r7, #10]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	6a3a      	ldr	r2, [r7, #32]
 8003a28:	4906      	ldr	r1, [pc, #24]	@ (8003a44 <I2C_RequestMemoryRead+0x1cc>)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f886 	bl	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	00010002 	.word	0x00010002

08003a48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a58:	e048      	b.n	8003aec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a60:	d044      	beq.n	8003aec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a62:	f7fe fd79 	bl	8002558 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d302      	bcc.n	8003a78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d139      	bne.n	8003aec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	0c1b      	lsrs	r3, r3, #16
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d10d      	bne.n	8003a9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	43da      	mvns	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	e00c      	b.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d116      	bne.n	8003aec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	f043 0220 	orr.w	r2, r3, #32
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e023      	b.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d10d      	bne.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	43da      	mvns	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4013      	ands	r3, r2
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	e00c      	b.n	8003b2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	43da      	mvns	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d093      	beq.n	8003a5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b4a:	e071      	b.n	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5a:	d123      	bne.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b90:	f043 0204 	orr.w	r2, r3, #4
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e067      	b.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003baa:	d041      	beq.n	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bac:	f7fe fcd4 	bl	8002558 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d136      	bne.n	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10c      	bne.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bf14      	ite	ne
 8003bde:	2301      	movne	r3, #1
 8003be0:	2300      	moveq	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	e00b      	b.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	43da      	mvns	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e021      	b.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	0c1b      	lsrs	r3, r3, #16
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10c      	bne.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	43da      	mvns	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf14      	ite	ne
 8003c4c:	2301      	movne	r3, #1
 8003c4e:	2300      	moveq	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e00b      	b.n	8003c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f47f af6d 	bne.w	8003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c88:	e034      	b.n	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f8e3 	bl	8003e56 <I2C_IsAcknowledgeFailed>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e034      	b.n	8003d04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ca0:	d028      	beq.n	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca2:	f7fe fc59 	bl	8002558 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d302      	bcc.n	8003cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d11d      	bne.n	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc2:	2b80      	cmp	r3, #128	@ 0x80
 8003cc4:	d016      	beq.n	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e007      	b.n	8003d04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfe:	2b80      	cmp	r3, #128	@ 0x80
 8003d00:	d1c3      	bne.n	8003c8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d18:	e034      	b.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f89b 	bl	8003e56 <I2C_IsAcknowledgeFailed>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e034      	b.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d30:	d028      	beq.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7fe fc11 	bl	8002558 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d11d      	bne.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d016      	beq.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e007      	b.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d1c3      	bne.n	8003d1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003da8:	e049      	b.n	8003e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d119      	bne.n	8003dec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0210 	mvn.w	r2, #16
 8003dc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e030      	b.n	8003e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dec:	f7fe fbb4 	bl	8002558 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d302      	bcc.n	8003e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d11d      	bne.n	8003e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0c:	2b40      	cmp	r3, #64	@ 0x40
 8003e0e:	d016      	beq.n	8003e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e007      	b.n	8003e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e48:	2b40      	cmp	r3, #64	@ 0x40
 8003e4a:	d1ae      	bne.n	8003daa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e6c:	d11b      	bne.n	8003ea6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f043 0204 	orr.w	r2, r3, #4
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0bf      	b.n	8004046 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd fcb6 	bl	800184c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003ef6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6999      	ldr	r1, [r3, #24]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f0c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6899      	ldr	r1, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4b4a      	ldr	r3, [pc, #296]	@ (8004050 <HAL_LTDC_Init+0x19c>)
 8003f28:	400b      	ands	r3, r1
 8003f2a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6899      	ldr	r1, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68d9      	ldr	r1, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b3e      	ldr	r3, [pc, #248]	@ (8004050 <HAL_LTDC_Init+0x19c>)
 8003f56:	400b      	ands	r3, r1
 8003f58:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	041b      	lsls	r3, r3, #16
 8003f60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68d9      	ldr	r1, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6919      	ldr	r1, [r3, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b33      	ldr	r3, [pc, #204]	@ (8004050 <HAL_LTDC_Init+0x19c>)
 8003f84:	400b      	ands	r3, r1
 8003f86:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6919      	ldr	r1, [r3, #16]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6959      	ldr	r1, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b27      	ldr	r3, [pc, #156]	@ (8004050 <HAL_LTDC_Init+0x19c>)
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6959      	ldr	r1, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0206 	orr.w	r2, r2, #6
 8004022:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	f000f800 	.word	0xf000f800

08004054 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004054:	b5b0      	push	{r4, r5, r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_LTDC_ConfigLayer+0x1a>
 800406a:	2302      	movs	r3, #2
 800406c:	e02c      	b.n	80040c8 <HAL_LTDC_ConfigLayer+0x74>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2134      	movs	r1, #52	@ 0x34
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4614      	mov	r4, r2
 8004092:	461d      	mov	r5, r3
 8004094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800409a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800409c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800409e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f811 	bl	80040d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bdb0      	pop	{r4, r5, r7, pc}

080040d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b089      	sub	sp, #36	@ 0x24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	0c1b      	lsrs	r3, r3, #16
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	4413      	add	r3, r2
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	01db      	lsls	r3, r3, #7
 80040fc:	4413      	add	r3, r2
 80040fe:	3384      	adds	r3, #132	@ 0x84
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	4611      	mov	r1, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	01d2      	lsls	r2, r2, #7
 800410c:	440a      	add	r2, r1
 800410e:	3284      	adds	r2, #132	@ 0x84
 8004110:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004114:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004126:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004128:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4619      	mov	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	01db      	lsls	r3, r3, #7
 8004134:	440b      	add	r3, r1
 8004136:	3384      	adds	r3, #132	@ 0x84
 8004138:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800413e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800414e:	4413      	add	r3, r2
 8004150:	041b      	lsls	r3, r3, #16
 8004152:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	01db      	lsls	r3, r3, #7
 800415e:	4413      	add	r3, r2
 8004160:	3384      	adds	r3, #132	@ 0x84
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	4611      	mov	r1, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	01d2      	lsls	r2, r2, #7
 800416e:	440a      	add	r2, r1
 8004170:	3284      	adds	r2, #132	@ 0x84
 8004172:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004176:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004186:	4413      	add	r3, r2
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4619      	mov	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	01db      	lsls	r3, r3, #7
 8004194:	440b      	add	r3, r1
 8004196:	3384      	adds	r3, #132	@ 0x84
 8004198:	4619      	mov	r1, r3
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	01db      	lsls	r3, r3, #7
 80041aa:	4413      	add	r3, r2
 80041ac:	3384      	adds	r3, #132	@ 0x84
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	4611      	mov	r1, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	01d2      	lsls	r2, r2, #7
 80041ba:	440a      	add	r2, r1
 80041bc:	3284      	adds	r2, #132	@ 0x84
 80041be:	f023 0307 	bic.w	r3, r3, #7
 80041c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	01db      	lsls	r3, r3, #7
 80041ce:	4413      	add	r3, r2
 80041d0:	3384      	adds	r3, #132	@ 0x84
 80041d2:	461a      	mov	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	061b      	lsls	r3, r3, #24
 80041f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	01db      	lsls	r3, r3, #7
 8004200:	4413      	add	r3, r2
 8004202:	3384      	adds	r3, #132	@ 0x84
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	01db      	lsls	r3, r3, #7
 8004210:	4413      	add	r3, r2
 8004212:	3384      	adds	r3, #132	@ 0x84
 8004214:	461a      	mov	r2, r3
 8004216:	2300      	movs	r3, #0
 8004218:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004220:	461a      	mov	r2, r3
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	431a      	orrs	r2, r3
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	01db      	lsls	r3, r3, #7
 8004234:	440b      	add	r3, r1
 8004236:	3384      	adds	r3, #132	@ 0x84
 8004238:	4619      	mov	r1, r3
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	01db      	lsls	r3, r3, #7
 800424a:	4413      	add	r3, r2
 800424c:	3384      	adds	r3, #132	@ 0x84
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	4611      	mov	r1, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	01d2      	lsls	r2, r2, #7
 800425a:	440a      	add	r2, r1
 800425c:	3284      	adds	r2, #132	@ 0x84
 800425e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004262:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	01db      	lsls	r3, r3, #7
 800426e:	4413      	add	r3, r2
 8004270:	3384      	adds	r3, #132	@ 0x84
 8004272:	461a      	mov	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	01db      	lsls	r3, r3, #7
 8004284:	4413      	add	r3, r2
 8004286:	3384      	adds	r3, #132	@ 0x84
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	4611      	mov	r1, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	01d2      	lsls	r2, r2, #7
 8004294:	440a      	add	r2, r1
 8004296:	3284      	adds	r2, #132	@ 0x84
 8004298:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800429c:	f023 0307 	bic.w	r3, r3, #7
 80042a0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	68f9      	ldr	r1, [r7, #12]
 80042ac:	6809      	ldr	r1, [r1, #0]
 80042ae:	4608      	mov	r0, r1
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	01c9      	lsls	r1, r1, #7
 80042b4:	4401      	add	r1, r0
 80042b6:	3184      	adds	r1, #132	@ 0x84
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	01db      	lsls	r3, r3, #7
 80042c6:	4413      	add	r3, r2
 80042c8:	3384      	adds	r3, #132	@ 0x84
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	01db      	lsls	r3, r3, #7
 80042d6:	4413      	add	r3, r2
 80042d8:	3384      	adds	r3, #132	@ 0x84
 80042da:	461a      	mov	r2, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	01db      	lsls	r3, r3, #7
 80042ea:	4413      	add	r3, r2
 80042ec:	3384      	adds	r3, #132	@ 0x84
 80042ee:	461a      	mov	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d102      	bne.n	8004304 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80042fe:	2304      	movs	r3, #4
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	e01b      	b.n	800433c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d102      	bne.n	8004312 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800430c:	2303      	movs	r3, #3
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	e014      	b.n	800433c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b04      	cmp	r3, #4
 8004318:	d00b      	beq.n	8004332 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800431e:	2b02      	cmp	r3, #2
 8004320:	d007      	beq.n	8004332 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004326:	2b03      	cmp	r3, #3
 8004328:	d003      	beq.n	8004332 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800432e:	2b07      	cmp	r3, #7
 8004330:	d102      	bne.n	8004338 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004332:	2302      	movs	r3, #2
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e001      	b.n	800433c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004338:	2301      	movs	r3, #1
 800433a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	01db      	lsls	r3, r3, #7
 8004346:	4413      	add	r3, r2
 8004348:	3384      	adds	r3, #132	@ 0x84
 800434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	4611      	mov	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	01d2      	lsls	r2, r2, #7
 8004356:	440a      	add	r2, r1
 8004358:	3284      	adds	r2, #132	@ 0x84
 800435a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800435e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	1acb      	subs	r3, r1, r3
 8004376:	69f9      	ldr	r1, [r7, #28]
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	6809      	ldr	r1, [r1, #0]
 8004382:	4608      	mov	r0, r1
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	01c9      	lsls	r1, r1, #7
 8004388:	4401      	add	r1, r0
 800438a:	3184      	adds	r1, #132	@ 0x84
 800438c:	4313      	orrs	r3, r2
 800438e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	01db      	lsls	r3, r3, #7
 800439a:	4413      	add	r3, r2
 800439c:	3384      	adds	r3, #132	@ 0x84
 800439e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	4611      	mov	r1, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	01d2      	lsls	r2, r2, #7
 80043aa:	440a      	add	r2, r1
 80043ac:	3284      	adds	r2, #132	@ 0x84
 80043ae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80043b2:	f023 0307 	bic.w	r3, r3, #7
 80043b6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	01db      	lsls	r3, r3, #7
 80043c2:	4413      	add	r3, r2
 80043c4:	3384      	adds	r3, #132	@ 0x84
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	01db      	lsls	r3, r3, #7
 80043d8:	4413      	add	r3, r2
 80043da:	3384      	adds	r3, #132	@ 0x84
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	4611      	mov	r1, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	01d2      	lsls	r2, r2, #7
 80043e8:	440a      	add	r2, r1
 80043ea:	3284      	adds	r2, #132	@ 0x84
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	6013      	str	r3, [r2, #0]
}
 80043f2:	bf00      	nop
 80043f4:	3724      	adds	r7, #36	@ 0x24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e267      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d075      	beq.n	800450a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800441e:	4b88      	ldr	r3, [pc, #544]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b04      	cmp	r3, #4
 8004428:	d00c      	beq.n	8004444 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442a:	4b85      	ldr	r3, [pc, #532]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004432:	2b08      	cmp	r3, #8
 8004434:	d112      	bne.n	800445c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004436:	4b82      	ldr	r3, [pc, #520]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800443e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004442:	d10b      	bne.n	800445c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004444:	4b7e      	ldr	r3, [pc, #504]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d05b      	beq.n	8004508 <HAL_RCC_OscConfig+0x108>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d157      	bne.n	8004508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e242      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004464:	d106      	bne.n	8004474 <HAL_RCC_OscConfig+0x74>
 8004466:	4b76      	ldr	r3, [pc, #472]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a75      	ldr	r2, [pc, #468]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e01d      	b.n	80044b0 <HAL_RCC_OscConfig+0xb0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x98>
 800447e:	4b70      	ldr	r3, [pc, #448]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6f      	ldr	r2, [pc, #444]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b6d      	ldr	r3, [pc, #436]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a6c      	ldr	r2, [pc, #432]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e00b      	b.n	80044b0 <HAL_RCC_OscConfig+0xb0>
 8004498:	4b69      	ldr	r3, [pc, #420]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a68      	ldr	r2, [pc, #416]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 800449e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b66      	ldr	r3, [pc, #408]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a65      	ldr	r2, [pc, #404]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 80044aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fe f84e 	bl	8002558 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c0:	f7fe f84a 	bl	8002558 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b64      	cmp	r3, #100	@ 0x64
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e207      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0xc0>
 80044de:	e014      	b.n	800450a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fe f83a 	bl	8002558 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e8:	f7fe f836 	bl	8002558 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	@ 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e1f3      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fa:	4b51      	ldr	r3, [pc, #324]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0xe8>
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d063      	beq.n	80045de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004516:	4b4a      	ldr	r3, [pc, #296]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00b      	beq.n	800453a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004522:	4b47      	ldr	r3, [pc, #284]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800452a:	2b08      	cmp	r3, #8
 800452c:	d11c      	bne.n	8004568 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452e:	4b44      	ldr	r3, [pc, #272]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d116      	bne.n	8004568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453a:	4b41      	ldr	r3, [pc, #260]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_RCC_OscConfig+0x152>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d001      	beq.n	8004552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e1c7      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004552:	4b3b      	ldr	r3, [pc, #236]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4937      	ldr	r1, [pc, #220]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	e03a      	b.n	80045de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d020      	beq.n	80045b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004570:	4b34      	ldr	r3, [pc, #208]	@ (8004644 <HAL_RCC_OscConfig+0x244>)
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fd ffef 	bl	8002558 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457e:	f7fd ffeb 	bl	8002558 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e1a8      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004590:	4b2b      	ldr	r3, [pc, #172]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459c:	4b28      	ldr	r3, [pc, #160]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4925      	ldr	r1, [pc, #148]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]
 80045b0:	e015      	b.n	80045de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b2:	4b24      	ldr	r3, [pc, #144]	@ (8004644 <HAL_RCC_OscConfig+0x244>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fd ffce 	bl	8002558 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c0:	f7fd ffca 	bl	8002558 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e187      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d036      	beq.n	8004658 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d016      	beq.n	8004620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f2:	4b15      	ldr	r3, [pc, #84]	@ (8004648 <HAL_RCC_OscConfig+0x248>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fd ffae 	bl	8002558 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004600:	f7fd ffaa 	bl	8002558 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e167      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004612:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <HAL_RCC_OscConfig+0x240>)
 8004614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x200>
 800461e:	e01b      	b.n	8004658 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004620:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <HAL_RCC_OscConfig+0x248>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004626:	f7fd ff97 	bl	8002558 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800462c:	e00e      	b.n	800464c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462e:	f7fd ff93 	bl	8002558 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d907      	bls.n	800464c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e150      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
 8004640:	40023800 	.word	0x40023800
 8004644:	42470000 	.word	0x42470000
 8004648:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800464c:	4b88      	ldr	r3, [pc, #544]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 800464e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1ea      	bne.n	800462e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8097 	beq.w	8004794 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800466a:	4b81      	ldr	r3, [pc, #516]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10f      	bne.n	8004696 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	4b7d      	ldr	r3, [pc, #500]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	4a7c      	ldr	r2, [pc, #496]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 8004680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004684:	6413      	str	r3, [r2, #64]	@ 0x40
 8004686:	4b7a      	ldr	r3, [pc, #488]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004692:	2301      	movs	r3, #1
 8004694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004696:	4b77      	ldr	r3, [pc, #476]	@ (8004874 <HAL_RCC_OscConfig+0x474>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d118      	bne.n	80046d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046a2:	4b74      	ldr	r3, [pc, #464]	@ (8004874 <HAL_RCC_OscConfig+0x474>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a73      	ldr	r2, [pc, #460]	@ (8004874 <HAL_RCC_OscConfig+0x474>)
 80046a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ae:	f7fd ff53 	bl	8002558 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b6:	f7fd ff4f 	bl	8002558 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e10c      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004874 <HAL_RCC_OscConfig+0x474>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d106      	bne.n	80046ea <HAL_RCC_OscConfig+0x2ea>
 80046dc:	4b64      	ldr	r3, [pc, #400]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 80046de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e0:	4a63      	ldr	r2, [pc, #396]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046e8:	e01c      	b.n	8004724 <HAL_RCC_OscConfig+0x324>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d10c      	bne.n	800470c <HAL_RCC_OscConfig+0x30c>
 80046f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f6:	4a5e      	ldr	r2, [pc, #376]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 80046f8:	f043 0304 	orr.w	r3, r3, #4
 80046fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80046fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004702:	4a5b      	ldr	r2, [pc, #364]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	6713      	str	r3, [r2, #112]	@ 0x70
 800470a:	e00b      	b.n	8004724 <HAL_RCC_OscConfig+0x324>
 800470c:	4b58      	ldr	r3, [pc, #352]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004710:	4a57      	ldr	r2, [pc, #348]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	6713      	str	r3, [r2, #112]	@ 0x70
 8004718:	4b55      	ldr	r3, [pc, #340]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471c:	4a54      	ldr	r2, [pc, #336]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 800471e:	f023 0304 	bic.w	r3, r3, #4
 8004722:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d015      	beq.n	8004758 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472c:	f7fd ff14 	bl	8002558 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004732:	e00a      	b.n	800474a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004734:	f7fd ff10 	bl	8002558 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e0cb      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474a:	4b49      	ldr	r3, [pc, #292]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0ee      	beq.n	8004734 <HAL_RCC_OscConfig+0x334>
 8004756:	e014      	b.n	8004782 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004758:	f7fd fefe 	bl	8002558 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475e:	e00a      	b.n	8004776 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004760:	f7fd fefa 	bl	8002558 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e0b5      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004776:	4b3e      	ldr	r3, [pc, #248]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1ee      	bne.n	8004760 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d105      	bne.n	8004794 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004788:	4b39      	ldr	r3, [pc, #228]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 800478a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478c:	4a38      	ldr	r2, [pc, #224]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 800478e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004792:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80a1 	beq.w	80048e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800479e:	4b34      	ldr	r3, [pc, #208]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d05c      	beq.n	8004864 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d141      	bne.n	8004836 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b2:	4b31      	ldr	r3, [pc, #196]	@ (8004878 <HAL_RCC_OscConfig+0x478>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fd fece 	bl	8002558 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fd feca 	bl	8002558 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e087      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d2:	4b27      	ldr	r3, [pc, #156]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	019b      	lsls	r3, r3, #6
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	3b01      	subs	r3, #1
 80047f8:	041b      	lsls	r3, r3, #16
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	491b      	ldr	r1, [pc, #108]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004808:	4b1b      	ldr	r3, [pc, #108]	@ (8004878 <HAL_RCC_OscConfig+0x478>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480e:	f7fd fea3 	bl	8002558 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004816:	f7fd fe9f 	bl	8002558 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e05c      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004828:	4b11      	ldr	r3, [pc, #68]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x416>
 8004834:	e054      	b.n	80048e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004836:	4b10      	ldr	r3, [pc, #64]	@ (8004878 <HAL_RCC_OscConfig+0x478>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483c:	f7fd fe8c 	bl	8002558 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004844:	f7fd fe88 	bl	8002558 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e045      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <HAL_RCC_OscConfig+0x470>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x444>
 8004862:	e03d      	b.n	80048e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e038      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
 8004870:	40023800 	.word	0x40023800
 8004874:	40007000 	.word	0x40007000
 8004878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800487c:	4b1b      	ldr	r3, [pc, #108]	@ (80048ec <HAL_RCC_OscConfig+0x4ec>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d028      	beq.n	80048dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d121      	bne.n	80048dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d11a      	bne.n	80048dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d111      	bne.n	80048dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	3b01      	subs	r3, #1
 80048c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d107      	bne.n	80048dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800

080048f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e0cc      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004904:	4b68      	ldr	r3, [pc, #416]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d90c      	bls.n	800492c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004912:	4b65      	ldr	r3, [pc, #404]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b63      	ldr	r3, [pc, #396]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0b8      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d020      	beq.n	800497a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004944:	4b59      	ldr	r3, [pc, #356]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a58      	ldr	r2, [pc, #352]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800494e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800495c:	4b53      	ldr	r3, [pc, #332]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4a52      	ldr	r2, [pc, #328]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004968:	4b50      	ldr	r3, [pc, #320]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	494d      	ldr	r1, [pc, #308]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	4313      	orrs	r3, r2
 8004978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d044      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d107      	bne.n	800499e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	4b47      	ldr	r3, [pc, #284]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d119      	bne.n	80049ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e07f      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d003      	beq.n	80049ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d107      	bne.n	80049be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ae:	4b3f      	ldr	r3, [pc, #252]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e06f      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049be:	4b3b      	ldr	r3, [pc, #236]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e067      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ce:	4b37      	ldr	r3, [pc, #220]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f023 0203 	bic.w	r2, r3, #3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4934      	ldr	r1, [pc, #208]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049e0:	f7fd fdba 	bl	8002558 <HAL_GetTick>
 80049e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e6:	e00a      	b.n	80049fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e8:	f7fd fdb6 	bl	8002558 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e04f      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fe:	4b2b      	ldr	r3, [pc, #172]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 020c 	and.w	r2, r3, #12
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d1eb      	bne.n	80049e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a10:	4b25      	ldr	r3, [pc, #148]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d20c      	bcs.n	8004a38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1e:	4b22      	ldr	r3, [pc, #136]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b20      	ldr	r3, [pc, #128]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e032      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a44:	4b19      	ldr	r3, [pc, #100]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4916      	ldr	r1, [pc, #88]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a62:	4b12      	ldr	r3, [pc, #72]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	490e      	ldr	r1, [pc, #56]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a76:	f000 f821 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	490a      	ldr	r1, [pc, #40]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a88:	5ccb      	ldrb	r3, [r1, r3]
 8004a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8e:	4a09      	ldr	r2, [pc, #36]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a92:	4b09      	ldr	r3, [pc, #36]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fd fd1a 	bl	80024d0 <HAL_InitTick>

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40023c00 	.word	0x40023c00
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	080077a0 	.word	0x080077a0
 8004ab4:	20000010 	.word	0x20000010
 8004ab8:	20000014 	.word	0x20000014

08004abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac0:	b094      	sub	sp, #80	@ 0x50
 8004ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ad4:	4b79      	ldr	r3, [pc, #484]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 030c 	and.w	r3, r3, #12
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d00d      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0x40>
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	f200 80e1 	bhi.w	8004ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x34>
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d003      	beq.n	8004af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aee:	e0db      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004af0:	4b73      	ldr	r3, [pc, #460]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004af2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004af4:	e0db      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004af6:	4b73      	ldr	r3, [pc, #460]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004afa:	e0d8      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004afc:	4b6f      	ldr	r3, [pc, #444]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b06:	4b6d      	ldr	r3, [pc, #436]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d063      	beq.n	8004bda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b12:	4b6a      	ldr	r3, [pc, #424]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	099b      	lsrs	r3, r3, #6
 8004b18:	2200      	movs	r2, #0
 8004b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b26:	2300      	movs	r3, #0
 8004b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b2e:	4622      	mov	r2, r4
 8004b30:	462b      	mov	r3, r5
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f04f 0100 	mov.w	r1, #0
 8004b3a:	0159      	lsls	r1, r3, #5
 8004b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b40:	0150      	lsls	r0, r2, #5
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4621      	mov	r1, r4
 8004b48:	1a51      	subs	r1, r2, r1
 8004b4a:	6139      	str	r1, [r7, #16]
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b60:	4659      	mov	r1, fp
 8004b62:	018b      	lsls	r3, r1, #6
 8004b64:	4651      	mov	r1, sl
 8004b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b6a:	4651      	mov	r1, sl
 8004b6c:	018a      	lsls	r2, r1, #6
 8004b6e:	4651      	mov	r1, sl
 8004b70:	ebb2 0801 	subs.w	r8, r2, r1
 8004b74:	4659      	mov	r1, fp
 8004b76:	eb63 0901 	sbc.w	r9, r3, r1
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b8e:	4690      	mov	r8, r2
 8004b90:	4699      	mov	r9, r3
 8004b92:	4623      	mov	r3, r4
 8004b94:	eb18 0303 	adds.w	r3, r8, r3
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	462b      	mov	r3, r5
 8004b9c:	eb49 0303 	adc.w	r3, r9, r3
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bae:	4629      	mov	r1, r5
 8004bb0:	024b      	lsls	r3, r1, #9
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bb8:	4621      	mov	r1, r4
 8004bba:	024a      	lsls	r2, r1, #9
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bcc:	f7fb fb60 	bl	8000290 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd8:	e058      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bda:	4b38      	ldr	r3, [pc, #224]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	099b      	lsrs	r3, r3, #6
 8004be0:	2200      	movs	r2, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	4611      	mov	r1, r2
 8004be6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bea:	623b      	str	r3, [r7, #32]
 8004bec:	2300      	movs	r3, #0
 8004bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	f04f 0000 	mov.w	r0, #0
 8004bfc:	f04f 0100 	mov.w	r1, #0
 8004c00:	0159      	lsls	r1, r3, #5
 8004c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c06:	0150      	lsls	r0, r2, #5
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c12:	4649      	mov	r1, r9
 8004c14:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c2c:	ebb2 040a 	subs.w	r4, r2, sl
 8004c30:	eb63 050b 	sbc.w	r5, r3, fp
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	00eb      	lsls	r3, r5, #3
 8004c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c42:	00e2      	lsls	r2, r4, #3
 8004c44:	4614      	mov	r4, r2
 8004c46:	461d      	mov	r5, r3
 8004c48:	4643      	mov	r3, r8
 8004c4a:	18e3      	adds	r3, r4, r3
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	464b      	mov	r3, r9
 8004c50:	eb45 0303 	adc.w	r3, r5, r3
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c62:	4629      	mov	r1, r5
 8004c64:	028b      	lsls	r3, r1, #10
 8004c66:	4621      	mov	r1, r4
 8004c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	028a      	lsls	r2, r1, #10
 8004c70:	4610      	mov	r0, r2
 8004c72:	4619      	mov	r1, r3
 8004c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c76:	2200      	movs	r2, #0
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	61fa      	str	r2, [r7, #28]
 8004c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c80:	f7fb fb06 	bl	8000290 <__aeabi_uldivmod>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4613      	mov	r3, r2
 8004c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	0c1b      	lsrs	r3, r3, #16
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	3301      	adds	r3, #1
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ca6:	e002      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004caa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3750      	adds	r7, #80	@ 0x50
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cba:	bf00      	nop
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	00f42400 	.word	0x00f42400
 8004cc4:	007a1200 	.word	0x007a1200

08004cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ccc:	4b03      	ldr	r3, [pc, #12]	@ (8004cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cce:	681b      	ldr	r3, [r3, #0]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000010 	.word	0x20000010

08004ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ce4:	f7ff fff0 	bl	8004cc8 <HAL_RCC_GetHCLKFreq>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	4b05      	ldr	r3, [pc, #20]	@ (8004d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	0a9b      	lsrs	r3, r3, #10
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	4903      	ldr	r1, [pc, #12]	@ (8004d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf6:	5ccb      	ldrb	r3, [r1, r3]
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40023800 	.word	0x40023800
 8004d04:	080077b0 	.word	0x080077b0

08004d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10b      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d075      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d3c:	4b91      	ldr	r3, [pc, #580]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d42:	f7fd fc09 	bl	8002558 <HAL_GetTick>
 8004d46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d4a:	f7fd fc05 	bl	8002558 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e189      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d5c:	4b8a      	ldr	r3, [pc, #552]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f0      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	019a      	lsls	r2, r3, #6
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	071b      	lsls	r3, r3, #28
 8004d80:	4981      	ldr	r1, [pc, #516]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01f      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d94:	4b7c      	ldr	r3, [pc, #496]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d9a:	0f1b      	lsrs	r3, r3, #28
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	019a      	lsls	r2, r3, #6
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	431a      	orrs	r2, r3
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	071b      	lsls	r3, r3, #28
 8004db4:	4974      	ldr	r1, [pc, #464]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004dbc:	4b72      	ldr	r3, [pc, #456]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dc2:	f023 021f 	bic.w	r2, r3, #31
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	496e      	ldr	r1, [pc, #440]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00d      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	019a      	lsls	r2, r3, #6
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	061b      	lsls	r3, r3, #24
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	071b      	lsls	r3, r3, #28
 8004df4:	4964      	ldr	r1, [pc, #400]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dfc:	4b61      	ldr	r3, [pc, #388]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e02:	f7fd fba9 	bl	8002558 <HAL_GetTick>
 8004e06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e0a:	f7fd fba5 	bl	8002558 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e129      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d079      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e40:	4b52      	ldr	r3, [pc, #328]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e46:	f7fd fb87 	bl	8002558 <HAL_GetTick>
 8004e4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e4e:	f7fd fb83 	bl	8002558 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e107      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e60:	4b49      	ldr	r3, [pc, #292]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e6c:	d0ef      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d020      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e7a:	4b43      	ldr	r3, [pc, #268]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e80:	0f1b      	lsrs	r3, r3, #28
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	019a      	lsls	r2, r3, #6
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	061b      	lsls	r3, r3, #24
 8004e94:	431a      	orrs	r2, r3
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	071b      	lsls	r3, r3, #28
 8004e9a:	493b      	ldr	r1, [pc, #236]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ea2:	4b39      	ldr	r3, [pc, #228]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ea8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	4934      	ldr	r1, [pc, #208]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01e      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ece:	0e1b      	lsrs	r3, r3, #24
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	019a      	lsls	r2, r3, #6
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	061b      	lsls	r3, r3, #24
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	071b      	lsls	r3, r3, #28
 8004ee8:	4927      	ldr	r1, [pc, #156]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ef0:	4b25      	ldr	r3, [pc, #148]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ef6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	4922      	ldr	r1, [pc, #136]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f06:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f0c:	f7fd fb24 	bl	8002558 <HAL_GetTick>
 8004f10:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f14:	f7fd fb20 	bl	8002558 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e0a4      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f26:	4b18      	ldr	r3, [pc, #96]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f32:	d1ef      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 808b 	beq.w	8005058 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	4b10      	ldr	r3, [pc, #64]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f52:	4b0d      	ldr	r3, [pc, #52]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a0b      	ldr	r2, [pc, #44]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6a:	f7fd faf5 	bl	8002558 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f70:	e010      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f72:	f7fd faf1 	bl	8002558 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d909      	bls.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e075      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004f84:	42470068 	.word	0x42470068
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	42470070 	.word	0x42470070
 8004f90:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f94:	4b38      	ldr	r3, [pc, #224]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0e8      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fa0:	4b36      	ldr	r3, [pc, #216]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d02f      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d028      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fce:	4b2c      	ldr	r3, [pc, #176]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fd4:	4a29      	ldr	r2, [pc, #164]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fda:	4b28      	ldr	r3, [pc, #160]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d114      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fe6:	f7fd fab7 	bl	8002558 <HAL_GetTick>
 8004fea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fec:	e00a      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fee:	f7fd fab3 	bl	8002558 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e035      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005004:	4b1d      	ldr	r3, [pc, #116]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0ee      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005018:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800501c:	d10d      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800501e:	4b17      	ldr	r3, [pc, #92]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800502e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005032:	4912      	ldr	r1, [pc, #72]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005034:	4313      	orrs	r3, r2
 8005036:	608b      	str	r3, [r1, #8]
 8005038:	e005      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800503a:	4b10      	ldr	r3, [pc, #64]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	4a0f      	ldr	r2, [pc, #60]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005040:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005044:	6093      	str	r3, [r2, #8]
 8005046:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005048:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005052:	490a      	ldr	r1, [pc, #40]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005054:	4313      	orrs	r3, r2
 8005056:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800506a:	4b06      	ldr	r3, [pc, #24]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800506c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40007000 	.word	0x40007000
 800507c:	40023800 	.word	0x40023800
 8005080:	42470e40 	.word	0x42470e40
 8005084:	424711e0 	.word	0x424711e0

08005088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e07b      	b.n	8005192 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d108      	bne.n	80050b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050aa:	d009      	beq.n	80050c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	61da      	str	r2, [r3, #28]
 80050b2:	e005      	b.n	80050c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fc fcde 	bl	8001a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005144:	ea42 0103 	orr.w	r1, r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	0c1b      	lsrs	r3, r3, #16
 800515e:	f003 0104 	and.w	r1, r3, #4
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005166:	f003 0210 	and.w	r2, r3, #16
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005180:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e01a      	b.n	80051e2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7fc fcb1 	bl	8001b2c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b088      	sub	sp, #32
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051fa:	f7fd f9ad 	bl	8002558 <HAL_GetTick>
 80051fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d001      	beq.n	8005214 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005210:	2302      	movs	r3, #2
 8005212:	e12a      	b.n	800546a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_SPI_Transmit+0x36>
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e122      	b.n	800546a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_SPI_Transmit+0x48>
 800522e:	2302      	movs	r3, #2
 8005230:	e11b      	b.n	800546a <HAL_SPI_Transmit+0x280>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2203      	movs	r2, #3
 800523e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	88fa      	ldrh	r2, [r7, #6]
 8005252:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005280:	d10f      	bne.n	80052a2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005290:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ac:	2b40      	cmp	r3, #64	@ 0x40
 80052ae:	d007      	beq.n	80052c0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c8:	d152      	bne.n	8005370 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <HAL_SPI_Transmit+0xee>
 80052d2:	8b7b      	ldrh	r3, [r7, #26]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d145      	bne.n	8005364 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052dc:	881a      	ldrh	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e8:	1c9a      	adds	r2, r3, #2
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052fc:	e032      	b.n	8005364 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b02      	cmp	r3, #2
 800530a:	d112      	bne.n	8005332 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005310:	881a      	ldrh	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531c:	1c9a      	adds	r2, r3, #2
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005330:	e018      	b.n	8005364 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005332:	f7fd f911 	bl	8002558 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d803      	bhi.n	800534a <HAL_SPI_Transmit+0x160>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005348:	d102      	bne.n	8005350 <HAL_SPI_Transmit+0x166>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d109      	bne.n	8005364 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e082      	b.n	800546a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1c7      	bne.n	80052fe <HAL_SPI_Transmit+0x114>
 800536e:	e053      	b.n	8005418 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <HAL_SPI_Transmit+0x194>
 8005378:	8b7b      	ldrh	r3, [r7, #26]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d147      	bne.n	800540e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	330c      	adds	r3, #12
 8005388:	7812      	ldrb	r2, [r2, #0]
 800538a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053a4:	e033      	b.n	800540e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d113      	bne.n	80053dc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	7812      	ldrb	r2, [r2, #0]
 80053c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053da:	e018      	b.n	800540e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053dc:	f7fd f8bc 	bl	8002558 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d803      	bhi.n	80053f4 <HAL_SPI_Transmit+0x20a>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053f2:	d102      	bne.n	80053fa <HAL_SPI_Transmit+0x210>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e02d      	b.n	800546a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1c6      	bne.n	80053a6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f8bf 	bl	80055a0 <SPI_EndRxTxTransaction>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005468:	2300      	movs	r3, #0
  }
}
 800546a:	4618      	mov	r0, r3
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005480:	b2db      	uxtb	r3, r3
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
	...

08005490 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054a0:	f7fd f85a 	bl	8002558 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	4413      	add	r3, r2
 80054ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054b0:	f7fd f852 	bl	8002558 <HAL_GetTick>
 80054b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054b6:	4b39      	ldr	r3, [pc, #228]	@ (800559c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	015b      	lsls	r3, r3, #5
 80054bc:	0d1b      	lsrs	r3, r3, #20
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	fb02 f303 	mul.w	r3, r2, r3
 80054c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054c6:	e054      	b.n	8005572 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054ce:	d050      	beq.n	8005572 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054d0:	f7fd f842 	bl	8002558 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d902      	bls.n	80054e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d13d      	bne.n	8005562 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054fe:	d111      	bne.n	8005524 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005508:	d004      	beq.n	8005514 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005512:	d107      	bne.n	8005524 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005522:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800552c:	d10f      	bne.n	800554e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800554c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e017      	b.n	8005592 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	3b01      	subs	r3, #1
 8005570:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4013      	ands	r3, r2
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	429a      	cmp	r2, r3
 8005580:	bf0c      	ite	eq
 8005582:	2301      	moveq	r3, #1
 8005584:	2300      	movne	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	429a      	cmp	r2, r3
 800558e:	d19b      	bne.n	80054c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3720      	adds	r7, #32
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000010 	.word	0x20000010

080055a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2201      	movs	r2, #1
 80055b4:	2102      	movs	r1, #2
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff ff6a 	bl	8005490 <SPI_WaitFlagStateUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e032      	b.n	8005638 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005640 <SPI_EndRxTxTransaction+0xa0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005644 <SPI_EndRxTxTransaction+0xa4>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	0d5b      	lsrs	r3, r3, #21
 80055de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80055e2:	fb02 f303 	mul.w	r3, r2, r3
 80055e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f0:	d112      	bne.n	8005618 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	2180      	movs	r1, #128	@ 0x80
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f7ff ff47 	bl	8005490 <SPI_WaitFlagStateUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d016      	beq.n	8005636 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560c:	f043 0220 	orr.w	r2, r3, #32
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e00f      	b.n	8005638 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	3b01      	subs	r3, #1
 8005622:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562e:	2b80      	cmp	r3, #128	@ 0x80
 8005630:	d0f2      	beq.n	8005618 <SPI_EndRxTxTransaction+0x78>
 8005632:	e000      	b.n	8005636 <SPI_EndRxTxTransaction+0x96>
        break;
 8005634:	bf00      	nop
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20000010 	.word	0x20000010
 8005644:	165e9f81 	.word	0x165e9f81

08005648 <std>:
 8005648:	2300      	movs	r3, #0
 800564a:	b510      	push	{r4, lr}
 800564c:	4604      	mov	r4, r0
 800564e:	e9c0 3300 	strd	r3, r3, [r0]
 8005652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005656:	6083      	str	r3, [r0, #8]
 8005658:	8181      	strh	r1, [r0, #12]
 800565a:	6643      	str	r3, [r0, #100]	@ 0x64
 800565c:	81c2      	strh	r2, [r0, #14]
 800565e:	6183      	str	r3, [r0, #24]
 8005660:	4619      	mov	r1, r3
 8005662:	2208      	movs	r2, #8
 8005664:	305c      	adds	r0, #92	@ 0x5c
 8005666:	f000 f9f9 	bl	8005a5c <memset>
 800566a:	4b0d      	ldr	r3, [pc, #52]	@ (80056a0 <std+0x58>)
 800566c:	6263      	str	r3, [r4, #36]	@ 0x24
 800566e:	4b0d      	ldr	r3, [pc, #52]	@ (80056a4 <std+0x5c>)
 8005670:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005672:	4b0d      	ldr	r3, [pc, #52]	@ (80056a8 <std+0x60>)
 8005674:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005676:	4b0d      	ldr	r3, [pc, #52]	@ (80056ac <std+0x64>)
 8005678:	6323      	str	r3, [r4, #48]	@ 0x30
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <std+0x68>)
 800567c:	6224      	str	r4, [r4, #32]
 800567e:	429c      	cmp	r4, r3
 8005680:	d006      	beq.n	8005690 <std+0x48>
 8005682:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005686:	4294      	cmp	r4, r2
 8005688:	d002      	beq.n	8005690 <std+0x48>
 800568a:	33d0      	adds	r3, #208	@ 0xd0
 800568c:	429c      	cmp	r4, r3
 800568e:	d105      	bne.n	800569c <std+0x54>
 8005690:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005698:	f000 ba58 	b.w	8005b4c <__retarget_lock_init_recursive>
 800569c:	bd10      	pop	{r4, pc}
 800569e:	bf00      	nop
 80056a0:	080058ad 	.word	0x080058ad
 80056a4:	080058cf 	.word	0x080058cf
 80056a8:	08005907 	.word	0x08005907
 80056ac:	0800592b 	.word	0x0800592b
 80056b0:	20025a48 	.word	0x20025a48

080056b4 <stdio_exit_handler>:
 80056b4:	4a02      	ldr	r2, [pc, #8]	@ (80056c0 <stdio_exit_handler+0xc>)
 80056b6:	4903      	ldr	r1, [pc, #12]	@ (80056c4 <stdio_exit_handler+0x10>)
 80056b8:	4803      	ldr	r0, [pc, #12]	@ (80056c8 <stdio_exit_handler+0x14>)
 80056ba:	f000 b869 	b.w	8005790 <_fwalk_sglue>
 80056be:	bf00      	nop
 80056c0:	2000001c 	.word	0x2000001c
 80056c4:	080063ed 	.word	0x080063ed
 80056c8:	2000002c 	.word	0x2000002c

080056cc <cleanup_stdio>:
 80056cc:	6841      	ldr	r1, [r0, #4]
 80056ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005700 <cleanup_stdio+0x34>)
 80056d0:	4299      	cmp	r1, r3
 80056d2:	b510      	push	{r4, lr}
 80056d4:	4604      	mov	r4, r0
 80056d6:	d001      	beq.n	80056dc <cleanup_stdio+0x10>
 80056d8:	f000 fe88 	bl	80063ec <_fflush_r>
 80056dc:	68a1      	ldr	r1, [r4, #8]
 80056de:	4b09      	ldr	r3, [pc, #36]	@ (8005704 <cleanup_stdio+0x38>)
 80056e0:	4299      	cmp	r1, r3
 80056e2:	d002      	beq.n	80056ea <cleanup_stdio+0x1e>
 80056e4:	4620      	mov	r0, r4
 80056e6:	f000 fe81 	bl	80063ec <_fflush_r>
 80056ea:	68e1      	ldr	r1, [r4, #12]
 80056ec:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <cleanup_stdio+0x3c>)
 80056ee:	4299      	cmp	r1, r3
 80056f0:	d004      	beq.n	80056fc <cleanup_stdio+0x30>
 80056f2:	4620      	mov	r0, r4
 80056f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f8:	f000 be78 	b.w	80063ec <_fflush_r>
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	bf00      	nop
 8005700:	20025a48 	.word	0x20025a48
 8005704:	20025ab0 	.word	0x20025ab0
 8005708:	20025b18 	.word	0x20025b18

0800570c <global_stdio_init.part.0>:
 800570c:	b510      	push	{r4, lr}
 800570e:	4b0b      	ldr	r3, [pc, #44]	@ (800573c <global_stdio_init.part.0+0x30>)
 8005710:	4c0b      	ldr	r4, [pc, #44]	@ (8005740 <global_stdio_init.part.0+0x34>)
 8005712:	4a0c      	ldr	r2, [pc, #48]	@ (8005744 <global_stdio_init.part.0+0x38>)
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	4620      	mov	r0, r4
 8005718:	2200      	movs	r2, #0
 800571a:	2104      	movs	r1, #4
 800571c:	f7ff ff94 	bl	8005648 <std>
 8005720:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005724:	2201      	movs	r2, #1
 8005726:	2109      	movs	r1, #9
 8005728:	f7ff ff8e 	bl	8005648 <std>
 800572c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005730:	2202      	movs	r2, #2
 8005732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005736:	2112      	movs	r1, #18
 8005738:	f7ff bf86 	b.w	8005648 <std>
 800573c:	20025b80 	.word	0x20025b80
 8005740:	20025a48 	.word	0x20025a48
 8005744:	080056b5 	.word	0x080056b5

08005748 <__sfp_lock_acquire>:
 8005748:	4801      	ldr	r0, [pc, #4]	@ (8005750 <__sfp_lock_acquire+0x8>)
 800574a:	f000 ba00 	b.w	8005b4e <__retarget_lock_acquire_recursive>
 800574e:	bf00      	nop
 8005750:	20025b89 	.word	0x20025b89

08005754 <__sfp_lock_release>:
 8005754:	4801      	ldr	r0, [pc, #4]	@ (800575c <__sfp_lock_release+0x8>)
 8005756:	f000 b9fb 	b.w	8005b50 <__retarget_lock_release_recursive>
 800575a:	bf00      	nop
 800575c:	20025b89 	.word	0x20025b89

08005760 <__sinit>:
 8005760:	b510      	push	{r4, lr}
 8005762:	4604      	mov	r4, r0
 8005764:	f7ff fff0 	bl	8005748 <__sfp_lock_acquire>
 8005768:	6a23      	ldr	r3, [r4, #32]
 800576a:	b11b      	cbz	r3, 8005774 <__sinit+0x14>
 800576c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005770:	f7ff bff0 	b.w	8005754 <__sfp_lock_release>
 8005774:	4b04      	ldr	r3, [pc, #16]	@ (8005788 <__sinit+0x28>)
 8005776:	6223      	str	r3, [r4, #32]
 8005778:	4b04      	ldr	r3, [pc, #16]	@ (800578c <__sinit+0x2c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f5      	bne.n	800576c <__sinit+0xc>
 8005780:	f7ff ffc4 	bl	800570c <global_stdio_init.part.0>
 8005784:	e7f2      	b.n	800576c <__sinit+0xc>
 8005786:	bf00      	nop
 8005788:	080056cd 	.word	0x080056cd
 800578c:	20025b80 	.word	0x20025b80

08005790 <_fwalk_sglue>:
 8005790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005794:	4607      	mov	r7, r0
 8005796:	4688      	mov	r8, r1
 8005798:	4614      	mov	r4, r2
 800579a:	2600      	movs	r6, #0
 800579c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057a0:	f1b9 0901 	subs.w	r9, r9, #1
 80057a4:	d505      	bpl.n	80057b2 <_fwalk_sglue+0x22>
 80057a6:	6824      	ldr	r4, [r4, #0]
 80057a8:	2c00      	cmp	r4, #0
 80057aa:	d1f7      	bne.n	800579c <_fwalk_sglue+0xc>
 80057ac:	4630      	mov	r0, r6
 80057ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b2:	89ab      	ldrh	r3, [r5, #12]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d907      	bls.n	80057c8 <_fwalk_sglue+0x38>
 80057b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057bc:	3301      	adds	r3, #1
 80057be:	d003      	beq.n	80057c8 <_fwalk_sglue+0x38>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4638      	mov	r0, r7
 80057c4:	47c0      	blx	r8
 80057c6:	4306      	orrs	r6, r0
 80057c8:	3568      	adds	r5, #104	@ 0x68
 80057ca:	e7e9      	b.n	80057a0 <_fwalk_sglue+0x10>

080057cc <iprintf>:
 80057cc:	b40f      	push	{r0, r1, r2, r3}
 80057ce:	b507      	push	{r0, r1, r2, lr}
 80057d0:	4906      	ldr	r1, [pc, #24]	@ (80057ec <iprintf+0x20>)
 80057d2:	ab04      	add	r3, sp, #16
 80057d4:	6808      	ldr	r0, [r1, #0]
 80057d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057da:	6881      	ldr	r1, [r0, #8]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	f000 fadb 	bl	8005d98 <_vfiprintf_r>
 80057e2:	b003      	add	sp, #12
 80057e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057e8:	b004      	add	sp, #16
 80057ea:	4770      	bx	lr
 80057ec:	20000028 	.word	0x20000028

080057f0 <_puts_r>:
 80057f0:	6a03      	ldr	r3, [r0, #32]
 80057f2:	b570      	push	{r4, r5, r6, lr}
 80057f4:	6884      	ldr	r4, [r0, #8]
 80057f6:	4605      	mov	r5, r0
 80057f8:	460e      	mov	r6, r1
 80057fa:	b90b      	cbnz	r3, 8005800 <_puts_r+0x10>
 80057fc:	f7ff ffb0 	bl	8005760 <__sinit>
 8005800:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005802:	07db      	lsls	r3, r3, #31
 8005804:	d405      	bmi.n	8005812 <_puts_r+0x22>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	0598      	lsls	r0, r3, #22
 800580a:	d402      	bmi.n	8005812 <_puts_r+0x22>
 800580c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800580e:	f000 f99e 	bl	8005b4e <__retarget_lock_acquire_recursive>
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	0719      	lsls	r1, r3, #28
 8005816:	d502      	bpl.n	800581e <_puts_r+0x2e>
 8005818:	6923      	ldr	r3, [r4, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d135      	bne.n	800588a <_puts_r+0x9a>
 800581e:	4621      	mov	r1, r4
 8005820:	4628      	mov	r0, r5
 8005822:	f000 f8c5 	bl	80059b0 <__swsetup_r>
 8005826:	b380      	cbz	r0, 800588a <_puts_r+0x9a>
 8005828:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800582c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800582e:	07da      	lsls	r2, r3, #31
 8005830:	d405      	bmi.n	800583e <_puts_r+0x4e>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	059b      	lsls	r3, r3, #22
 8005836:	d402      	bmi.n	800583e <_puts_r+0x4e>
 8005838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800583a:	f000 f989 	bl	8005b50 <__retarget_lock_release_recursive>
 800583e:	4628      	mov	r0, r5
 8005840:	bd70      	pop	{r4, r5, r6, pc}
 8005842:	2b00      	cmp	r3, #0
 8005844:	da04      	bge.n	8005850 <_puts_r+0x60>
 8005846:	69a2      	ldr	r2, [r4, #24]
 8005848:	429a      	cmp	r2, r3
 800584a:	dc17      	bgt.n	800587c <_puts_r+0x8c>
 800584c:	290a      	cmp	r1, #10
 800584e:	d015      	beq.n	800587c <_puts_r+0x8c>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	6022      	str	r2, [r4, #0]
 8005856:	7019      	strb	r1, [r3, #0]
 8005858:	68a3      	ldr	r3, [r4, #8]
 800585a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800585e:	3b01      	subs	r3, #1
 8005860:	60a3      	str	r3, [r4, #8]
 8005862:	2900      	cmp	r1, #0
 8005864:	d1ed      	bne.n	8005842 <_puts_r+0x52>
 8005866:	2b00      	cmp	r3, #0
 8005868:	da11      	bge.n	800588e <_puts_r+0x9e>
 800586a:	4622      	mov	r2, r4
 800586c:	210a      	movs	r1, #10
 800586e:	4628      	mov	r0, r5
 8005870:	f000 f85f 	bl	8005932 <__swbuf_r>
 8005874:	3001      	adds	r0, #1
 8005876:	d0d7      	beq.n	8005828 <_puts_r+0x38>
 8005878:	250a      	movs	r5, #10
 800587a:	e7d7      	b.n	800582c <_puts_r+0x3c>
 800587c:	4622      	mov	r2, r4
 800587e:	4628      	mov	r0, r5
 8005880:	f000 f857 	bl	8005932 <__swbuf_r>
 8005884:	3001      	adds	r0, #1
 8005886:	d1e7      	bne.n	8005858 <_puts_r+0x68>
 8005888:	e7ce      	b.n	8005828 <_puts_r+0x38>
 800588a:	3e01      	subs	r6, #1
 800588c:	e7e4      	b.n	8005858 <_puts_r+0x68>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	6022      	str	r2, [r4, #0]
 8005894:	220a      	movs	r2, #10
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	e7ee      	b.n	8005878 <_puts_r+0x88>
	...

0800589c <puts>:
 800589c:	4b02      	ldr	r3, [pc, #8]	@ (80058a8 <puts+0xc>)
 800589e:	4601      	mov	r1, r0
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	f7ff bfa5 	b.w	80057f0 <_puts_r>
 80058a6:	bf00      	nop
 80058a8:	20000028 	.word	0x20000028

080058ac <__sread>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	460c      	mov	r4, r1
 80058b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b4:	f000 f8fc 	bl	8005ab0 <_read_r>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	bfab      	itete	ge
 80058bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058be:	89a3      	ldrhlt	r3, [r4, #12]
 80058c0:	181b      	addge	r3, r3, r0
 80058c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058c6:	bfac      	ite	ge
 80058c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058ca:	81a3      	strhlt	r3, [r4, #12]
 80058cc:	bd10      	pop	{r4, pc}

080058ce <__swrite>:
 80058ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	461f      	mov	r7, r3
 80058d4:	898b      	ldrh	r3, [r1, #12]
 80058d6:	05db      	lsls	r3, r3, #23
 80058d8:	4605      	mov	r5, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	4616      	mov	r6, r2
 80058de:	d505      	bpl.n	80058ec <__swrite+0x1e>
 80058e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e4:	2302      	movs	r3, #2
 80058e6:	2200      	movs	r2, #0
 80058e8:	f000 f8d0 	bl	8005a8c <_lseek_r>
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	4632      	mov	r2, r6
 80058fa:	463b      	mov	r3, r7
 80058fc:	4628      	mov	r0, r5
 80058fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005902:	f000 b8e7 	b.w	8005ad4 <_write_r>

08005906 <__sseek>:
 8005906:	b510      	push	{r4, lr}
 8005908:	460c      	mov	r4, r1
 800590a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590e:	f000 f8bd 	bl	8005a8c <_lseek_r>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	bf15      	itete	ne
 8005918:	6560      	strne	r0, [r4, #84]	@ 0x54
 800591a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800591e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005922:	81a3      	strheq	r3, [r4, #12]
 8005924:	bf18      	it	ne
 8005926:	81a3      	strhne	r3, [r4, #12]
 8005928:	bd10      	pop	{r4, pc}

0800592a <__sclose>:
 800592a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592e:	f000 b89d 	b.w	8005a6c <_close_r>

08005932 <__swbuf_r>:
 8005932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005934:	460e      	mov	r6, r1
 8005936:	4614      	mov	r4, r2
 8005938:	4605      	mov	r5, r0
 800593a:	b118      	cbz	r0, 8005944 <__swbuf_r+0x12>
 800593c:	6a03      	ldr	r3, [r0, #32]
 800593e:	b90b      	cbnz	r3, 8005944 <__swbuf_r+0x12>
 8005940:	f7ff ff0e 	bl	8005760 <__sinit>
 8005944:	69a3      	ldr	r3, [r4, #24]
 8005946:	60a3      	str	r3, [r4, #8]
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	071a      	lsls	r2, r3, #28
 800594c:	d501      	bpl.n	8005952 <__swbuf_r+0x20>
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	b943      	cbnz	r3, 8005964 <__swbuf_r+0x32>
 8005952:	4621      	mov	r1, r4
 8005954:	4628      	mov	r0, r5
 8005956:	f000 f82b 	bl	80059b0 <__swsetup_r>
 800595a:	b118      	cbz	r0, 8005964 <__swbuf_r+0x32>
 800595c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005960:	4638      	mov	r0, r7
 8005962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	6922      	ldr	r2, [r4, #16]
 8005968:	1a98      	subs	r0, r3, r2
 800596a:	6963      	ldr	r3, [r4, #20]
 800596c:	b2f6      	uxtb	r6, r6
 800596e:	4283      	cmp	r3, r0
 8005970:	4637      	mov	r7, r6
 8005972:	dc05      	bgt.n	8005980 <__swbuf_r+0x4e>
 8005974:	4621      	mov	r1, r4
 8005976:	4628      	mov	r0, r5
 8005978:	f000 fd38 	bl	80063ec <_fflush_r>
 800597c:	2800      	cmp	r0, #0
 800597e:	d1ed      	bne.n	800595c <__swbuf_r+0x2a>
 8005980:	68a3      	ldr	r3, [r4, #8]
 8005982:	3b01      	subs	r3, #1
 8005984:	60a3      	str	r3, [r4, #8]
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	6022      	str	r2, [r4, #0]
 800598c:	701e      	strb	r6, [r3, #0]
 800598e:	6962      	ldr	r2, [r4, #20]
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	429a      	cmp	r2, r3
 8005994:	d004      	beq.n	80059a0 <__swbuf_r+0x6e>
 8005996:	89a3      	ldrh	r3, [r4, #12]
 8005998:	07db      	lsls	r3, r3, #31
 800599a:	d5e1      	bpl.n	8005960 <__swbuf_r+0x2e>
 800599c:	2e0a      	cmp	r6, #10
 800599e:	d1df      	bne.n	8005960 <__swbuf_r+0x2e>
 80059a0:	4621      	mov	r1, r4
 80059a2:	4628      	mov	r0, r5
 80059a4:	f000 fd22 	bl	80063ec <_fflush_r>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d0d9      	beq.n	8005960 <__swbuf_r+0x2e>
 80059ac:	e7d6      	b.n	800595c <__swbuf_r+0x2a>
	...

080059b0 <__swsetup_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4b29      	ldr	r3, [pc, #164]	@ (8005a58 <__swsetup_r+0xa8>)
 80059b4:	4605      	mov	r5, r0
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	460c      	mov	r4, r1
 80059ba:	b118      	cbz	r0, 80059c4 <__swsetup_r+0x14>
 80059bc:	6a03      	ldr	r3, [r0, #32]
 80059be:	b90b      	cbnz	r3, 80059c4 <__swsetup_r+0x14>
 80059c0:	f7ff fece 	bl	8005760 <__sinit>
 80059c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c8:	0719      	lsls	r1, r3, #28
 80059ca:	d422      	bmi.n	8005a12 <__swsetup_r+0x62>
 80059cc:	06da      	lsls	r2, r3, #27
 80059ce:	d407      	bmi.n	80059e0 <__swsetup_r+0x30>
 80059d0:	2209      	movs	r2, #9
 80059d2:	602a      	str	r2, [r5, #0]
 80059d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059d8:	81a3      	strh	r3, [r4, #12]
 80059da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059de:	e033      	b.n	8005a48 <__swsetup_r+0x98>
 80059e0:	0758      	lsls	r0, r3, #29
 80059e2:	d512      	bpl.n	8005a0a <__swsetup_r+0x5a>
 80059e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059e6:	b141      	cbz	r1, 80059fa <__swsetup_r+0x4a>
 80059e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059ec:	4299      	cmp	r1, r3
 80059ee:	d002      	beq.n	80059f6 <__swsetup_r+0x46>
 80059f0:	4628      	mov	r0, r5
 80059f2:	f000 f8af 	bl	8005b54 <_free_r>
 80059f6:	2300      	movs	r3, #0
 80059f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	2300      	movs	r3, #0
 8005a04:	6063      	str	r3, [r4, #4]
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	f043 0308 	orr.w	r3, r3, #8
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	b94b      	cbnz	r3, 8005a2a <__swsetup_r+0x7a>
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a20:	d003      	beq.n	8005a2a <__swsetup_r+0x7a>
 8005a22:	4621      	mov	r1, r4
 8005a24:	4628      	mov	r0, r5
 8005a26:	f000 fd2f 	bl	8006488 <__smakebuf_r>
 8005a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a2e:	f013 0201 	ands.w	r2, r3, #1
 8005a32:	d00a      	beq.n	8005a4a <__swsetup_r+0x9a>
 8005a34:	2200      	movs	r2, #0
 8005a36:	60a2      	str	r2, [r4, #8]
 8005a38:	6962      	ldr	r2, [r4, #20]
 8005a3a:	4252      	negs	r2, r2
 8005a3c:	61a2      	str	r2, [r4, #24]
 8005a3e:	6922      	ldr	r2, [r4, #16]
 8005a40:	b942      	cbnz	r2, 8005a54 <__swsetup_r+0xa4>
 8005a42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a46:	d1c5      	bne.n	80059d4 <__swsetup_r+0x24>
 8005a48:	bd38      	pop	{r3, r4, r5, pc}
 8005a4a:	0799      	lsls	r1, r3, #30
 8005a4c:	bf58      	it	pl
 8005a4e:	6962      	ldrpl	r2, [r4, #20]
 8005a50:	60a2      	str	r2, [r4, #8]
 8005a52:	e7f4      	b.n	8005a3e <__swsetup_r+0x8e>
 8005a54:	2000      	movs	r0, #0
 8005a56:	e7f7      	b.n	8005a48 <__swsetup_r+0x98>
 8005a58:	20000028 	.word	0x20000028

08005a5c <memset>:
 8005a5c:	4402      	add	r2, r0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d100      	bne.n	8005a66 <memset+0xa>
 8005a64:	4770      	bx	lr
 8005a66:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6a:	e7f9      	b.n	8005a60 <memset+0x4>

08005a6c <_close_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4d06      	ldr	r5, [pc, #24]	@ (8005a88 <_close_r+0x1c>)
 8005a70:	2300      	movs	r3, #0
 8005a72:	4604      	mov	r4, r0
 8005a74:	4608      	mov	r0, r1
 8005a76:	602b      	str	r3, [r5, #0]
 8005a78:	f7fc fc62 	bl	8002340 <_close>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	d102      	bne.n	8005a86 <_close_r+0x1a>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	b103      	cbz	r3, 8005a86 <_close_r+0x1a>
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	20025b84 	.word	0x20025b84

08005a8c <_lseek_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4d07      	ldr	r5, [pc, #28]	@ (8005aac <_lseek_r+0x20>)
 8005a90:	4604      	mov	r4, r0
 8005a92:	4608      	mov	r0, r1
 8005a94:	4611      	mov	r1, r2
 8005a96:	2200      	movs	r2, #0
 8005a98:	602a      	str	r2, [r5, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f7fc fc77 	bl	800238e <_lseek>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d102      	bne.n	8005aaa <_lseek_r+0x1e>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	b103      	cbz	r3, 8005aaa <_lseek_r+0x1e>
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	20025b84 	.word	0x20025b84

08005ab0 <_read_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d07      	ldr	r5, [pc, #28]	@ (8005ad0 <_read_r+0x20>)
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	4608      	mov	r0, r1
 8005ab8:	4611      	mov	r1, r2
 8005aba:	2200      	movs	r2, #0
 8005abc:	602a      	str	r2, [r5, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f7fc fc05 	bl	80022ce <_read>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_read_r+0x1e>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_read_r+0x1e>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	20025b84 	.word	0x20025b84

08005ad4 <_write_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4d07      	ldr	r5, [pc, #28]	@ (8005af4 <_write_r+0x20>)
 8005ad8:	4604      	mov	r4, r0
 8005ada:	4608      	mov	r0, r1
 8005adc:	4611      	mov	r1, r2
 8005ade:	2200      	movs	r2, #0
 8005ae0:	602a      	str	r2, [r5, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f7fc fc10 	bl	8002308 <_write>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d102      	bne.n	8005af2 <_write_r+0x1e>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	b103      	cbz	r3, 8005af2 <_write_r+0x1e>
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	20025b84 	.word	0x20025b84

08005af8 <__errno>:
 8005af8:	4b01      	ldr	r3, [pc, #4]	@ (8005b00 <__errno+0x8>)
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	20000028 	.word	0x20000028

08005b04 <__libc_init_array>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	4d0d      	ldr	r5, [pc, #52]	@ (8005b3c <__libc_init_array+0x38>)
 8005b08:	4c0d      	ldr	r4, [pc, #52]	@ (8005b40 <__libc_init_array+0x3c>)
 8005b0a:	1b64      	subs	r4, r4, r5
 8005b0c:	10a4      	asrs	r4, r4, #2
 8005b0e:	2600      	movs	r6, #0
 8005b10:	42a6      	cmp	r6, r4
 8005b12:	d109      	bne.n	8005b28 <__libc_init_array+0x24>
 8005b14:	4d0b      	ldr	r5, [pc, #44]	@ (8005b44 <__libc_init_array+0x40>)
 8005b16:	4c0c      	ldr	r4, [pc, #48]	@ (8005b48 <__libc_init_array+0x44>)
 8005b18:	f000 fd24 	bl	8006564 <_init>
 8005b1c:	1b64      	subs	r4, r4, r5
 8005b1e:	10a4      	asrs	r4, r4, #2
 8005b20:	2600      	movs	r6, #0
 8005b22:	42a6      	cmp	r6, r4
 8005b24:	d105      	bne.n	8005b32 <__libc_init_array+0x2e>
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2c:	4798      	blx	r3
 8005b2e:	3601      	adds	r6, #1
 8005b30:	e7ee      	b.n	8005b10 <__libc_init_array+0xc>
 8005b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b36:	4798      	blx	r3
 8005b38:	3601      	adds	r6, #1
 8005b3a:	e7f2      	b.n	8005b22 <__libc_init_array+0x1e>
 8005b3c:	080077f4 	.word	0x080077f4
 8005b40:	080077f4 	.word	0x080077f4
 8005b44:	080077f4 	.word	0x080077f4
 8005b48:	080077f8 	.word	0x080077f8

08005b4c <__retarget_lock_init_recursive>:
 8005b4c:	4770      	bx	lr

08005b4e <__retarget_lock_acquire_recursive>:
 8005b4e:	4770      	bx	lr

08005b50 <__retarget_lock_release_recursive>:
 8005b50:	4770      	bx	lr
	...

08005b54 <_free_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4605      	mov	r5, r0
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	d041      	beq.n	8005be0 <_free_r+0x8c>
 8005b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b60:	1f0c      	subs	r4, r1, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bfb8      	it	lt
 8005b66:	18e4      	addlt	r4, r4, r3
 8005b68:	f000 f8e0 	bl	8005d2c <__malloc_lock>
 8005b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005be4 <_free_r+0x90>)
 8005b6e:	6813      	ldr	r3, [r2, #0]
 8005b70:	b933      	cbnz	r3, 8005b80 <_free_r+0x2c>
 8005b72:	6063      	str	r3, [r4, #4]
 8005b74:	6014      	str	r4, [r2, #0]
 8005b76:	4628      	mov	r0, r5
 8005b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b7c:	f000 b8dc 	b.w	8005d38 <__malloc_unlock>
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	d908      	bls.n	8005b96 <_free_r+0x42>
 8005b84:	6820      	ldr	r0, [r4, #0]
 8005b86:	1821      	adds	r1, r4, r0
 8005b88:	428b      	cmp	r3, r1
 8005b8a:	bf01      	itttt	eq
 8005b8c:	6819      	ldreq	r1, [r3, #0]
 8005b8e:	685b      	ldreq	r3, [r3, #4]
 8005b90:	1809      	addeq	r1, r1, r0
 8005b92:	6021      	streq	r1, [r4, #0]
 8005b94:	e7ed      	b.n	8005b72 <_free_r+0x1e>
 8005b96:	461a      	mov	r2, r3
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	b10b      	cbz	r3, 8005ba0 <_free_r+0x4c>
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	d9fa      	bls.n	8005b96 <_free_r+0x42>
 8005ba0:	6811      	ldr	r1, [r2, #0]
 8005ba2:	1850      	adds	r0, r2, r1
 8005ba4:	42a0      	cmp	r0, r4
 8005ba6:	d10b      	bne.n	8005bc0 <_free_r+0x6c>
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	4401      	add	r1, r0
 8005bac:	1850      	adds	r0, r2, r1
 8005bae:	4283      	cmp	r3, r0
 8005bb0:	6011      	str	r1, [r2, #0]
 8005bb2:	d1e0      	bne.n	8005b76 <_free_r+0x22>
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	6053      	str	r3, [r2, #4]
 8005bba:	4408      	add	r0, r1
 8005bbc:	6010      	str	r0, [r2, #0]
 8005bbe:	e7da      	b.n	8005b76 <_free_r+0x22>
 8005bc0:	d902      	bls.n	8005bc8 <_free_r+0x74>
 8005bc2:	230c      	movs	r3, #12
 8005bc4:	602b      	str	r3, [r5, #0]
 8005bc6:	e7d6      	b.n	8005b76 <_free_r+0x22>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	1821      	adds	r1, r4, r0
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	bf04      	itt	eq
 8005bd0:	6819      	ldreq	r1, [r3, #0]
 8005bd2:	685b      	ldreq	r3, [r3, #4]
 8005bd4:	6063      	str	r3, [r4, #4]
 8005bd6:	bf04      	itt	eq
 8005bd8:	1809      	addeq	r1, r1, r0
 8005bda:	6021      	streq	r1, [r4, #0]
 8005bdc:	6054      	str	r4, [r2, #4]
 8005bde:	e7ca      	b.n	8005b76 <_free_r+0x22>
 8005be0:	bd38      	pop	{r3, r4, r5, pc}
 8005be2:	bf00      	nop
 8005be4:	20025b90 	.word	0x20025b90

08005be8 <sbrk_aligned>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	4e0f      	ldr	r6, [pc, #60]	@ (8005c28 <sbrk_aligned+0x40>)
 8005bec:	460c      	mov	r4, r1
 8005bee:	6831      	ldr	r1, [r6, #0]
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	b911      	cbnz	r1, 8005bfa <sbrk_aligned+0x12>
 8005bf4:	f000 fca6 	bl	8006544 <_sbrk_r>
 8005bf8:	6030      	str	r0, [r6, #0]
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f000 fca1 	bl	8006544 <_sbrk_r>
 8005c02:	1c43      	adds	r3, r0, #1
 8005c04:	d103      	bne.n	8005c0e <sbrk_aligned+0x26>
 8005c06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	bd70      	pop	{r4, r5, r6, pc}
 8005c0e:	1cc4      	adds	r4, r0, #3
 8005c10:	f024 0403 	bic.w	r4, r4, #3
 8005c14:	42a0      	cmp	r0, r4
 8005c16:	d0f8      	beq.n	8005c0a <sbrk_aligned+0x22>
 8005c18:	1a21      	subs	r1, r4, r0
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 fc92 	bl	8006544 <_sbrk_r>
 8005c20:	3001      	adds	r0, #1
 8005c22:	d1f2      	bne.n	8005c0a <sbrk_aligned+0x22>
 8005c24:	e7ef      	b.n	8005c06 <sbrk_aligned+0x1e>
 8005c26:	bf00      	nop
 8005c28:	20025b8c 	.word	0x20025b8c

08005c2c <_malloc_r>:
 8005c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c30:	1ccd      	adds	r5, r1, #3
 8005c32:	f025 0503 	bic.w	r5, r5, #3
 8005c36:	3508      	adds	r5, #8
 8005c38:	2d0c      	cmp	r5, #12
 8005c3a:	bf38      	it	cc
 8005c3c:	250c      	movcc	r5, #12
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	4606      	mov	r6, r0
 8005c42:	db01      	blt.n	8005c48 <_malloc_r+0x1c>
 8005c44:	42a9      	cmp	r1, r5
 8005c46:	d904      	bls.n	8005c52 <_malloc_r+0x26>
 8005c48:	230c      	movs	r3, #12
 8005c4a:	6033      	str	r3, [r6, #0]
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d28 <_malloc_r+0xfc>
 8005c56:	f000 f869 	bl	8005d2c <__malloc_lock>
 8005c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c5e:	461c      	mov	r4, r3
 8005c60:	bb44      	cbnz	r4, 8005cb4 <_malloc_r+0x88>
 8005c62:	4629      	mov	r1, r5
 8005c64:	4630      	mov	r0, r6
 8005c66:	f7ff ffbf 	bl	8005be8 <sbrk_aligned>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	d158      	bne.n	8005d22 <_malloc_r+0xf6>
 8005c70:	f8d8 4000 	ldr.w	r4, [r8]
 8005c74:	4627      	mov	r7, r4
 8005c76:	2f00      	cmp	r7, #0
 8005c78:	d143      	bne.n	8005d02 <_malloc_r+0xd6>
 8005c7a:	2c00      	cmp	r4, #0
 8005c7c:	d04b      	beq.n	8005d16 <_malloc_r+0xea>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	4639      	mov	r1, r7
 8005c82:	4630      	mov	r0, r6
 8005c84:	eb04 0903 	add.w	r9, r4, r3
 8005c88:	f000 fc5c 	bl	8006544 <_sbrk_r>
 8005c8c:	4581      	cmp	r9, r0
 8005c8e:	d142      	bne.n	8005d16 <_malloc_r+0xea>
 8005c90:	6821      	ldr	r1, [r4, #0]
 8005c92:	1a6d      	subs	r5, r5, r1
 8005c94:	4629      	mov	r1, r5
 8005c96:	4630      	mov	r0, r6
 8005c98:	f7ff ffa6 	bl	8005be8 <sbrk_aligned>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d03a      	beq.n	8005d16 <_malloc_r+0xea>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	442b      	add	r3, r5
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	bb62      	cbnz	r2, 8005d08 <_malloc_r+0xdc>
 8005cae:	f8c8 7000 	str.w	r7, [r8]
 8005cb2:	e00f      	b.n	8005cd4 <_malloc_r+0xa8>
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	1b52      	subs	r2, r2, r5
 8005cb8:	d420      	bmi.n	8005cfc <_malloc_r+0xd0>
 8005cba:	2a0b      	cmp	r2, #11
 8005cbc:	d917      	bls.n	8005cee <_malloc_r+0xc2>
 8005cbe:	1961      	adds	r1, r4, r5
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	6025      	str	r5, [r4, #0]
 8005cc4:	bf18      	it	ne
 8005cc6:	6059      	strne	r1, [r3, #4]
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	bf08      	it	eq
 8005ccc:	f8c8 1000 	streq.w	r1, [r8]
 8005cd0:	5162      	str	r2, [r4, r5]
 8005cd2:	604b      	str	r3, [r1, #4]
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f000 f82f 	bl	8005d38 <__malloc_unlock>
 8005cda:	f104 000b 	add.w	r0, r4, #11
 8005cde:	1d23      	adds	r3, r4, #4
 8005ce0:	f020 0007 	bic.w	r0, r0, #7
 8005ce4:	1ac2      	subs	r2, r0, r3
 8005ce6:	bf1c      	itt	ne
 8005ce8:	1a1b      	subne	r3, r3, r0
 8005cea:	50a3      	strne	r3, [r4, r2]
 8005cec:	e7af      	b.n	8005c4e <_malloc_r+0x22>
 8005cee:	6862      	ldr	r2, [r4, #4]
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	bf0c      	ite	eq
 8005cf4:	f8c8 2000 	streq.w	r2, [r8]
 8005cf8:	605a      	strne	r2, [r3, #4]
 8005cfa:	e7eb      	b.n	8005cd4 <_malloc_r+0xa8>
 8005cfc:	4623      	mov	r3, r4
 8005cfe:	6864      	ldr	r4, [r4, #4]
 8005d00:	e7ae      	b.n	8005c60 <_malloc_r+0x34>
 8005d02:	463c      	mov	r4, r7
 8005d04:	687f      	ldr	r7, [r7, #4]
 8005d06:	e7b6      	b.n	8005c76 <_malloc_r+0x4a>
 8005d08:	461a      	mov	r2, r3
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	42a3      	cmp	r3, r4
 8005d0e:	d1fb      	bne.n	8005d08 <_malloc_r+0xdc>
 8005d10:	2300      	movs	r3, #0
 8005d12:	6053      	str	r3, [r2, #4]
 8005d14:	e7de      	b.n	8005cd4 <_malloc_r+0xa8>
 8005d16:	230c      	movs	r3, #12
 8005d18:	6033      	str	r3, [r6, #0]
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f000 f80c 	bl	8005d38 <__malloc_unlock>
 8005d20:	e794      	b.n	8005c4c <_malloc_r+0x20>
 8005d22:	6005      	str	r5, [r0, #0]
 8005d24:	e7d6      	b.n	8005cd4 <_malloc_r+0xa8>
 8005d26:	bf00      	nop
 8005d28:	20025b90 	.word	0x20025b90

08005d2c <__malloc_lock>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	@ (8005d34 <__malloc_lock+0x8>)
 8005d2e:	f7ff bf0e 	b.w	8005b4e <__retarget_lock_acquire_recursive>
 8005d32:	bf00      	nop
 8005d34:	20025b88 	.word	0x20025b88

08005d38 <__malloc_unlock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	@ (8005d40 <__malloc_unlock+0x8>)
 8005d3a:	f7ff bf09 	b.w	8005b50 <__retarget_lock_release_recursive>
 8005d3e:	bf00      	nop
 8005d40:	20025b88 	.word	0x20025b88

08005d44 <__sfputc_r>:
 8005d44:	6893      	ldr	r3, [r2, #8]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	b410      	push	{r4}
 8005d4c:	6093      	str	r3, [r2, #8]
 8005d4e:	da08      	bge.n	8005d62 <__sfputc_r+0x1e>
 8005d50:	6994      	ldr	r4, [r2, #24]
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	db01      	blt.n	8005d5a <__sfputc_r+0x16>
 8005d56:	290a      	cmp	r1, #10
 8005d58:	d103      	bne.n	8005d62 <__sfputc_r+0x1e>
 8005d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d5e:	f7ff bde8 	b.w	8005932 <__swbuf_r>
 8005d62:	6813      	ldr	r3, [r2, #0]
 8005d64:	1c58      	adds	r0, r3, #1
 8005d66:	6010      	str	r0, [r2, #0]
 8005d68:	7019      	strb	r1, [r3, #0]
 8005d6a:	4608      	mov	r0, r1
 8005d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <__sfputs_r>:
 8005d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d74:	4606      	mov	r6, r0
 8005d76:	460f      	mov	r7, r1
 8005d78:	4614      	mov	r4, r2
 8005d7a:	18d5      	adds	r5, r2, r3
 8005d7c:	42ac      	cmp	r4, r5
 8005d7e:	d101      	bne.n	8005d84 <__sfputs_r+0x12>
 8005d80:	2000      	movs	r0, #0
 8005d82:	e007      	b.n	8005d94 <__sfputs_r+0x22>
 8005d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d88:	463a      	mov	r2, r7
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f7ff ffda 	bl	8005d44 <__sfputc_r>
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d1f3      	bne.n	8005d7c <__sfputs_r+0xa>
 8005d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d98 <_vfiprintf_r>:
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	460d      	mov	r5, r1
 8005d9e:	b09d      	sub	sp, #116	@ 0x74
 8005da0:	4614      	mov	r4, r2
 8005da2:	4698      	mov	r8, r3
 8005da4:	4606      	mov	r6, r0
 8005da6:	b118      	cbz	r0, 8005db0 <_vfiprintf_r+0x18>
 8005da8:	6a03      	ldr	r3, [r0, #32]
 8005daa:	b90b      	cbnz	r3, 8005db0 <_vfiprintf_r+0x18>
 8005dac:	f7ff fcd8 	bl	8005760 <__sinit>
 8005db0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005db2:	07d9      	lsls	r1, r3, #31
 8005db4:	d405      	bmi.n	8005dc2 <_vfiprintf_r+0x2a>
 8005db6:	89ab      	ldrh	r3, [r5, #12]
 8005db8:	059a      	lsls	r2, r3, #22
 8005dba:	d402      	bmi.n	8005dc2 <_vfiprintf_r+0x2a>
 8005dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dbe:	f7ff fec6 	bl	8005b4e <__retarget_lock_acquire_recursive>
 8005dc2:	89ab      	ldrh	r3, [r5, #12]
 8005dc4:	071b      	lsls	r3, r3, #28
 8005dc6:	d501      	bpl.n	8005dcc <_vfiprintf_r+0x34>
 8005dc8:	692b      	ldr	r3, [r5, #16]
 8005dca:	b99b      	cbnz	r3, 8005df4 <_vfiprintf_r+0x5c>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f7ff fdee 	bl	80059b0 <__swsetup_r>
 8005dd4:	b170      	cbz	r0, 8005df4 <_vfiprintf_r+0x5c>
 8005dd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dd8:	07dc      	lsls	r4, r3, #31
 8005dda:	d504      	bpl.n	8005de6 <_vfiprintf_r+0x4e>
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005de0:	b01d      	add	sp, #116	@ 0x74
 8005de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de6:	89ab      	ldrh	r3, [r5, #12]
 8005de8:	0598      	lsls	r0, r3, #22
 8005dea:	d4f7      	bmi.n	8005ddc <_vfiprintf_r+0x44>
 8005dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dee:	f7ff feaf 	bl	8005b50 <__retarget_lock_release_recursive>
 8005df2:	e7f3      	b.n	8005ddc <_vfiprintf_r+0x44>
 8005df4:	2300      	movs	r3, #0
 8005df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005df8:	2320      	movs	r3, #32
 8005dfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e02:	2330      	movs	r3, #48	@ 0x30
 8005e04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fb4 <_vfiprintf_r+0x21c>
 8005e08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e0c:	f04f 0901 	mov.w	r9, #1
 8005e10:	4623      	mov	r3, r4
 8005e12:	469a      	mov	sl, r3
 8005e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e18:	b10a      	cbz	r2, 8005e1e <_vfiprintf_r+0x86>
 8005e1a:	2a25      	cmp	r2, #37	@ 0x25
 8005e1c:	d1f9      	bne.n	8005e12 <_vfiprintf_r+0x7a>
 8005e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e22:	d00b      	beq.n	8005e3c <_vfiprintf_r+0xa4>
 8005e24:	465b      	mov	r3, fp
 8005e26:	4622      	mov	r2, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f7ff ffa1 	bl	8005d72 <__sfputs_r>
 8005e30:	3001      	adds	r0, #1
 8005e32:	f000 80a7 	beq.w	8005f84 <_vfiprintf_r+0x1ec>
 8005e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e38:	445a      	add	r2, fp
 8005e3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 809f 	beq.w	8005f84 <_vfiprintf_r+0x1ec>
 8005e46:	2300      	movs	r3, #0
 8005e48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e50:	f10a 0a01 	add.w	sl, sl, #1
 8005e54:	9304      	str	r3, [sp, #16]
 8005e56:	9307      	str	r3, [sp, #28]
 8005e58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e5e:	4654      	mov	r4, sl
 8005e60:	2205      	movs	r2, #5
 8005e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e66:	4853      	ldr	r0, [pc, #332]	@ (8005fb4 <_vfiprintf_r+0x21c>)
 8005e68:	f7fa f9c2 	bl	80001f0 <memchr>
 8005e6c:	9a04      	ldr	r2, [sp, #16]
 8005e6e:	b9d8      	cbnz	r0, 8005ea8 <_vfiprintf_r+0x110>
 8005e70:	06d1      	lsls	r1, r2, #27
 8005e72:	bf44      	itt	mi
 8005e74:	2320      	movmi	r3, #32
 8005e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e7a:	0713      	lsls	r3, r2, #28
 8005e7c:	bf44      	itt	mi
 8005e7e:	232b      	movmi	r3, #43	@ 0x2b
 8005e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e84:	f89a 3000 	ldrb.w	r3, [sl]
 8005e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e8a:	d015      	beq.n	8005eb8 <_vfiprintf_r+0x120>
 8005e8c:	9a07      	ldr	r2, [sp, #28]
 8005e8e:	4654      	mov	r4, sl
 8005e90:	2000      	movs	r0, #0
 8005e92:	f04f 0c0a 	mov.w	ip, #10
 8005e96:	4621      	mov	r1, r4
 8005e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e9c:	3b30      	subs	r3, #48	@ 0x30
 8005e9e:	2b09      	cmp	r3, #9
 8005ea0:	d94b      	bls.n	8005f3a <_vfiprintf_r+0x1a2>
 8005ea2:	b1b0      	cbz	r0, 8005ed2 <_vfiprintf_r+0x13a>
 8005ea4:	9207      	str	r2, [sp, #28]
 8005ea6:	e014      	b.n	8005ed2 <_vfiprintf_r+0x13a>
 8005ea8:	eba0 0308 	sub.w	r3, r0, r8
 8005eac:	fa09 f303 	lsl.w	r3, r9, r3
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	9304      	str	r3, [sp, #16]
 8005eb4:	46a2      	mov	sl, r4
 8005eb6:	e7d2      	b.n	8005e5e <_vfiprintf_r+0xc6>
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	1d19      	adds	r1, r3, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	9103      	str	r1, [sp, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bfbb      	ittet	lt
 8005ec4:	425b      	neglt	r3, r3
 8005ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8005eca:	9307      	strge	r3, [sp, #28]
 8005ecc:	9307      	strlt	r3, [sp, #28]
 8005ece:	bfb8      	it	lt
 8005ed0:	9204      	strlt	r2, [sp, #16]
 8005ed2:	7823      	ldrb	r3, [r4, #0]
 8005ed4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ed6:	d10a      	bne.n	8005eee <_vfiprintf_r+0x156>
 8005ed8:	7863      	ldrb	r3, [r4, #1]
 8005eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8005edc:	d132      	bne.n	8005f44 <_vfiprintf_r+0x1ac>
 8005ede:	9b03      	ldr	r3, [sp, #12]
 8005ee0:	1d1a      	adds	r2, r3, #4
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	9203      	str	r2, [sp, #12]
 8005ee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005eea:	3402      	adds	r4, #2
 8005eec:	9305      	str	r3, [sp, #20]
 8005eee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fc4 <_vfiprintf_r+0x22c>
 8005ef2:	7821      	ldrb	r1, [r4, #0]
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	4650      	mov	r0, sl
 8005ef8:	f7fa f97a 	bl	80001f0 <memchr>
 8005efc:	b138      	cbz	r0, 8005f0e <_vfiprintf_r+0x176>
 8005efe:	9b04      	ldr	r3, [sp, #16]
 8005f00:	eba0 000a 	sub.w	r0, r0, sl
 8005f04:	2240      	movs	r2, #64	@ 0x40
 8005f06:	4082      	lsls	r2, r0
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	3401      	adds	r4, #1
 8005f0c:	9304      	str	r3, [sp, #16]
 8005f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f12:	4829      	ldr	r0, [pc, #164]	@ (8005fb8 <_vfiprintf_r+0x220>)
 8005f14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f18:	2206      	movs	r2, #6
 8005f1a:	f7fa f969 	bl	80001f0 <memchr>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d03f      	beq.n	8005fa2 <_vfiprintf_r+0x20a>
 8005f22:	4b26      	ldr	r3, [pc, #152]	@ (8005fbc <_vfiprintf_r+0x224>)
 8005f24:	bb1b      	cbnz	r3, 8005f6e <_vfiprintf_r+0x1d6>
 8005f26:	9b03      	ldr	r3, [sp, #12]
 8005f28:	3307      	adds	r3, #7
 8005f2a:	f023 0307 	bic.w	r3, r3, #7
 8005f2e:	3308      	adds	r3, #8
 8005f30:	9303      	str	r3, [sp, #12]
 8005f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f34:	443b      	add	r3, r7
 8005f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f38:	e76a      	b.n	8005e10 <_vfiprintf_r+0x78>
 8005f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f3e:	460c      	mov	r4, r1
 8005f40:	2001      	movs	r0, #1
 8005f42:	e7a8      	b.n	8005e96 <_vfiprintf_r+0xfe>
 8005f44:	2300      	movs	r3, #0
 8005f46:	3401      	adds	r4, #1
 8005f48:	9305      	str	r3, [sp, #20]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	f04f 0c0a 	mov.w	ip, #10
 8005f50:	4620      	mov	r0, r4
 8005f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f56:	3a30      	subs	r2, #48	@ 0x30
 8005f58:	2a09      	cmp	r2, #9
 8005f5a:	d903      	bls.n	8005f64 <_vfiprintf_r+0x1cc>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0c6      	beq.n	8005eee <_vfiprintf_r+0x156>
 8005f60:	9105      	str	r1, [sp, #20]
 8005f62:	e7c4      	b.n	8005eee <_vfiprintf_r+0x156>
 8005f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f68:	4604      	mov	r4, r0
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e7f0      	b.n	8005f50 <_vfiprintf_r+0x1b8>
 8005f6e:	ab03      	add	r3, sp, #12
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	462a      	mov	r2, r5
 8005f74:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <_vfiprintf_r+0x228>)
 8005f76:	a904      	add	r1, sp, #16
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f3af 8000 	nop.w
 8005f7e:	4607      	mov	r7, r0
 8005f80:	1c78      	adds	r0, r7, #1
 8005f82:	d1d6      	bne.n	8005f32 <_vfiprintf_r+0x19a>
 8005f84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f86:	07d9      	lsls	r1, r3, #31
 8005f88:	d405      	bmi.n	8005f96 <_vfiprintf_r+0x1fe>
 8005f8a:	89ab      	ldrh	r3, [r5, #12]
 8005f8c:	059a      	lsls	r2, r3, #22
 8005f8e:	d402      	bmi.n	8005f96 <_vfiprintf_r+0x1fe>
 8005f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f92:	f7ff fddd 	bl	8005b50 <__retarget_lock_release_recursive>
 8005f96:	89ab      	ldrh	r3, [r5, #12]
 8005f98:	065b      	lsls	r3, r3, #25
 8005f9a:	f53f af1f 	bmi.w	8005ddc <_vfiprintf_r+0x44>
 8005f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fa0:	e71e      	b.n	8005de0 <_vfiprintf_r+0x48>
 8005fa2:	ab03      	add	r3, sp, #12
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	462a      	mov	r2, r5
 8005fa8:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <_vfiprintf_r+0x228>)
 8005faa:	a904      	add	r1, sp, #16
 8005fac:	4630      	mov	r0, r6
 8005fae:	f000 f879 	bl	80060a4 <_printf_i>
 8005fb2:	e7e4      	b.n	8005f7e <_vfiprintf_r+0x1e6>
 8005fb4:	080077b8 	.word	0x080077b8
 8005fb8:	080077c2 	.word	0x080077c2
 8005fbc:	00000000 	.word	0x00000000
 8005fc0:	08005d73 	.word	0x08005d73
 8005fc4:	080077be 	.word	0x080077be

08005fc8 <_printf_common>:
 8005fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	4616      	mov	r6, r2
 8005fce:	4698      	mov	r8, r3
 8005fd0:	688a      	ldr	r2, [r1, #8]
 8005fd2:	690b      	ldr	r3, [r1, #16]
 8005fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	bfb8      	it	lt
 8005fdc:	4613      	movlt	r3, r2
 8005fde:	6033      	str	r3, [r6, #0]
 8005fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	b10a      	cbz	r2, 8005fee <_printf_common+0x26>
 8005fea:	3301      	adds	r3, #1
 8005fec:	6033      	str	r3, [r6, #0]
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	0699      	lsls	r1, r3, #26
 8005ff2:	bf42      	ittt	mi
 8005ff4:	6833      	ldrmi	r3, [r6, #0]
 8005ff6:	3302      	addmi	r3, #2
 8005ff8:	6033      	strmi	r3, [r6, #0]
 8005ffa:	6825      	ldr	r5, [r4, #0]
 8005ffc:	f015 0506 	ands.w	r5, r5, #6
 8006000:	d106      	bne.n	8006010 <_printf_common+0x48>
 8006002:	f104 0a19 	add.w	sl, r4, #25
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	6832      	ldr	r2, [r6, #0]
 800600a:	1a9b      	subs	r3, r3, r2
 800600c:	42ab      	cmp	r3, r5
 800600e:	dc26      	bgt.n	800605e <_printf_common+0x96>
 8006010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006014:	6822      	ldr	r2, [r4, #0]
 8006016:	3b00      	subs	r3, #0
 8006018:	bf18      	it	ne
 800601a:	2301      	movne	r3, #1
 800601c:	0692      	lsls	r2, r2, #26
 800601e:	d42b      	bmi.n	8006078 <_printf_common+0xb0>
 8006020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006024:	4641      	mov	r1, r8
 8006026:	4638      	mov	r0, r7
 8006028:	47c8      	blx	r9
 800602a:	3001      	adds	r0, #1
 800602c:	d01e      	beq.n	800606c <_printf_common+0xa4>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	6922      	ldr	r2, [r4, #16]
 8006032:	f003 0306 	and.w	r3, r3, #6
 8006036:	2b04      	cmp	r3, #4
 8006038:	bf02      	ittt	eq
 800603a:	68e5      	ldreq	r5, [r4, #12]
 800603c:	6833      	ldreq	r3, [r6, #0]
 800603e:	1aed      	subeq	r5, r5, r3
 8006040:	68a3      	ldr	r3, [r4, #8]
 8006042:	bf0c      	ite	eq
 8006044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006048:	2500      	movne	r5, #0
 800604a:	4293      	cmp	r3, r2
 800604c:	bfc4      	itt	gt
 800604e:	1a9b      	subgt	r3, r3, r2
 8006050:	18ed      	addgt	r5, r5, r3
 8006052:	2600      	movs	r6, #0
 8006054:	341a      	adds	r4, #26
 8006056:	42b5      	cmp	r5, r6
 8006058:	d11a      	bne.n	8006090 <_printf_common+0xc8>
 800605a:	2000      	movs	r0, #0
 800605c:	e008      	b.n	8006070 <_printf_common+0xa8>
 800605e:	2301      	movs	r3, #1
 8006060:	4652      	mov	r2, sl
 8006062:	4641      	mov	r1, r8
 8006064:	4638      	mov	r0, r7
 8006066:	47c8      	blx	r9
 8006068:	3001      	adds	r0, #1
 800606a:	d103      	bne.n	8006074 <_printf_common+0xac>
 800606c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006074:	3501      	adds	r5, #1
 8006076:	e7c6      	b.n	8006006 <_printf_common+0x3e>
 8006078:	18e1      	adds	r1, r4, r3
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	2030      	movs	r0, #48	@ 0x30
 800607e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006082:	4422      	add	r2, r4
 8006084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800608c:	3302      	adds	r3, #2
 800608e:	e7c7      	b.n	8006020 <_printf_common+0x58>
 8006090:	2301      	movs	r3, #1
 8006092:	4622      	mov	r2, r4
 8006094:	4641      	mov	r1, r8
 8006096:	4638      	mov	r0, r7
 8006098:	47c8      	blx	r9
 800609a:	3001      	adds	r0, #1
 800609c:	d0e6      	beq.n	800606c <_printf_common+0xa4>
 800609e:	3601      	adds	r6, #1
 80060a0:	e7d9      	b.n	8006056 <_printf_common+0x8e>
	...

080060a4 <_printf_i>:
 80060a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	7e0f      	ldrb	r7, [r1, #24]
 80060aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060ac:	2f78      	cmp	r7, #120	@ 0x78
 80060ae:	4691      	mov	r9, r2
 80060b0:	4680      	mov	r8, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	469a      	mov	sl, r3
 80060b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ba:	d807      	bhi.n	80060cc <_printf_i+0x28>
 80060bc:	2f62      	cmp	r7, #98	@ 0x62
 80060be:	d80a      	bhi.n	80060d6 <_printf_i+0x32>
 80060c0:	2f00      	cmp	r7, #0
 80060c2:	f000 80d2 	beq.w	800626a <_printf_i+0x1c6>
 80060c6:	2f58      	cmp	r7, #88	@ 0x58
 80060c8:	f000 80b9 	beq.w	800623e <_printf_i+0x19a>
 80060cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060d4:	e03a      	b.n	800614c <_printf_i+0xa8>
 80060d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060da:	2b15      	cmp	r3, #21
 80060dc:	d8f6      	bhi.n	80060cc <_printf_i+0x28>
 80060de:	a101      	add	r1, pc, #4	@ (adr r1, 80060e4 <_printf_i+0x40>)
 80060e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e4:	0800613d 	.word	0x0800613d
 80060e8:	08006151 	.word	0x08006151
 80060ec:	080060cd 	.word	0x080060cd
 80060f0:	080060cd 	.word	0x080060cd
 80060f4:	080060cd 	.word	0x080060cd
 80060f8:	080060cd 	.word	0x080060cd
 80060fc:	08006151 	.word	0x08006151
 8006100:	080060cd 	.word	0x080060cd
 8006104:	080060cd 	.word	0x080060cd
 8006108:	080060cd 	.word	0x080060cd
 800610c:	080060cd 	.word	0x080060cd
 8006110:	08006251 	.word	0x08006251
 8006114:	0800617b 	.word	0x0800617b
 8006118:	0800620b 	.word	0x0800620b
 800611c:	080060cd 	.word	0x080060cd
 8006120:	080060cd 	.word	0x080060cd
 8006124:	08006273 	.word	0x08006273
 8006128:	080060cd 	.word	0x080060cd
 800612c:	0800617b 	.word	0x0800617b
 8006130:	080060cd 	.word	0x080060cd
 8006134:	080060cd 	.word	0x080060cd
 8006138:	08006213 	.word	0x08006213
 800613c:	6833      	ldr	r3, [r6, #0]
 800613e:	1d1a      	adds	r2, r3, #4
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6032      	str	r2, [r6, #0]
 8006144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800614c:	2301      	movs	r3, #1
 800614e:	e09d      	b.n	800628c <_printf_i+0x1e8>
 8006150:	6833      	ldr	r3, [r6, #0]
 8006152:	6820      	ldr	r0, [r4, #0]
 8006154:	1d19      	adds	r1, r3, #4
 8006156:	6031      	str	r1, [r6, #0]
 8006158:	0606      	lsls	r6, r0, #24
 800615a:	d501      	bpl.n	8006160 <_printf_i+0xbc>
 800615c:	681d      	ldr	r5, [r3, #0]
 800615e:	e003      	b.n	8006168 <_printf_i+0xc4>
 8006160:	0645      	lsls	r5, r0, #25
 8006162:	d5fb      	bpl.n	800615c <_printf_i+0xb8>
 8006164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006168:	2d00      	cmp	r5, #0
 800616a:	da03      	bge.n	8006174 <_printf_i+0xd0>
 800616c:	232d      	movs	r3, #45	@ 0x2d
 800616e:	426d      	negs	r5, r5
 8006170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006174:	4859      	ldr	r0, [pc, #356]	@ (80062dc <_printf_i+0x238>)
 8006176:	230a      	movs	r3, #10
 8006178:	e011      	b.n	800619e <_printf_i+0xfa>
 800617a:	6821      	ldr	r1, [r4, #0]
 800617c:	6833      	ldr	r3, [r6, #0]
 800617e:	0608      	lsls	r0, r1, #24
 8006180:	f853 5b04 	ldr.w	r5, [r3], #4
 8006184:	d402      	bmi.n	800618c <_printf_i+0xe8>
 8006186:	0649      	lsls	r1, r1, #25
 8006188:	bf48      	it	mi
 800618a:	b2ad      	uxthmi	r5, r5
 800618c:	2f6f      	cmp	r7, #111	@ 0x6f
 800618e:	4853      	ldr	r0, [pc, #332]	@ (80062dc <_printf_i+0x238>)
 8006190:	6033      	str	r3, [r6, #0]
 8006192:	bf14      	ite	ne
 8006194:	230a      	movne	r3, #10
 8006196:	2308      	moveq	r3, #8
 8006198:	2100      	movs	r1, #0
 800619a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800619e:	6866      	ldr	r6, [r4, #4]
 80061a0:	60a6      	str	r6, [r4, #8]
 80061a2:	2e00      	cmp	r6, #0
 80061a4:	bfa2      	ittt	ge
 80061a6:	6821      	ldrge	r1, [r4, #0]
 80061a8:	f021 0104 	bicge.w	r1, r1, #4
 80061ac:	6021      	strge	r1, [r4, #0]
 80061ae:	b90d      	cbnz	r5, 80061b4 <_printf_i+0x110>
 80061b0:	2e00      	cmp	r6, #0
 80061b2:	d04b      	beq.n	800624c <_printf_i+0x1a8>
 80061b4:	4616      	mov	r6, r2
 80061b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061ba:	fb03 5711 	mls	r7, r3, r1, r5
 80061be:	5dc7      	ldrb	r7, [r0, r7]
 80061c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061c4:	462f      	mov	r7, r5
 80061c6:	42bb      	cmp	r3, r7
 80061c8:	460d      	mov	r5, r1
 80061ca:	d9f4      	bls.n	80061b6 <_printf_i+0x112>
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d10b      	bne.n	80061e8 <_printf_i+0x144>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	07df      	lsls	r7, r3, #31
 80061d4:	d508      	bpl.n	80061e8 <_printf_i+0x144>
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	6861      	ldr	r1, [r4, #4]
 80061da:	4299      	cmp	r1, r3
 80061dc:	bfde      	ittt	le
 80061de:	2330      	movle	r3, #48	@ 0x30
 80061e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061e4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80061e8:	1b92      	subs	r2, r2, r6
 80061ea:	6122      	str	r2, [r4, #16]
 80061ec:	f8cd a000 	str.w	sl, [sp]
 80061f0:	464b      	mov	r3, r9
 80061f2:	aa03      	add	r2, sp, #12
 80061f4:	4621      	mov	r1, r4
 80061f6:	4640      	mov	r0, r8
 80061f8:	f7ff fee6 	bl	8005fc8 <_printf_common>
 80061fc:	3001      	adds	r0, #1
 80061fe:	d14a      	bne.n	8006296 <_printf_i+0x1f2>
 8006200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006204:	b004      	add	sp, #16
 8006206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	f043 0320 	orr.w	r3, r3, #32
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	4833      	ldr	r0, [pc, #204]	@ (80062e0 <_printf_i+0x23c>)
 8006214:	2778      	movs	r7, #120	@ 0x78
 8006216:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	6831      	ldr	r1, [r6, #0]
 800621e:	061f      	lsls	r7, r3, #24
 8006220:	f851 5b04 	ldr.w	r5, [r1], #4
 8006224:	d402      	bmi.n	800622c <_printf_i+0x188>
 8006226:	065f      	lsls	r7, r3, #25
 8006228:	bf48      	it	mi
 800622a:	b2ad      	uxthmi	r5, r5
 800622c:	6031      	str	r1, [r6, #0]
 800622e:	07d9      	lsls	r1, r3, #31
 8006230:	bf44      	itt	mi
 8006232:	f043 0320 	orrmi.w	r3, r3, #32
 8006236:	6023      	strmi	r3, [r4, #0]
 8006238:	b11d      	cbz	r5, 8006242 <_printf_i+0x19e>
 800623a:	2310      	movs	r3, #16
 800623c:	e7ac      	b.n	8006198 <_printf_i+0xf4>
 800623e:	4827      	ldr	r0, [pc, #156]	@ (80062dc <_printf_i+0x238>)
 8006240:	e7e9      	b.n	8006216 <_printf_i+0x172>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	f023 0320 	bic.w	r3, r3, #32
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	e7f6      	b.n	800623a <_printf_i+0x196>
 800624c:	4616      	mov	r6, r2
 800624e:	e7bd      	b.n	80061cc <_printf_i+0x128>
 8006250:	6833      	ldr	r3, [r6, #0]
 8006252:	6825      	ldr	r5, [r4, #0]
 8006254:	6961      	ldr	r1, [r4, #20]
 8006256:	1d18      	adds	r0, r3, #4
 8006258:	6030      	str	r0, [r6, #0]
 800625a:	062e      	lsls	r6, r5, #24
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	d501      	bpl.n	8006264 <_printf_i+0x1c0>
 8006260:	6019      	str	r1, [r3, #0]
 8006262:	e002      	b.n	800626a <_printf_i+0x1c6>
 8006264:	0668      	lsls	r0, r5, #25
 8006266:	d5fb      	bpl.n	8006260 <_printf_i+0x1bc>
 8006268:	8019      	strh	r1, [r3, #0]
 800626a:	2300      	movs	r3, #0
 800626c:	6123      	str	r3, [r4, #16]
 800626e:	4616      	mov	r6, r2
 8006270:	e7bc      	b.n	80061ec <_printf_i+0x148>
 8006272:	6833      	ldr	r3, [r6, #0]
 8006274:	1d1a      	adds	r2, r3, #4
 8006276:	6032      	str	r2, [r6, #0]
 8006278:	681e      	ldr	r6, [r3, #0]
 800627a:	6862      	ldr	r2, [r4, #4]
 800627c:	2100      	movs	r1, #0
 800627e:	4630      	mov	r0, r6
 8006280:	f7f9 ffb6 	bl	80001f0 <memchr>
 8006284:	b108      	cbz	r0, 800628a <_printf_i+0x1e6>
 8006286:	1b80      	subs	r0, r0, r6
 8006288:	6060      	str	r0, [r4, #4]
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	6123      	str	r3, [r4, #16]
 800628e:	2300      	movs	r3, #0
 8006290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006294:	e7aa      	b.n	80061ec <_printf_i+0x148>
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	4632      	mov	r2, r6
 800629a:	4649      	mov	r1, r9
 800629c:	4640      	mov	r0, r8
 800629e:	47d0      	blx	sl
 80062a0:	3001      	adds	r0, #1
 80062a2:	d0ad      	beq.n	8006200 <_printf_i+0x15c>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	079b      	lsls	r3, r3, #30
 80062a8:	d413      	bmi.n	80062d2 <_printf_i+0x22e>
 80062aa:	68e0      	ldr	r0, [r4, #12]
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	4298      	cmp	r0, r3
 80062b0:	bfb8      	it	lt
 80062b2:	4618      	movlt	r0, r3
 80062b4:	e7a6      	b.n	8006204 <_printf_i+0x160>
 80062b6:	2301      	movs	r3, #1
 80062b8:	4632      	mov	r2, r6
 80062ba:	4649      	mov	r1, r9
 80062bc:	4640      	mov	r0, r8
 80062be:	47d0      	blx	sl
 80062c0:	3001      	adds	r0, #1
 80062c2:	d09d      	beq.n	8006200 <_printf_i+0x15c>
 80062c4:	3501      	adds	r5, #1
 80062c6:	68e3      	ldr	r3, [r4, #12]
 80062c8:	9903      	ldr	r1, [sp, #12]
 80062ca:	1a5b      	subs	r3, r3, r1
 80062cc:	42ab      	cmp	r3, r5
 80062ce:	dcf2      	bgt.n	80062b6 <_printf_i+0x212>
 80062d0:	e7eb      	b.n	80062aa <_printf_i+0x206>
 80062d2:	2500      	movs	r5, #0
 80062d4:	f104 0619 	add.w	r6, r4, #25
 80062d8:	e7f5      	b.n	80062c6 <_printf_i+0x222>
 80062da:	bf00      	nop
 80062dc:	080077c9 	.word	0x080077c9
 80062e0:	080077da 	.word	0x080077da

080062e4 <__sflush_r>:
 80062e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ec:	0716      	lsls	r6, r2, #28
 80062ee:	4605      	mov	r5, r0
 80062f0:	460c      	mov	r4, r1
 80062f2:	d454      	bmi.n	800639e <__sflush_r+0xba>
 80062f4:	684b      	ldr	r3, [r1, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dc02      	bgt.n	8006300 <__sflush_r+0x1c>
 80062fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	dd48      	ble.n	8006392 <__sflush_r+0xae>
 8006300:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006302:	2e00      	cmp	r6, #0
 8006304:	d045      	beq.n	8006392 <__sflush_r+0xae>
 8006306:	2300      	movs	r3, #0
 8006308:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800630c:	682f      	ldr	r7, [r5, #0]
 800630e:	6a21      	ldr	r1, [r4, #32]
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	d030      	beq.n	8006376 <__sflush_r+0x92>
 8006314:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006316:	89a3      	ldrh	r3, [r4, #12]
 8006318:	0759      	lsls	r1, r3, #29
 800631a:	d505      	bpl.n	8006328 <__sflush_r+0x44>
 800631c:	6863      	ldr	r3, [r4, #4]
 800631e:	1ad2      	subs	r2, r2, r3
 8006320:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006322:	b10b      	cbz	r3, 8006328 <__sflush_r+0x44>
 8006324:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006326:	1ad2      	subs	r2, r2, r3
 8006328:	2300      	movs	r3, #0
 800632a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800632c:	6a21      	ldr	r1, [r4, #32]
 800632e:	4628      	mov	r0, r5
 8006330:	47b0      	blx	r6
 8006332:	1c43      	adds	r3, r0, #1
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	d106      	bne.n	8006346 <__sflush_r+0x62>
 8006338:	6829      	ldr	r1, [r5, #0]
 800633a:	291d      	cmp	r1, #29
 800633c:	d82b      	bhi.n	8006396 <__sflush_r+0xb2>
 800633e:	4a2a      	ldr	r2, [pc, #168]	@ (80063e8 <__sflush_r+0x104>)
 8006340:	410a      	asrs	r2, r1
 8006342:	07d6      	lsls	r6, r2, #31
 8006344:	d427      	bmi.n	8006396 <__sflush_r+0xb2>
 8006346:	2200      	movs	r2, #0
 8006348:	6062      	str	r2, [r4, #4]
 800634a:	04d9      	lsls	r1, r3, #19
 800634c:	6922      	ldr	r2, [r4, #16]
 800634e:	6022      	str	r2, [r4, #0]
 8006350:	d504      	bpl.n	800635c <__sflush_r+0x78>
 8006352:	1c42      	adds	r2, r0, #1
 8006354:	d101      	bne.n	800635a <__sflush_r+0x76>
 8006356:	682b      	ldr	r3, [r5, #0]
 8006358:	b903      	cbnz	r3, 800635c <__sflush_r+0x78>
 800635a:	6560      	str	r0, [r4, #84]	@ 0x54
 800635c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800635e:	602f      	str	r7, [r5, #0]
 8006360:	b1b9      	cbz	r1, 8006392 <__sflush_r+0xae>
 8006362:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006366:	4299      	cmp	r1, r3
 8006368:	d002      	beq.n	8006370 <__sflush_r+0x8c>
 800636a:	4628      	mov	r0, r5
 800636c:	f7ff fbf2 	bl	8005b54 <_free_r>
 8006370:	2300      	movs	r3, #0
 8006372:	6363      	str	r3, [r4, #52]	@ 0x34
 8006374:	e00d      	b.n	8006392 <__sflush_r+0xae>
 8006376:	2301      	movs	r3, #1
 8006378:	4628      	mov	r0, r5
 800637a:	47b0      	blx	r6
 800637c:	4602      	mov	r2, r0
 800637e:	1c50      	adds	r0, r2, #1
 8006380:	d1c9      	bne.n	8006316 <__sflush_r+0x32>
 8006382:	682b      	ldr	r3, [r5, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0c6      	beq.n	8006316 <__sflush_r+0x32>
 8006388:	2b1d      	cmp	r3, #29
 800638a:	d001      	beq.n	8006390 <__sflush_r+0xac>
 800638c:	2b16      	cmp	r3, #22
 800638e:	d11e      	bne.n	80063ce <__sflush_r+0xea>
 8006390:	602f      	str	r7, [r5, #0]
 8006392:	2000      	movs	r0, #0
 8006394:	e022      	b.n	80063dc <__sflush_r+0xf8>
 8006396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800639a:	b21b      	sxth	r3, r3
 800639c:	e01b      	b.n	80063d6 <__sflush_r+0xf2>
 800639e:	690f      	ldr	r7, [r1, #16]
 80063a0:	2f00      	cmp	r7, #0
 80063a2:	d0f6      	beq.n	8006392 <__sflush_r+0xae>
 80063a4:	0793      	lsls	r3, r2, #30
 80063a6:	680e      	ldr	r6, [r1, #0]
 80063a8:	bf08      	it	eq
 80063aa:	694b      	ldreq	r3, [r1, #20]
 80063ac:	600f      	str	r7, [r1, #0]
 80063ae:	bf18      	it	ne
 80063b0:	2300      	movne	r3, #0
 80063b2:	eba6 0807 	sub.w	r8, r6, r7
 80063b6:	608b      	str	r3, [r1, #8]
 80063b8:	f1b8 0f00 	cmp.w	r8, #0
 80063bc:	dde9      	ble.n	8006392 <__sflush_r+0xae>
 80063be:	6a21      	ldr	r1, [r4, #32]
 80063c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063c2:	4643      	mov	r3, r8
 80063c4:	463a      	mov	r2, r7
 80063c6:	4628      	mov	r0, r5
 80063c8:	47b0      	blx	r6
 80063ca:	2800      	cmp	r0, #0
 80063cc:	dc08      	bgt.n	80063e0 <__sflush_r+0xfc>
 80063ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063d6:	81a3      	strh	r3, [r4, #12]
 80063d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e0:	4407      	add	r7, r0
 80063e2:	eba8 0800 	sub.w	r8, r8, r0
 80063e6:	e7e7      	b.n	80063b8 <__sflush_r+0xd4>
 80063e8:	dfbffffe 	.word	0xdfbffffe

080063ec <_fflush_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	690b      	ldr	r3, [r1, #16]
 80063f0:	4605      	mov	r5, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	b913      	cbnz	r3, 80063fc <_fflush_r+0x10>
 80063f6:	2500      	movs	r5, #0
 80063f8:	4628      	mov	r0, r5
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	b118      	cbz	r0, 8006406 <_fflush_r+0x1a>
 80063fe:	6a03      	ldr	r3, [r0, #32]
 8006400:	b90b      	cbnz	r3, 8006406 <_fflush_r+0x1a>
 8006402:	f7ff f9ad 	bl	8005760 <__sinit>
 8006406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f3      	beq.n	80063f6 <_fflush_r+0xa>
 800640e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006410:	07d0      	lsls	r0, r2, #31
 8006412:	d404      	bmi.n	800641e <_fflush_r+0x32>
 8006414:	0599      	lsls	r1, r3, #22
 8006416:	d402      	bmi.n	800641e <_fflush_r+0x32>
 8006418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800641a:	f7ff fb98 	bl	8005b4e <__retarget_lock_acquire_recursive>
 800641e:	4628      	mov	r0, r5
 8006420:	4621      	mov	r1, r4
 8006422:	f7ff ff5f 	bl	80062e4 <__sflush_r>
 8006426:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006428:	07da      	lsls	r2, r3, #31
 800642a:	4605      	mov	r5, r0
 800642c:	d4e4      	bmi.n	80063f8 <_fflush_r+0xc>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	059b      	lsls	r3, r3, #22
 8006432:	d4e1      	bmi.n	80063f8 <_fflush_r+0xc>
 8006434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006436:	f7ff fb8b 	bl	8005b50 <__retarget_lock_release_recursive>
 800643a:	e7dd      	b.n	80063f8 <_fflush_r+0xc>

0800643c <__swhatbuf_r>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	460c      	mov	r4, r1
 8006440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006444:	2900      	cmp	r1, #0
 8006446:	b096      	sub	sp, #88	@ 0x58
 8006448:	4615      	mov	r5, r2
 800644a:	461e      	mov	r6, r3
 800644c:	da0d      	bge.n	800646a <__swhatbuf_r+0x2e>
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006454:	f04f 0100 	mov.w	r1, #0
 8006458:	bf14      	ite	ne
 800645a:	2340      	movne	r3, #64	@ 0x40
 800645c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006460:	2000      	movs	r0, #0
 8006462:	6031      	str	r1, [r6, #0]
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	b016      	add	sp, #88	@ 0x58
 8006468:	bd70      	pop	{r4, r5, r6, pc}
 800646a:	466a      	mov	r2, sp
 800646c:	f000 f848 	bl	8006500 <_fstat_r>
 8006470:	2800      	cmp	r0, #0
 8006472:	dbec      	blt.n	800644e <__swhatbuf_r+0x12>
 8006474:	9901      	ldr	r1, [sp, #4]
 8006476:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800647a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800647e:	4259      	negs	r1, r3
 8006480:	4159      	adcs	r1, r3
 8006482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006486:	e7eb      	b.n	8006460 <__swhatbuf_r+0x24>

08006488 <__smakebuf_r>:
 8006488:	898b      	ldrh	r3, [r1, #12]
 800648a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800648c:	079d      	lsls	r5, r3, #30
 800648e:	4606      	mov	r6, r0
 8006490:	460c      	mov	r4, r1
 8006492:	d507      	bpl.n	80064a4 <__smakebuf_r+0x1c>
 8006494:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	6123      	str	r3, [r4, #16]
 800649c:	2301      	movs	r3, #1
 800649e:	6163      	str	r3, [r4, #20]
 80064a0:	b003      	add	sp, #12
 80064a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a4:	ab01      	add	r3, sp, #4
 80064a6:	466a      	mov	r2, sp
 80064a8:	f7ff ffc8 	bl	800643c <__swhatbuf_r>
 80064ac:	9f00      	ldr	r7, [sp, #0]
 80064ae:	4605      	mov	r5, r0
 80064b0:	4639      	mov	r1, r7
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7ff fbba 	bl	8005c2c <_malloc_r>
 80064b8:	b948      	cbnz	r0, 80064ce <__smakebuf_r+0x46>
 80064ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064be:	059a      	lsls	r2, r3, #22
 80064c0:	d4ee      	bmi.n	80064a0 <__smakebuf_r+0x18>
 80064c2:	f023 0303 	bic.w	r3, r3, #3
 80064c6:	f043 0302 	orr.w	r3, r3, #2
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	e7e2      	b.n	8006494 <__smakebuf_r+0xc>
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	6020      	str	r0, [r4, #0]
 80064d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d6:	81a3      	strh	r3, [r4, #12]
 80064d8:	9b01      	ldr	r3, [sp, #4]
 80064da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064de:	b15b      	cbz	r3, 80064f8 <__smakebuf_r+0x70>
 80064e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 f81d 	bl	8006524 <_isatty_r>
 80064ea:	b128      	cbz	r0, 80064f8 <__smakebuf_r+0x70>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	f043 0301 	orr.w	r3, r3, #1
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	431d      	orrs	r5, r3
 80064fc:	81a5      	strh	r5, [r4, #12]
 80064fe:	e7cf      	b.n	80064a0 <__smakebuf_r+0x18>

08006500 <_fstat_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4d07      	ldr	r5, [pc, #28]	@ (8006520 <_fstat_r+0x20>)
 8006504:	2300      	movs	r3, #0
 8006506:	4604      	mov	r4, r0
 8006508:	4608      	mov	r0, r1
 800650a:	4611      	mov	r1, r2
 800650c:	602b      	str	r3, [r5, #0]
 800650e:	f7fb ff23 	bl	8002358 <_fstat>
 8006512:	1c43      	adds	r3, r0, #1
 8006514:	d102      	bne.n	800651c <_fstat_r+0x1c>
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	b103      	cbz	r3, 800651c <_fstat_r+0x1c>
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	bd38      	pop	{r3, r4, r5, pc}
 800651e:	bf00      	nop
 8006520:	20025b84 	.word	0x20025b84

08006524 <_isatty_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4d06      	ldr	r5, [pc, #24]	@ (8006540 <_isatty_r+0x1c>)
 8006528:	2300      	movs	r3, #0
 800652a:	4604      	mov	r4, r0
 800652c:	4608      	mov	r0, r1
 800652e:	602b      	str	r3, [r5, #0]
 8006530:	f7fb ff22 	bl	8002378 <_isatty>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_isatty_r+0x1a>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	b103      	cbz	r3, 800653e <_isatty_r+0x1a>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	20025b84 	.word	0x20025b84

08006544 <_sbrk_r>:
 8006544:	b538      	push	{r3, r4, r5, lr}
 8006546:	4d06      	ldr	r5, [pc, #24]	@ (8006560 <_sbrk_r+0x1c>)
 8006548:	2300      	movs	r3, #0
 800654a:	4604      	mov	r4, r0
 800654c:	4608      	mov	r0, r1
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	f7fb ff2a 	bl	80023a8 <_sbrk>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_sbrk_r+0x1a>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_sbrk_r+0x1a>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	20025b84 	.word	0x20025b84

08006564 <_init>:
 8006564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006566:	bf00      	nop
 8006568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656a:	bc08      	pop	{r3}
 800656c:	469e      	mov	lr, r3
 800656e:	4770      	bx	lr

08006570 <_fini>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	bf00      	nop
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr
