
EJohnsonFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006064  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001240  08006214  08006214  00007214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007454  08007454  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  08007454  08007454  00008454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800745c  0800745c  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800745c  0800745c  0000845c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007460  08007460  00008460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007464  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009078  2**0
                  CONTENTS
 10 .bss          00025b08  20000078  20000078  00009078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025b80  20025b80  00009078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d59b  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025da  00000000  00000000  00016643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00018c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a85  00000000  00000000  00019a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263d6  00000000  00000000  0001a485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010900  00000000  00000000  0004085b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e14ec  00000000  00000000  0005115b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132647  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004020  00000000  00000000  0013268c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001366ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080061fc 	.word	0x080061fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080061fc 	.word	0x080061fc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f001 fd8a 	bl	800209c <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 f966 	bl	8000858 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f919 	bl	80007c4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fa28 	bl	80009ec <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fca7 	bl	8000eee <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b02      	ldr	r3, [pc, #8]	@ (80005ac <ApplicationInit+0x2c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000094 	.word	0x20000094

080005b0 <LCD_Touch_Polling_Demo>:
	visualDemo();
}

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_GREEN);
 80005b4:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 fa17 	bl	80009ec <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005be:	481a      	ldr	r0, [pc, #104]	@ (8000628 <LCD_Touch_Polling_Demo+0x78>)
 80005c0:	f000 fca0 	bl	8000f04 <returnTouchStateAndLocation>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d110      	bne.n	80005ec <LCD_Touch_Polling_Demo+0x3c>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80005ca:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <LCD_Touch_Polling_Demo+0x78>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <LCD_Touch_Polling_Demo+0x78>)
 80005d2:	885b      	ldrh	r3, [r3, #2]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4815      	ldr	r0, [pc, #84]	@ (800062c <LCD_Touch_Polling_Demo+0x7c>)
 80005d8:	f004 ff44 	bl	8005464 <iprintf>
			LCD_Clear(0, LCD_COLOR_RED);
 80005dc:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fa03 	bl	80009ec <LCD_Clear>

			screen2();
 80005e6:	f000 fc6d 	bl	8000ec4 <screen2>
 80005ea:	e7e8      	b.n	80005be <LCD_Touch_Polling_Demo+0xe>
		} else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 80005ec:	4810      	ldr	r0, [pc, #64]	@ (8000630 <LCD_Touch_Polling_Demo+0x80>)
 80005ee:	f004 ffa1 	bl	8005534 <puts>
			LCD_Clear(0, LCD_COLOR_GREEN);
 80005f2:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 f9f8 	bl	80009ec <LCD_Clear>

			//FIRST SCREEN
			//Determine if pressing within range of button
			if(TM_STMPE811_TouchInRectangle(&StaticTouchData, 85, 195, 100, 100)){
 80005fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <LCD_Touch_Polling_Demo+0x78>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	2b54      	cmp	r3, #84	@ 0x54
 8000602:	d9dc      	bls.n	80005be <LCD_Touch_Polling_Demo+0xe>
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <LCD_Touch_Polling_Demo+0x78>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	2bb8      	cmp	r3, #184	@ 0xb8
 800060a:	d8d8      	bhi.n	80005be <LCD_Touch_Polling_Demo+0xe>
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <LCD_Touch_Polling_Demo+0x78>)
 800060e:	885b      	ldrh	r3, [r3, #2]
 8000610:	2bc2      	cmp	r3, #194	@ 0xc2
 8000612:	d9d4      	bls.n	80005be <LCD_Touch_Polling_Demo+0xe>
 8000614:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <LCD_Touch_Polling_Demo+0x78>)
 8000616:	885b      	ldrh	r3, [r3, #2]
 8000618:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 800061c:	d8cf      	bhi.n	80005be <LCD_Touch_Polling_Demo+0xe>
				//Move to next screen (just call another funct?)
				LCD_Clear(0, LCD_COLOR_BLACK);
 800061e:	2100      	movs	r1, #0
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f9e3 	bl	80009ec <LCD_Clear>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000626:	e7ca      	b.n	80005be <LCD_Touch_Polling_Demo+0xe>
 8000628:	20000094 	.word	0x20000094
 800062c:	08006214 	.word	0x08006214
 8000630:	08006228 	.word	0x08006228

08000634 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	@ 0x30
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
 800063e:	4b5a      	ldr	r3, [pc, #360]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 8000640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000642:	4a59      	ldr	r2, [pc, #356]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 8000644:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000648:	6453      	str	r3, [r2, #68]	@ 0x44
 800064a:	4b57      	ldr	r3, [pc, #348]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000652:	61bb      	str	r3, [r7, #24]
 8000654:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	4b53      	ldr	r3, [pc, #332]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a52      	ldr	r2, [pc, #328]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b50      	ldr	r3, [pc, #320]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	4b4c      	ldr	r3, [pc, #304]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a4b      	ldr	r2, [pc, #300]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b49      	ldr	r3, [pc, #292]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	4b45      	ldr	r3, [pc, #276]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a44      	ldr	r2, [pc, #272]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b42      	ldr	r3, [pc, #264]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b3e      	ldr	r3, [pc, #248]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a3d      	ldr	r2, [pc, #244]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b3b      	ldr	r3, [pc, #236]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0308 	and.w	r3, r3, #8
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b37      	ldr	r3, [pc, #220]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a36      	ldr	r2, [pc, #216]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 80006d0:	f043 0320 	orr.w	r3, r3, #32
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b34      	ldr	r3, [pc, #208]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b30      	ldr	r3, [pc, #192]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a2f      	ldr	r2, [pc, #188]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 80006ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b2d      	ldr	r3, [pc, #180]	@ (80007a8 <LCD_GPIO_Init+0x174>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80006fe:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000702:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800070c:	2302      	movs	r3, #2
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000710:	230e      	movs	r3, #14
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	4824      	ldr	r0, [pc, #144]	@ (80007ac <LCD_GPIO_Init+0x178>)
 800071c:	f001 ff20 	bl	8002560 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000720:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000724:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	4820      	ldr	r0, [pc, #128]	@ (80007b0 <LCD_GPIO_Init+0x17c>)
 800072e:	f001 ff17 	bl	8002560 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000732:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	481d      	ldr	r0, [pc, #116]	@ (80007b4 <LCD_GPIO_Init+0x180>)
 8000740:	f001 ff0e 	bl	8002560 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000744:	2348      	movs	r3, #72	@ 0x48
 8000746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <LCD_GPIO_Init+0x184>)
 8000750:	f001 ff06 	bl	8002560 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	4816      	ldr	r0, [pc, #88]	@ (80007bc <LCD_GPIO_Init+0x188>)
 8000762:	f001 fefd 	bl	8002560 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000766:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800076a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <LCD_GPIO_Init+0x18c>)
 8000774:	f001 fef4 	bl	8002560 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000778:	2303      	movs	r3, #3
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800077c:	2309      	movs	r3, #9
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	480a      	ldr	r0, [pc, #40]	@ (80007b0 <LCD_GPIO_Init+0x17c>)
 8000788:	f001 feea 	bl	8002560 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800078c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <LCD_GPIO_Init+0x18c>)
 800079a:	f001 fee1 	bl	8002560 <HAL_GPIO_Init>
}
 800079e:	bf00      	nop
 80007a0:	3730      	adds	r7, #48	@ 0x30
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000
 80007b0:	40020400 	.word	0x40020400
 80007b4:	40020800 	.word	0x40020800
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	40021400 	.word	0x40021400
 80007c0:	40021800 	.word	0x40021800

080007c4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b090      	sub	sp, #64	@ 0x40
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80007d2:	23f0      	movs	r3, #240	@ 0xf0
 80007d4:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80007da:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007de:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80007e0:	2302      	movs	r3, #2
 80007e2:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80007e4:	23ff      	movs	r3, #255	@ 0xff
 80007e6:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007f2:	2305      	movs	r3, #5
 80007f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d101      	bne.n	8000800 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <LTCD_Layer_Init+0x78>)
 80007fe:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000800:	23f0      	movs	r3, #240	@ 0xf0
 8000802:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000804:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000808:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800081c:	79fa      	ldrb	r2, [r7, #7]
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4619      	mov	r1, r3
 8000824:	4806      	ldr	r0, [pc, #24]	@ (8000840 <LTCD_Layer_Init+0x7c>)
 8000826:	f003 fa61 	bl	8003cec <HAL_LTDC_ConfigLayer>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000830:	f000 fb57 	bl	8000ee2 <LCD_Error_Handler>
	}
}
 8000834:	bf00      	nop
 8000836:	3740      	adds	r7, #64	@ 0x40
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000178 	.word	0x20000178
 8000840:	2000009c 	.word	0x2000009c

08000844 <clearScreen>:

void clearScreen(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  LCD_Clear(0,LCD_COLOR_WHITE);
 8000848:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800084c:	2000      	movs	r0, #0
 800084e:	f000 f8cd 	bl	80009ec <LCD_Clear>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <LTCD__Init>:

void LTCD__Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800085c:	4b2a      	ldr	r3, [pc, #168]	@ (8000908 <LTCD__Init+0xb0>)
 800085e:	4a2b      	ldr	r2, [pc, #172]	@ (800090c <LTCD__Init+0xb4>)
 8000860:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000862:	4b29      	ldr	r3, [pc, #164]	@ (8000908 <LTCD__Init+0xb0>)
 8000864:	2209      	movs	r2, #9
 8000866:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000868:	4b27      	ldr	r3, [pc, #156]	@ (8000908 <LTCD__Init+0xb0>)
 800086a:	2201      	movs	r2, #1
 800086c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800086e:	4b26      	ldr	r3, [pc, #152]	@ (8000908 <LTCD__Init+0xb0>)
 8000870:	221d      	movs	r2, #29
 8000872:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000874:	4b24      	ldr	r3, [pc, #144]	@ (8000908 <LTCD__Init+0xb0>)
 8000876:	2203      	movs	r2, #3
 8000878:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800087a:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <LTCD__Init+0xb0>)
 800087c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000882:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <LTCD__Init+0xb0>)
 8000884:	f240 1243 	movw	r2, #323	@ 0x143
 8000888:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <LTCD__Init+0xb0>)
 800088c:	f240 1217 	movw	r2, #279	@ 0x117
 8000890:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000892:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <LTCD__Init+0xb0>)
 8000894:	f240 1247 	movw	r2, #327	@ 0x147
 8000898:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800089a:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <LTCD__Init+0xb0>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80008a2:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <LTCD__Init+0xb0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <LTCD__Init+0xb0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <LTCD__Init+0xb8>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <LTCD__Init+0xb8>)
 80008ba:	22c0      	movs	r2, #192	@ 0xc0
 80008bc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <LTCD__Init+0xb8>)
 80008c0:	2204      	movs	r2, #4
 80008c2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <LTCD__Init+0xb8>)
 80008c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008ca:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80008cc:	4810      	ldr	r0, [pc, #64]	@ (8000910 <LTCD__Init+0xb8>)
 80008ce:	f004 f867 	bl	80049a0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <LTCD__Init+0xb0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <LTCD__Init+0xb0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008de:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <LTCD__Init+0xb0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <LTCD__Init+0xb0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80008ea:	f7ff fea3 	bl	8000634 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <LTCD__Init+0xb0>)
 80008f0:	f003 f92c 	bl	8003b4c <HAL_LTDC_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80008fa:	f000 faf2 	bl	8000ee2 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80008fe:	f000 fb0d 	bl	8000f1c <ili9341_Init>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000009c 	.word	0x2000009c
 800090c:	40016800 	.word	0x40016800
 8000910:	20000144 	.word	0x20000144

08000914 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	80fb      	strh	r3, [r7, #6]
 800091e:	460b      	mov	r3, r1
 8000920:	80bb      	strh	r3, [r7, #4]
 8000922:	4613      	mov	r3, r2
 8000924:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000926:	88ba      	ldrh	r2, [r7, #4]
 8000928:	4613      	mov	r3, r2
 800092a:	011b      	lsls	r3, r3, #4
 800092c:	1a9b      	subs	r3, r3, r2
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	461a      	mov	r2, r3
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	4413      	add	r3, r2
 8000936:	4905      	ldr	r1, [pc, #20]	@ (800094c <LCD_Draw_Pixel+0x38>)
 8000938:	887a      	ldrh	r2, [r7, #2]
 800093a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000178 	.word	0x20000178

08000950 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	4604      	mov	r4, r0
 8000958:	4608      	mov	r0, r1
 800095a:	4611      	mov	r1, r2
 800095c:	461a      	mov	r2, r3
 800095e:	4623      	mov	r3, r4
 8000960:	80fb      	strh	r3, [r7, #6]
 8000962:	4603      	mov	r3, r0
 8000964:	80bb      	strh	r3, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	807b      	strh	r3, [r7, #2]
 800096a:	4613      	mov	r3, r2
 800096c:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800096e:	2300      	movs	r3, #0
 8000970:	81fb      	strh	r3, [r7, #14]
 8000972:	e00b      	b.n	800098c <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000974:	89fa      	ldrh	r2, [r7, #14]
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	b299      	uxth	r1, r3
 800097c:	883a      	ldrh	r2, [r7, #0]
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ffc7 	bl	8000914 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000986:	89fb      	ldrh	r3, [r7, #14]
 8000988:	3301      	adds	r3, #1
 800098a:	81fb      	strh	r3, [r7, #14]
 800098c:	89fa      	ldrh	r2, [r7, #14]
 800098e:	887b      	ldrh	r3, [r7, #2]
 8000990:	429a      	cmp	r2, r3
 8000992:	d3ef      	bcc.n	8000974 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	bd90      	pop	{r4, r7, pc}

0800099e <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800099e:	b590      	push	{r4, r7, lr}
 80009a0:	b085      	sub	sp, #20
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4604      	mov	r4, r0
 80009a6:	4608      	mov	r0, r1
 80009a8:	4611      	mov	r1, r2
 80009aa:	461a      	mov	r2, r3
 80009ac:	4623      	mov	r3, r4
 80009ae:	80fb      	strh	r3, [r7, #6]
 80009b0:	4603      	mov	r3, r0
 80009b2:	80bb      	strh	r3, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
 80009b8:	4613      	mov	r3, r2
 80009ba:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80009bc:	2300      	movs	r3, #0
 80009be:	81fb      	strh	r3, [r7, #14]
 80009c0:	e00b      	b.n	80009da <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 80009c2:	89fa      	ldrh	r2, [r7, #14]
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	4413      	add	r3, r2
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	883a      	ldrh	r2, [r7, #0]
 80009cc:	88b9      	ldrh	r1, [r7, #4]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ffa0 	bl	8000914 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80009d4:	89fb      	ldrh	r3, [r7, #14]
 80009d6:	3301      	adds	r3, #1
 80009d8:	81fb      	strh	r3, [r7, #14]
 80009da:	89fa      	ldrh	r2, [r7, #14]
 80009dc:	887b      	ldrh	r3, [r7, #2]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d3ef      	bcc.n	80009c2 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80009e2:	bf00      	nop
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	4613      	mov	r3, r2
 80009fa:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10e      	bne.n	8000a20 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e007      	b.n	8000a18 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000a08:	4908      	ldr	r1, [pc, #32]	@ (8000a2c <LCD_Clear+0x40>)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	88ba      	ldrh	r2, [r7, #4]
 8000a0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000a1e:	d3f3      	bcc.n	8000a08 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	20000178 	.word	0x20000178

08000a30 <LCD_Draw_Rectangle_Empty>:

void LCD_Draw_Rectangle_Empty(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4604      	mov	r4, r0
 8000a38:	4608      	mov	r0, r1
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4623      	mov	r3, r4
 8000a40:	80fb      	strh	r3, [r7, #6]
 8000a42:	4603      	mov	r3, r0
 8000a44:	80bb      	strh	r3, [r7, #4]
 8000a46:	460b      	mov	r3, r1
 8000a48:	807b      	strh	r3, [r7, #2]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	803b      	strh	r3, [r7, #0]
	//draw vertical x,y,height
	//draw vertical x+length,y,height
	//draw horizontal x,y,length
	//draw horizontal x,y+height,length
	LCD_Draw_Vertical_Line(Xpos,Ypos,height,color);
 8000a4e:	8b3b      	ldrh	r3, [r7, #24]
 8000a50:	883a      	ldrh	r2, [r7, #0]
 8000a52:	88b9      	ldrh	r1, [r7, #4]
 8000a54:	88f8      	ldrh	r0, [r7, #6]
 8000a56:	f7ff ff7b 	bl	8000950 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(Xpos+len,Ypos,height,color);
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	887b      	ldrh	r3, [r7, #2]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b298      	uxth	r0, r3
 8000a62:	8b3b      	ldrh	r3, [r7, #24]
 8000a64:	883a      	ldrh	r2, [r7, #0]
 8000a66:	88b9      	ldrh	r1, [r7, #4]
 8000a68:	f7ff ff72 	bl	8000950 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos,len,color);
 8000a6c:	8b3b      	ldrh	r3, [r7, #24]
 8000a6e:	887a      	ldrh	r2, [r7, #2]
 8000a70:	88b9      	ldrh	r1, [r7, #4]
 8000a72:	88f8      	ldrh	r0, [r7, #6]
 8000a74:	f7ff ff93 	bl	800099e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(Xpos,Ypos+height,len,color);
 8000a78:	88ba      	ldrh	r2, [r7, #4]
 8000a7a:	883b      	ldrh	r3, [r7, #0]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b299      	uxth	r1, r3
 8000a80:	8b3b      	ldrh	r3, [r7, #24]
 8000a82:	887a      	ldrh	r2, [r7, #2]
 8000a84:	88f8      	ldrh	r0, [r7, #6]
 8000a86:	f7ff ff8a 	bl	800099e <LCD_Draw_Horizontal_Line>
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd90      	pop	{r4, r7, pc}

08000a92 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t height, uint16_t color){
 8000a92:	b590      	push	{r4, r7, lr}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4604      	mov	r4, r0
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4623      	mov	r3, r4
 8000aa2:	80fb      	strh	r3, [r7, #6]
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	80bb      	strh	r3, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	807b      	strh	r3, [r7, #2]
 8000aac:	4613      	mov	r3, r2
 8000aae:	803b      	strh	r3, [r7, #0]
	for(int i = 0; i < len; i++){
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e00c      	b.n	8000ad0 <LCD_Draw_Rectangle_Fill+0x3e>
		//Draw a bunch of vertical lines from left to right
		LCD_Draw_Vertical_Line(Xpos+i,Ypos,height,color);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	4413      	add	r3, r2
 8000abe:	b298      	uxth	r0, r3
 8000ac0:	8c3b      	ldrh	r3, [r7, #32]
 8000ac2:	883a      	ldrh	r2, [r7, #0]
 8000ac4:	88b9      	ldrh	r1, [r7, #4]
 8000ac6:	f7ff ff43 	bl	8000950 <LCD_Draw_Vertical_Line>
	for(int i = 0; i < len; i++){
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3301      	adds	r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbee      	blt.n	8000ab6 <LCD_Draw_Rectangle_Fill+0x24>
	}
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd90      	pop	{r4, r7, pc}

08000ae2 <LCD_Draw_OBlock>:

void LCD_Draw_OBlock(uint16_t Xpos, uint16_t Ypos){
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b084      	sub	sp, #16
 8000ae6:	af02      	add	r7, sp, #8
 8000ae8:	4603      	mov	r3, r0
 8000aea:	460a      	mov	r2, r1
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	4613      	mov	r3, r2
 8000af0:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH*2,LCD_COLOR_YELLOW);
 8000af2:	88b9      	ldrh	r1, [r7, #4]
 8000af4:	88f8      	ldrh	r0, [r7, #6]
 8000af6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	233c      	movs	r3, #60	@ 0x3c
 8000afe:	223c      	movs	r2, #60	@ 0x3c
 8000b00:	f7ff ffc7 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <LCD_Draw_IBlock>:
void LCD_Draw_IBlock(uint16_t Xpos, uint16_t Ypos){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af02      	add	r7, sp, #8
 8000b12:	4603      	mov	r3, r0
 8000b14:	460a      	mov	r2, r1
 8000b16:	80fb      	strh	r3, [r7, #6]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*4,LCD_COLOR_CYAN);
 8000b1c:	88b9      	ldrh	r1, [r7, #4]
 8000b1e:	88f8      	ldrh	r0, [r7, #6]
 8000b20:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2378      	movs	r3, #120	@ 0x78
 8000b28:	221e      	movs	r2, #30
 8000b2a:	f7ff ffb2 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <LCD_Draw_SBlock>:
void LCD_Draw_SBlock(uint16_t Xpos, uint16_t Ypos){
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af02      	add	r7, sp, #8
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	460a      	mov	r2, r1
 8000b40:	80fb      	strh	r3, [r7, #6]
 8000b42:	4613      	mov	r3, r2
 8000b44:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_RED);
 8000b46:	88b9      	ldrh	r1, [r7, #4]
 8000b48:	88f8      	ldrh	r0, [r7, #6]
 8000b4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	231e      	movs	r3, #30
 8000b52:	223c      	movs	r2, #60	@ 0x3c
 8000b54:	f7ff ff9d 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_RED);
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	3b1e      	subs	r3, #30
 8000b5c:	b298      	uxth	r0, r3
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	331e      	adds	r3, #30
 8000b62:	b299      	uxth	r1, r3
 8000b64:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	231e      	movs	r3, #30
 8000b6c:	223c      	movs	r2, #60	@ 0x3c
 8000b6e:	f7ff ff90 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <LCD_Draw_ZBlock>:
void LCD_Draw_ZBlock(uint16_t Xpos, uint16_t Ypos){
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af02      	add	r7, sp, #8
 8000b80:	4603      	mov	r3, r0
 8000b82:	460a      	mov	r2, r1
 8000b84:	80fb      	strh	r3, [r7, #6]
 8000b86:	4613      	mov	r3, r2
 8000b88:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_GREEN);
 8000b8a:	88b9      	ldrh	r1, [r7, #4]
 8000b8c:	88f8      	ldrh	r0, [r7, #6]
 8000b8e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	231e      	movs	r3, #30
 8000b96:	223c      	movs	r2, #60	@ 0x3c
 8000b98:	f7ff ff7b 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH*2,BLOCK_LENGTH,LCD_COLOR_GREEN);
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	331e      	adds	r3, #30
 8000ba0:	b298      	uxth	r0, r3
 8000ba2:	88bb      	ldrh	r3, [r7, #4]
 8000ba4:	331e      	adds	r3, #30
 8000ba6:	b299      	uxth	r1, r3
 8000ba8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	231e      	movs	r3, #30
 8000bb0:	223c      	movs	r2, #60	@ 0x3c
 8000bb2:	f7ff ff6e 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <LCD_Draw_LBlock>:
void LCD_Draw_LBlock(uint16_t Xpos, uint16_t Ypos){
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b084      	sub	sp, #16
 8000bc2:	af02      	add	r7, sp, #8
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	460a      	mov	r2, r1
 8000bc8:	80fb      	strh	r3, [r7, #6]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	80bb      	strh	r3, [r7, #4]
	//orange
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_BLUE2);
 8000bce:	88b9      	ldrh	r1, [r7, #4]
 8000bd0:	88f8      	ldrh	r0, [r7, #6]
 8000bd2:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	235a      	movs	r3, #90	@ 0x5a
 8000bda:	221e      	movs	r2, #30
 8000bdc:	f7ff ff59 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+(BLOCK_LENGTH*2),BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_BLUE2);
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	331e      	adds	r3, #30
 8000be4:	b298      	uxth	r0, r3
 8000be6:	88bb      	ldrh	r3, [r7, #4]
 8000be8:	333c      	adds	r3, #60	@ 0x3c
 8000bea:	b299      	uxth	r1, r3
 8000bec:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	231e      	movs	r3, #30
 8000bf4:	221e      	movs	r2, #30
 8000bf6:	f7ff ff4c 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <LCD_Draw_JBlock>:
void LCD_Draw_JBlock(uint16_t Xpos, uint16_t Ypos){
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af02      	add	r7, sp, #8
 8000c08:	4603      	mov	r3, r0
 8000c0a:	460a      	mov	r2, r1
 8000c0c:	80fb      	strh	r3, [r7, #6]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	80bb      	strh	r3, [r7, #4]
	//pink
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH,BLOCK_LENGTH*3,LCD_COLOR_MAGENTA);
 8000c12:	88b9      	ldrh	r1, [r7, #4]
 8000c14:	88f8      	ldrh	r0, [r7, #6]
 8000c16:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	235a      	movs	r3, #90	@ 0x5a
 8000c1e:	221e      	movs	r2, #30
 8000c20:	f7ff ff37 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos-BLOCK_LENGTH,Ypos+(BLOCK_LENGTH*2),BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_MAGENTA);
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	3b1e      	subs	r3, #30
 8000c28:	b298      	uxth	r0, r3
 8000c2a:	88bb      	ldrh	r3, [r7, #4]
 8000c2c:	333c      	adds	r3, #60	@ 0x3c
 8000c2e:	b299      	uxth	r1, r3
 8000c30:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	231e      	movs	r3, #30
 8000c38:	221e      	movs	r2, #30
 8000c3a:	f7ff ff2a 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <LCD_Draw_TBlock>:
void LCD_Draw_TBlock(uint16_t Xpos, uint16_t Ypos){
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af02      	add	r7, sp, #8
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	460a      	mov	r2, r1
 8000c50:	80fb      	strh	r3, [r7, #6]
 8000c52:	4613      	mov	r3, r2
 8000c54:	80bb      	strh	r3, [r7, #4]
	//purple
	LCD_Draw_Rectangle_Fill(Xpos,Ypos,BLOCK_LENGTH*3,BLOCK_LENGTH,LCD_COLOR_GREY);
 8000c56:	88b9      	ldrh	r1, [r7, #4]
 8000c58:	88f8      	ldrh	r0, [r7, #6]
 8000c5a:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	231e      	movs	r3, #30
 8000c62:	225a      	movs	r2, #90	@ 0x5a
 8000c64:	f7ff ff15 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(Xpos+BLOCK_LENGTH,Ypos+BLOCK_LENGTH,BLOCK_LENGTH,BLOCK_LENGTH,LCD_COLOR_GREY);
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	331e      	adds	r3, #30
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	88bb      	ldrh	r3, [r7, #4]
 8000c70:	331e      	adds	r3, #30
 8000c72:	b299      	uxth	r1, r3
 8000c74:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	231e      	movs	r3, #30
 8000c7c:	221e      	movs	r2, #30
 8000c7e:	f7ff ff08 	bl	8000a92 <LCD_Draw_Rectangle_Fill>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000c96:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <LCD_SetTextColor+0x1c>)
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	8013      	strh	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	20000000 	.word	0x20000000

08000cac <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000cb4:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <LCD_SetFont+0x1c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000174 	.word	0x20000174

08000ccc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	603a      	str	r2, [r7, #0]
 8000cd6:	80fb      	strh	r3, [r7, #6]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e04c      	b.n	8000d84 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	e03f      	b.n	8000d70 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4b27      	ldr	r3, [pc, #156]	@ (8000d9c <LCD_Draw_Char+0xd0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	889b      	ldrh	r3, [r3, #4]
 8000d02:	4a27      	ldr	r2, [pc, #156]	@ (8000da0 <LCD_Draw_Char+0xd4>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	08db      	lsrs	r3, r3, #3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	409a      	lsls	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	fa42 f303 	asr.w	r3, r2, r3
 8000d18:	400b      	ands	r3, r1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d104      	bne.n	8000d28 <LCD_Draw_Char+0x5c>
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <LCD_Draw_Char+0xd0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	889b      	ldrh	r3, [r3, #4]
 8000d24:	2b0c      	cmp	r3, #12
 8000d26:	d920      	bls.n	8000d6a <LCD_Draw_Char+0x9e>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	fa42 f303 	asr.w	r3, r2, r3
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d104      	bne.n	8000d4c <LCD_Draw_Char+0x80>
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <LCD_Draw_Char+0xd0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	889b      	ldrh	r3, [r3, #4]
 8000d48:	2b0c      	cmp	r3, #12
 8000d4a:	d80e      	bhi.n	8000d6a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	4413      	add	r3, r2
 8000d54:	b298      	uxth	r0, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	88bb      	ldrh	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4a10      	ldr	r2, [pc, #64]	@ (8000da4 <LCD_Draw_Char+0xd8>)
 8000d62:	8812      	ldrh	r2, [r2, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f7ff fdd5 	bl	8000914 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <LCD_Draw_Char+0xd0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	889b      	ldrh	r3, [r3, #4]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d3b8      	bcc.n	8000cf0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <LCD_Draw_Char+0xd0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	88db      	ldrh	r3, [r3, #6]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d3ab      	bcc.n	8000cea <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000174 	.word	0x20000174
 8000da0:	aaaaaaab 	.word	0xaaaaaaab
 8000da4:	20000000 	.word	0x20000000

08000da8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
 8000db2:	460b      	mov	r3, r1
 8000db4:	80bb      	strh	r3, [r7, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	3b20      	subs	r3, #32
 8000dbe:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000dc0:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <LCD_DisplayChar+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	4907      	ldr	r1, [pc, #28]	@ (8000de8 <LCD_DisplayChar+0x40>)
 8000dca:	6809      	ldr	r1, [r1, #0]
 8000dcc:	88c9      	ldrh	r1, [r1, #6]
 8000dce:	fb01 f303 	mul.w	r3, r1, r3
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	441a      	add	r2, r3
 8000dd6:	88b9      	ldrh	r1, [r7, #4]
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff76 	bl	8000ccc <LCD_Draw_Char>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000174 	.word	0x20000174

08000dec <screen1>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void screen1(void){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af02      	add	r7, sp, #8
	clearScreen();
 8000df2:	f7ff fd27 	bl	8000844 <clearScreen>

	//Show all blocks
	LCD_Draw_OBlock(90,250);
 8000df6:	21fa      	movs	r1, #250	@ 0xfa
 8000df8:	205a      	movs	r0, #90	@ 0x5a
 8000dfa:	f7ff fe72 	bl	8000ae2 <LCD_Draw_OBlock>
	LCD_Draw_IBlock(105,110);
 8000dfe:	216e      	movs	r1, #110	@ 0x6e
 8000e00:	2069      	movs	r0, #105	@ 0x69
 8000e02:	f7ff fe83 	bl	8000b0c <LCD_Draw_IBlock>
	LCD_Draw_SBlock(170,200);
 8000e06:	21c8      	movs	r1, #200	@ 0xc8
 8000e08:	20aa      	movs	r0, #170	@ 0xaa
 8000e0a:	f7ff fe94 	bl	8000b36 <LCD_Draw_SBlock>
	LCD_Draw_ZBlock(10,200);
 8000e0e:	21c8      	movs	r1, #200	@ 0xc8
 8000e10:	200a      	movs	r0, #10
 8000e12:	f7ff feb2 	bl	8000b7a <LCD_Draw_ZBlock>
	LCD_Draw_LBlock(20,10);
 8000e16:	210a      	movs	r1, #10
 8000e18:	2014      	movs	r0, #20
 8000e1a:	f7ff fed0 	bl	8000bbe <LCD_Draw_LBlock>
	LCD_Draw_JBlock(190,10);
 8000e1e:	210a      	movs	r1, #10
 8000e20:	20be      	movs	r0, #190	@ 0xbe
 8000e22:	f7ff feee 	bl	8000c02 <LCD_Draw_JBlock>
	LCD_Draw_TBlock(75,35);
 8000e26:	2123      	movs	r1, #35	@ 0x23
 8000e28:	204b      	movs	r0, #75	@ 0x4b
 8000e2a:	f7ff ff0c 	bl	8000c46 <LCD_Draw_TBlock>

	//"Tetris"
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff ff2c 	bl	8000c8c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000e34:	4822      	ldr	r0, [pc, #136]	@ (8000ec0 <screen1+0xd4>)
 8000e36:	f7ff ff39 	bl	8000cac <LCD_SetFont>

	LCD_DisplayChar(80,40,'T');
 8000e3a:	2254      	movs	r2, #84	@ 0x54
 8000e3c:	2128      	movs	r1, #40	@ 0x28
 8000e3e:	2050      	movs	r0, #80	@ 0x50
 8000e40:	f7ff ffb2 	bl	8000da8 <LCD_DisplayChar>
	LCD_DisplayChar(95,40,'E');
 8000e44:	2245      	movs	r2, #69	@ 0x45
 8000e46:	2128      	movs	r1, #40	@ 0x28
 8000e48:	205f      	movs	r0, #95	@ 0x5f
 8000e4a:	f7ff ffad 	bl	8000da8 <LCD_DisplayChar>
	LCD_DisplayChar(110,40,'T');
 8000e4e:	2254      	movs	r2, #84	@ 0x54
 8000e50:	2128      	movs	r1, #40	@ 0x28
 8000e52:	206e      	movs	r0, #110	@ 0x6e
 8000e54:	f7ff ffa8 	bl	8000da8 <LCD_DisplayChar>
	LCD_DisplayChar(125,40,'R');
 8000e58:	2252      	movs	r2, #82	@ 0x52
 8000e5a:	2128      	movs	r1, #40	@ 0x28
 8000e5c:	207d      	movs	r0, #125	@ 0x7d
 8000e5e:	f7ff ffa3 	bl	8000da8 <LCD_DisplayChar>
	LCD_DisplayChar(135,40,'I');
 8000e62:	2249      	movs	r2, #73	@ 0x49
 8000e64:	2128      	movs	r1, #40	@ 0x28
 8000e66:	2087      	movs	r0, #135	@ 0x87
 8000e68:	f7ff ff9e 	bl	8000da8 <LCD_DisplayChar>
	LCD_DisplayChar(145,40,'S');
 8000e6c:	2253      	movs	r2, #83	@ 0x53
 8000e6e:	2128      	movs	r1, #40	@ 0x28
 8000e70:	2091      	movs	r0, #145	@ 0x91
 8000e72:	f7ff ff99 	bl	8000da8 <LCD_DisplayChar>

	//Start button
	LCD_DisplayChar(95,200,'S');
 8000e76:	2253      	movs	r2, #83	@ 0x53
 8000e78:	21c8      	movs	r1, #200	@ 0xc8
 8000e7a:	205f      	movs	r0, #95	@ 0x5f
 8000e7c:	f7ff ff94 	bl	8000da8 <LCD_DisplayChar>
	LCD_DisplayChar(105,200,'t');
 8000e80:	2274      	movs	r2, #116	@ 0x74
 8000e82:	21c8      	movs	r1, #200	@ 0xc8
 8000e84:	2069      	movs	r0, #105	@ 0x69
 8000e86:	f7ff ff8f 	bl	8000da8 <LCD_DisplayChar>
	LCD_DisplayChar(115,200,'a');
 8000e8a:	2261      	movs	r2, #97	@ 0x61
 8000e8c:	21c8      	movs	r1, #200	@ 0xc8
 8000e8e:	2073      	movs	r0, #115	@ 0x73
 8000e90:	f7ff ff8a 	bl	8000da8 <LCD_DisplayChar>
	LCD_DisplayChar(125,200,'r');
 8000e94:	2272      	movs	r2, #114	@ 0x72
 8000e96:	21c8      	movs	r1, #200	@ 0xc8
 8000e98:	207d      	movs	r0, #125	@ 0x7d
 8000e9a:	f7ff ff85 	bl	8000da8 <LCD_DisplayChar>
	LCD_DisplayChar(132,200,'t');
 8000e9e:	2274      	movs	r2, #116	@ 0x74
 8000ea0:	21c8      	movs	r1, #200	@ 0xc8
 8000ea2:	2084      	movs	r0, #132	@ 0x84
 8000ea4:	f7ff ff80 	bl	8000da8 <LCD_DisplayChar>
	LCD_Draw_Rectangle_Empty(85,195,67,30,LCD_COLOR_BLACK);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	231e      	movs	r3, #30
 8000eae:	2243      	movs	r2, #67	@ 0x43
 8000eb0:	21c3      	movs	r1, #195	@ 0xc3
 8000eb2:	2055      	movs	r0, #85	@ 0x55
 8000eb4:	f7ff fdbc 	bl	8000a30 <LCD_Draw_Rectangle_Empty>
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <screen2>:

void screen2(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af02      	add	r7, sp, #8
	//10 tall x 6 wide
	//30*10 = 300
	//30*6 = 180

	//Border
	LCD_Draw_Rectangle_Empty(30,10,180,300,LCD_COLOR_BLACK);
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000ed2:	22b4      	movs	r2, #180	@ 0xb4
 8000ed4:	210a      	movs	r1, #10
 8000ed6:	201e      	movs	r0, #30
 8000ed8:	f7ff fdaa 	bl	8000a30 <LCD_Draw_Rectangle_Empty>
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee6:	b672      	cpsid	i
}
 8000ee8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eea:	bf00      	nop
 8000eec:	e7fd      	b.n	8000eea <LCD_Error_Handler+0x8>

08000eee <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000ef2:	f000 fd8b 	bl	8001a0c <STMPE811_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d001      	beq.n	8000f00 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialization
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <InitializeLCDTouch+0xe>
  }
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 fe35 	bl	8001b7c <STMPE811_ReadTouch>
 8000f12:	4603      	mov	r3, r0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000f20:	f000 f9fe 	bl	8001320 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000f24:	20ca      	movs	r0, #202	@ 0xca
 8000f26:	f000 f943 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000f2a:	20c3      	movs	r0, #195	@ 0xc3
 8000f2c:	f000 f94d 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000f30:	2008      	movs	r0, #8
 8000f32:	f000 f94a 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000f36:	2050      	movs	r0, #80	@ 0x50
 8000f38:	f000 f947 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000f3c:	20cf      	movs	r0, #207	@ 0xcf
 8000f3e:	f000 f937 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f941 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000f48:	20c1      	movs	r0, #193	@ 0xc1
 8000f4a:	f000 f93e 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000f4e:	2030      	movs	r0, #48	@ 0x30
 8000f50:	f000 f93b 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000f54:	20ed      	movs	r0, #237	@ 0xed
 8000f56:	f000 f92b 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000f5a:	2064      	movs	r0, #100	@ 0x64
 8000f5c:	f000 f935 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f932 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000f66:	2012      	movs	r0, #18
 8000f68:	f000 f92f 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000f6c:	2081      	movs	r0, #129	@ 0x81
 8000f6e:	f000 f92c 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000f72:	20e8      	movs	r0, #232	@ 0xe8
 8000f74:	f000 f91c 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000f78:	2085      	movs	r0, #133	@ 0x85
 8000f7a:	f000 f926 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f923 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000f84:	2078      	movs	r0, #120	@ 0x78
 8000f86:	f000 f920 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000f8a:	20cb      	movs	r0, #203	@ 0xcb
 8000f8c:	f000 f910 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000f90:	2039      	movs	r0, #57	@ 0x39
 8000f92:	f000 f91a 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000f96:	202c      	movs	r0, #44	@ 0x2c
 8000f98:	f000 f917 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 f914 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000fa2:	2034      	movs	r0, #52	@ 0x34
 8000fa4:	f000 f911 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f000 f90e 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000fae:	20f7      	movs	r0, #247	@ 0xf7
 8000fb0:	f000 f8fe 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000fb4:	2020      	movs	r0, #32
 8000fb6:	f000 f908 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000fba:	20ea      	movs	r0, #234	@ 0xea
 8000fbc:	f000 f8f8 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 f902 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f8ff 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000fcc:	20b1      	movs	r0, #177	@ 0xb1
 8000fce:	f000 f8ef 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f8f9 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000fd8:	201b      	movs	r0, #27
 8000fda:	f000 f8f6 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000fde:	20b6      	movs	r0, #182	@ 0xb6
 8000fe0:	f000 f8e6 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f000 f8f0 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000fea:	20a2      	movs	r0, #162	@ 0xa2
 8000fec:	f000 f8ed 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000ff0:	20c0      	movs	r0, #192	@ 0xc0
 8000ff2:	f000 f8dd 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000ff6:	2010      	movs	r0, #16
 8000ff8:	f000 f8e7 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000ffc:	20c1      	movs	r0, #193	@ 0xc1
 8000ffe:	f000 f8d7 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001002:	2010      	movs	r0, #16
 8001004:	f000 f8e1 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001008:	20c5      	movs	r0, #197	@ 0xc5
 800100a:	f000 f8d1 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800100e:	2045      	movs	r0, #69	@ 0x45
 8001010:	f000 f8db 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001014:	2015      	movs	r0, #21
 8001016:	f000 f8d8 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800101a:	20c7      	movs	r0, #199	@ 0xc7
 800101c:	f000 f8c8 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001020:	2090      	movs	r0, #144	@ 0x90
 8001022:	f000 f8d2 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001026:	2036      	movs	r0, #54	@ 0x36
 8001028:	f000 f8c2 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800102c:	20c8      	movs	r0, #200	@ 0xc8
 800102e:	f000 f8cc 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001032:	20f2      	movs	r0, #242	@ 0xf2
 8001034:	f000 f8bc 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001038:	2000      	movs	r0, #0
 800103a:	f000 f8c6 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800103e:	20b0      	movs	r0, #176	@ 0xb0
 8001040:	f000 f8b6 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001044:	20c2      	movs	r0, #194	@ 0xc2
 8001046:	f000 f8c0 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800104a:	20b6      	movs	r0, #182	@ 0xb6
 800104c:	f000 f8b0 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001050:	200a      	movs	r0, #10
 8001052:	f000 f8ba 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001056:	20a7      	movs	r0, #167	@ 0xa7
 8001058:	f000 f8b7 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800105c:	2027      	movs	r0, #39	@ 0x27
 800105e:	f000 f8b4 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001062:	2004      	movs	r0, #4
 8001064:	f000 f8b1 	bl	80011ca <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001068:	202a      	movs	r0, #42	@ 0x2a
 800106a:	f000 f8a1 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f8ab 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001074:	2000      	movs	r0, #0
 8001076:	f000 f8a8 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f8a5 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001080:	20ef      	movs	r0, #239	@ 0xef
 8001082:	f000 f8a2 	bl	80011ca <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001086:	202b      	movs	r0, #43	@ 0x2b
 8001088:	f000 f892 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800108c:	2000      	movs	r0, #0
 800108e:	f000 f89c 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f899 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001098:	2001      	movs	r0, #1
 800109a:	f000 f896 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800109e:	203f      	movs	r0, #63	@ 0x3f
 80010a0:	f000 f893 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80010a4:	20f6      	movs	r0, #246	@ 0xf6
 80010a6:	f000 f883 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f000 f88d 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 f88a 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80010b6:	2006      	movs	r0, #6
 80010b8:	f000 f887 	bl	80011ca <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80010bc:	202c      	movs	r0, #44	@ 0x2c
 80010be:	f000 f877 	bl	80011b0 <ili9341_Write_Reg>
  LCD_Delay(200);
 80010c2:	20c8      	movs	r0, #200	@ 0xc8
 80010c4:	f000 f9e8 	bl	8001498 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80010c8:	2026      	movs	r0, #38	@ 0x26
 80010ca:	f000 f871 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 f87b 	bl	80011ca <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80010d4:	20e0      	movs	r0, #224	@ 0xe0
 80010d6:	f000 f86b 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80010da:	200f      	movs	r0, #15
 80010dc:	f000 f875 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80010e0:	2029      	movs	r0, #41	@ 0x29
 80010e2:	f000 f872 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80010e6:	2024      	movs	r0, #36	@ 0x24
 80010e8:	f000 f86f 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80010ec:	200c      	movs	r0, #12
 80010ee:	f000 f86c 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80010f2:	200e      	movs	r0, #14
 80010f4:	f000 f869 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80010f8:	2009      	movs	r0, #9
 80010fa:	f000 f866 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80010fe:	204e      	movs	r0, #78	@ 0x4e
 8001100:	f000 f863 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001104:	2078      	movs	r0, #120	@ 0x78
 8001106:	f000 f860 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800110a:	203c      	movs	r0, #60	@ 0x3c
 800110c:	f000 f85d 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001110:	2009      	movs	r0, #9
 8001112:	f000 f85a 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001116:	2013      	movs	r0, #19
 8001118:	f000 f857 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800111c:	2005      	movs	r0, #5
 800111e:	f000 f854 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001122:	2017      	movs	r0, #23
 8001124:	f000 f851 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001128:	2011      	movs	r0, #17
 800112a:	f000 f84e 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f84b 	bl	80011ca <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001134:	20e1      	movs	r0, #225	@ 0xe1
 8001136:	f000 f83b 	bl	80011b0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800113a:	2000      	movs	r0, #0
 800113c:	f000 f845 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001140:	2016      	movs	r0, #22
 8001142:	f000 f842 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001146:	201b      	movs	r0, #27
 8001148:	f000 f83f 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800114c:	2004      	movs	r0, #4
 800114e:	f000 f83c 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001152:	2011      	movs	r0, #17
 8001154:	f000 f839 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001158:	2007      	movs	r0, #7
 800115a:	f000 f836 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800115e:	2031      	movs	r0, #49	@ 0x31
 8001160:	f000 f833 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001164:	2033      	movs	r0, #51	@ 0x33
 8001166:	f000 f830 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800116a:	2042      	movs	r0, #66	@ 0x42
 800116c:	f000 f82d 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001170:	2005      	movs	r0, #5
 8001172:	f000 f82a 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001176:	200c      	movs	r0, #12
 8001178:	f000 f827 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 800117c:	200a      	movs	r0, #10
 800117e:	f000 f824 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001182:	2028      	movs	r0, #40	@ 0x28
 8001184:	f000 f821 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001188:	202f      	movs	r0, #47	@ 0x2f
 800118a:	f000 f81e 	bl	80011ca <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f81b 	bl	80011ca <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001194:	2011      	movs	r0, #17
 8001196:	f000 f80b 	bl	80011b0 <ili9341_Write_Reg>
  LCD_Delay(200);
 800119a:	20c8      	movs	r0, #200	@ 0xc8
 800119c:	f000 f97c 	bl	8001498 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80011a0:	2029      	movs	r0, #41	@ 0x29
 80011a2:	f000 f805 	bl	80011b0 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80011a6:	202c      	movs	r0, #44	@ 0x2c
 80011a8:	f000 f802 	bl	80011b0 <ili9341_Write_Reg>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f949 	bl	8001454 <LCD_IO_WriteReg>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f91a 	bl	8001410 <LCD_IO_WriteData>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80011e8:	4819      	ldr	r0, [pc, #100]	@ (8001250 <SPI_Init+0x6c>)
 80011ea:	f003 ff8e 	bl	800510a <HAL_SPI_GetState>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d12b      	bne.n	800124c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80011f4:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <SPI_Init+0x6c>)
 80011f6:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <SPI_Init+0x70>)
 80011f8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <SPI_Init+0x6c>)
 80011fc:	2218      	movs	r2, #24
 80011fe:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <SPI_Init+0x6c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <SPI_Init+0x6c>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800120c:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <SPI_Init+0x6c>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <SPI_Init+0x6c>)
 8001214:	2200      	movs	r2, #0
 8001216:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001218:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <SPI_Init+0x6c>)
 800121a:	2207      	movs	r2, #7
 800121c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <SPI_Init+0x6c>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001224:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <SPI_Init+0x6c>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <SPI_Init+0x6c>)
 800122c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001230:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001232:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <SPI_Init+0x6c>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <SPI_Init+0x6c>)
 800123a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800123e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001240:	4803      	ldr	r0, [pc, #12]	@ (8001250 <SPI_Init+0x6c>)
 8001242:	f000 f833 	bl	80012ac <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001246:	4802      	ldr	r0, [pc, #8]	@ (8001250 <SPI_Init+0x6c>)
 8001248:	f003 fd6a 	bl	8004d20 <HAL_SPI_Init>
  }
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20025978 	.word	0x20025978
 8001254:	40015000 	.word	0x40015000

08001258 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <SPI_Write+0x34>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1db9      	adds	r1, r7, #6
 800126c:	2201      	movs	r2, #1
 800126e:	4808      	ldr	r0, [pc, #32]	@ (8001290 <SPI_Write+0x38>)
 8001270:	f003 fe07 	bl	8004e82 <HAL_SPI_Transmit>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800127e:	f000 f809 	bl	8001294 <SPI_Error>
  }
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000000c 	.word	0x2000000c
 8001290:	20025978 	.word	0x20025978

08001294 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001298:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <SPI_Error+0x14>)
 800129a:	f003 fdca 	bl	8004e32 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800129e:	f7ff ffa1 	bl	80011e4 <SPI_Init>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20025978 	.word	0x20025978

080012ac <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <SPI_MspInit+0x6c>)
 80012ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012bc:	4a16      	ldr	r2, [pc, #88]	@ (8001318 <SPI_MspInit+0x6c>)
 80012be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <SPI_MspInit+0x6c>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <SPI_MspInit+0x6c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001318 <SPI_MspInit+0x6c>)
 80012da:	f043 0320 	orr.w	r3, r3, #32
 80012de:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <SPI_MspInit+0x6c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80012ec:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80012fa:	2301      	movs	r3, #1
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80012fe:	2305      	movs	r3, #5
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <SPI_MspInit+0x70>)
 800130a:	f001 f929 	bl	8002560 <HAL_GPIO_Init>
}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	@ 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40021400 	.word	0x40021400

08001320 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001326:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <LCD_IO_Init+0xe0>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d164      	bne.n	80013f8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800132e:	4b34      	ldr	r3, [pc, #208]	@ (8001400 <LCD_IO_Init+0xe0>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <LCD_IO_Init+0xe4>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133c:	4a31      	ldr	r2, [pc, #196]	@ (8001404 <LCD_IO_Init+0xe4>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	6313      	str	r3, [r2, #48]	@ 0x30
 8001344:	4b2f      	ldr	r3, [pc, #188]	@ (8001404 <LCD_IO_Init+0xe4>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001350:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001354:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4619      	mov	r1, r3
 8001368:	4827      	ldr	r0, [pc, #156]	@ (8001408 <LCD_IO_Init+0xe8>)
 800136a:	f001 f8f9 	bl	8002560 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <LCD_IO_Init+0xe4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a23      	ldr	r2, [pc, #140]	@ (8001404 <LCD_IO_Init+0xe4>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <LCD_IO_Init+0xe4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800138a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	4819      	ldr	r0, [pc, #100]	@ (8001408 <LCD_IO_Init+0xe8>)
 80013a4:	f001 f8dc 	bl	8002560 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <LCD_IO_Init+0xe4>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <LCD_IO_Init+0xe4>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b8:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <LCD_IO_Init+0xe4>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80013c4:	2304      	movs	r3, #4
 80013c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	4619      	mov	r1, r3
 80013da:	480c      	ldr	r0, [pc, #48]	@ (800140c <LCD_IO_Init+0xec>)
 80013dc:	f001 f8c0 	bl	8002560 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80013e0:	2200      	movs	r2, #0
 80013e2:	2104      	movs	r1, #4
 80013e4:	4809      	ldr	r0, [pc, #36]	@ (800140c <LCD_IO_Init+0xec>)
 80013e6:	f001 fb73 	bl	8002ad0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80013ea:	2201      	movs	r2, #1
 80013ec:	2104      	movs	r1, #4
 80013ee:	4807      	ldr	r0, [pc, #28]	@ (800140c <LCD_IO_Init+0xec>)
 80013f0:	f001 fb6e 	bl	8002ad0 <HAL_GPIO_WritePin>

    SPI_Init();
 80013f4:	f7ff fef6 	bl	80011e4 <SPI_Init>
  }
}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200259d0 	.word	0x200259d0
 8001404:	40023800 	.word	0x40023800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40020800 	.word	0x40020800

08001410 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001420:	480a      	ldr	r0, [pc, #40]	@ (800144c <LCD_IO_WriteData+0x3c>)
 8001422:	f001 fb55 	bl	8002ad0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001426:	2200      	movs	r2, #0
 8001428:	2104      	movs	r1, #4
 800142a:	4809      	ldr	r0, [pc, #36]	@ (8001450 <LCD_IO_WriteData+0x40>)
 800142c:	f001 fb50 	bl	8002ad0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff10 	bl	8001258 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001438:	2201      	movs	r2, #1
 800143a:	2104      	movs	r1, #4
 800143c:	4804      	ldr	r0, [pc, #16]	@ (8001450 <LCD_IO_WriteData+0x40>)
 800143e:	f001 fb47 	bl	8002ad0 <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40020800 	.word	0x40020800

08001454 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001464:	480a      	ldr	r0, [pc, #40]	@ (8001490 <LCD_IO_WriteReg+0x3c>)
 8001466:	f001 fb33 	bl	8002ad0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800146a:	2200      	movs	r2, #0
 800146c:	2104      	movs	r1, #4
 800146e:	4809      	ldr	r0, [pc, #36]	@ (8001494 <LCD_IO_WriteReg+0x40>)
 8001470:	f001 fb2e 	bl	8002ad0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff feed 	bl	8001258 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800147e:	2201      	movs	r2, #1
 8001480:	2104      	movs	r1, #4
 8001482:	4804      	ldr	r0, [pc, #16]	@ (8001494 <LCD_IO_WriteReg+0x40>)
 8001484:	f001 fb24 	bl	8002ad0 <HAL_GPIO_WritePin>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40020800 	.word	0x40020800

08001498 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 ff53 	bl	800234c <HAL_Delay>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b2:	f000 fed9 	bl	8002268 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 80014b6:	f000 f80d 	bl	80014d4 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 80014ba:	f7ff f861 	bl	8000580 <ApplicationInit>

  //LCD_Visual_Demo();

  HAL_Delay(5000);
 80014be:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014c2:	f000 ff43 	bl	800234c <HAL_Delay>

  screen1();
 80014c6:	f7ff fc91 	bl	8000dec <screen1>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  LCD_Touch_Polling_Demo(); // This function Will not return
 80014ca:	f7ff f871 	bl	80005b0 <LCD_Touch_Polling_Demo>

  while (1)
 80014ce:	bf00      	nop
 80014d0:	e7fd      	b.n	80014ce <main+0x20>
	...

080014d4 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b092      	sub	sp, #72	@ 0x48
 80014d8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <SystemClockOverride+0x7c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <SystemClockOverride+0x7c>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <SystemClockOverride+0x7c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fe:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001500:	2302      	movs	r3, #2
 8001502:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001504:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001508:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800150a:	2308      	movs	r3, #8
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800150e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001514:	2302      	movs	r3, #2
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001518:	2307      	movs	r3, #7
 800151a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fdba 	bl	8004098 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001524:	230f      	movs	r3, #15
 8001526:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001528:	2302      	movs	r3, #2
 800152a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001530:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001534:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001536:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800153a:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800153c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001540:	2105      	movs	r1, #5
 8001542:	4618      	mov	r0, r3
 8001544:	f003 f820 	bl	8004588 <HAL_RCC_ClockConfig>
}
 8001548:	bf00      	nop
 800154a:	3748      	adds	r7, #72	@ 0x48
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <Error_Handler+0x8>

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	4a0f      	ldr	r2, [pc, #60]	@ (80015ac <HAL_MspInit+0x4c>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001574:	6453      	str	r3, [r2, #68]	@ 0x44
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a08      	ldr	r2, [pc, #32]	@ (80015ac <HAL_MspInit+0x4c>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800159e:	2007      	movs	r0, #7
 80015a0:	f000 ffaa 	bl	80024f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a29      	ldr	r2, [pc, #164]	@ (8001674 <HAL_I2C_MspInit+0xc4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d14b      	bne.n	800166a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b28      	ldr	r3, [pc, #160]	@ (8001678 <HAL_I2C_MspInit+0xc8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a27      	ldr	r2, [pc, #156]	@ (8001678 <HAL_I2C_MspInit+0xc8>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <HAL_I2C_MspInit+0xc8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <HAL_I2C_MspInit+0xc8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a20      	ldr	r2, [pc, #128]	@ (8001678 <HAL_I2C_MspInit+0xc8>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <HAL_I2C_MspInit+0xc8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800160a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001610:	2312      	movs	r3, #18
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800161c:	2304      	movs	r3, #4
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4815      	ldr	r0, [pc, #84]	@ (800167c <HAL_I2C_MspInit+0xcc>)
 8001628:	f000 ff9a 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800162c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001632:	2312      	movs	r3, #18
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800163e:	2304      	movs	r3, #4
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	480d      	ldr	r0, [pc, #52]	@ (8001680 <HAL_I2C_MspInit+0xd0>)
 800164a:	f000 ff89 	bl	8002560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_I2C_MspInit+0xc8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	4a08      	ldr	r2, [pc, #32]	@ (8001678 <HAL_I2C_MspInit+0xc8>)
 8001658:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_I2C_MspInit+0xc8>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	@ 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40005c00 	.word	0x40005c00
 8001678:	40023800 	.word	0x40023800
 800167c:	40020800 	.word	0x40020800
 8001680:	40020000 	.word	0x40020000

08001684 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b09a      	sub	sp, #104	@ 0x68
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800169c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a0:	2230      	movs	r2, #48	@ 0x30
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 f825 	bl	80056f4 <memset>
  if(hltdc->Instance==LTDC)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a81      	ldr	r2, [pc, #516]	@ (80018b4 <HAL_LTDC_MspInit+0x230>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	f040 80fa 	bne.w	80018aa <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80016b6:	2308      	movs	r3, #8
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80016ba:	2332      	movs	r3, #50	@ 0x32
 80016bc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80016be:	2302      	movs	r3, #2
 80016c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80016c2:	2300      	movs	r3, #0
 80016c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 f968 	bl	80049a0 <HAL_RCCEx_PeriphCLKConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80016d6:	f7ff ff3d 	bl	8001554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
 80016de:	4b76      	ldr	r3, [pc, #472]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	4a75      	ldr	r2, [pc, #468]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 80016e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ea:	4b73      	ldr	r3, [pc, #460]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	4b6f      	ldr	r3, [pc, #444]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a6e      	ldr	r2, [pc, #440]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b6c      	ldr	r3, [pc, #432]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	4b68      	ldr	r3, [pc, #416]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a67      	ldr	r2, [pc, #412]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b65      	ldr	r3, [pc, #404]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	4b61      	ldr	r3, [pc, #388]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a60      	ldr	r2, [pc, #384]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b5e      	ldr	r3, [pc, #376]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b5a      	ldr	r3, [pc, #360]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a59      	ldr	r2, [pc, #356]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b57      	ldr	r3, [pc, #348]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a52      	ldr	r2, [pc, #328]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b50      	ldr	r3, [pc, #320]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b4c      	ldr	r3, [pc, #304]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a4b      	ldr	r2, [pc, #300]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b49      	ldr	r3, [pc, #292]	@ (80018b8 <HAL_LTDC_MspInit+0x234>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800179e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017a2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017b0:	230e      	movs	r3, #14
 80017b2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017b8:	4619      	mov	r1, r3
 80017ba:	4840      	ldr	r0, [pc, #256]	@ (80018bc <HAL_LTDC_MspInit+0x238>)
 80017bc:	f000 fed0 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80017c0:	f641 0358 	movw	r3, #6232	@ 0x1858
 80017c4:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017d2:	230e      	movs	r3, #14
 80017d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017da:	4619      	mov	r1, r3
 80017dc:	4838      	ldr	r0, [pc, #224]	@ (80018c0 <HAL_LTDC_MspInit+0x23c>)
 80017de:	f000 febf 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80017e2:	2303      	movs	r3, #3
 80017e4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017f2:	2309      	movs	r3, #9
 80017f4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017fa:	4619      	mov	r1, r3
 80017fc:	4831      	ldr	r0, [pc, #196]	@ (80018c4 <HAL_LTDC_MspInit+0x240>)
 80017fe:	f000 feaf 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001802:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001806:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001814:	230e      	movs	r3, #14
 8001816:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800181c:	4619      	mov	r1, r3
 800181e:	4829      	ldr	r0, [pc, #164]	@ (80018c4 <HAL_LTDC_MspInit+0x240>)
 8001820:	f000 fe9e 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001824:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001828:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001836:	230e      	movs	r3, #14
 8001838:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800183e:	4619      	mov	r1, r3
 8001840:	4821      	ldr	r0, [pc, #132]	@ (80018c8 <HAL_LTDC_MspInit+0x244>)
 8001842:	f000 fe8d 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001846:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800184a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001858:	230e      	movs	r3, #14
 800185a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001860:	4619      	mov	r1, r3
 8001862:	481a      	ldr	r0, [pc, #104]	@ (80018cc <HAL_LTDC_MspInit+0x248>)
 8001864:	f000 fe7c 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001868:	2348      	movs	r3, #72	@ 0x48
 800186a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001878:	230e      	movs	r3, #14
 800187a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001880:	4619      	mov	r1, r3
 8001882:	4813      	ldr	r0, [pc, #76]	@ (80018d0 <HAL_LTDC_MspInit+0x24c>)
 8001884:	f000 fe6c 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001888:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800188c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800189a:	2309      	movs	r3, #9
 800189c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800189e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018a2:	4619      	mov	r1, r3
 80018a4:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <HAL_LTDC_MspInit+0x244>)
 80018a6:	f000 fe5b 	bl	8002560 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80018aa:	bf00      	nop
 80018ac:	3768      	adds	r7, #104	@ 0x68
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40016800 	.word	0x40016800
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40021400 	.word	0x40021400
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40021800 	.word	0x40021800
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00

080018d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <HAL_SPI_MspInit+0x84>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12c      	bne.n	8001950 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <HAL_SPI_MspInit+0x88>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	4a17      	ldr	r2, [pc, #92]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001900:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001904:	6453      	str	r3, [r2, #68]	@ 0x44
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a10      	ldr	r2, [pc, #64]	@ (800195c <HAL_SPI_MspInit+0x88>)
 800191c:	f043 0320 	orr.w	r3, r3, #32
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800192e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001940:	2305      	movs	r3, #5
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	4805      	ldr	r0, [pc, #20]	@ (8001960 <HAL_SPI_MspInit+0x8c>)
 800194c:	f000 fe08 	bl	8002560 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	@ 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40015000 	.word	0x40015000
 800195c:	40023800 	.word	0x40023800
 8001960:	40021400 	.word	0x40021400

08001964 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a08      	ldr	r2, [pc, #32]	@ (8001994 <HAL_SPI_MspDeInit+0x30>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d10a      	bne.n	800198c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001976:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <HAL_SPI_MspDeInit+0x34>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a07      	ldr	r2, [pc, #28]	@ (8001998 <HAL_SPI_MspDeInit+0x34>)
 800197c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001982:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <HAL_SPI_MspDeInit+0x38>)
 8001988:	f000 ff96 	bl	80028b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40015000 	.word	0x40015000
 8001998:	40023800 	.word	0x40023800
 800199c:	40021400 	.word	0x40021400

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <NMI_Handler+0x4>

080019a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <MemManage_Handler+0x4>

080019b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f6:	f000 fc89 	bl	800230c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}

080019fe <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_DAC_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001a12:	f000 f9cd 	bl	8001db0 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001a16:	f000 f98d 	bl	8001d34 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	2103      	movs	r1, #3
 8001a1e:	2082      	movs	r0, #130	@ 0x82
 8001a20:	f000 fa1a 	bl	8001e58 <I2C3_Write>
    HAL_Delay(5);
 8001a24:	2005      	movs	r0, #5
 8001a26:	f000 fc91 	bl	800234c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2103      	movs	r1, #3
 8001a2e:	2082      	movs	r0, #130	@ 0x82
 8001a30:	f000 fa12 	bl	8001e58 <I2C3_Write>
    HAL_Delay(2);
 8001a34:	2002      	movs	r0, #2
 8001a36:	f000 fc89 	bl	800234c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001a3a:	1cba      	adds	r2, r7, #2
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2082      	movs	r0, #130	@ 0x82
 8001a42:	f000 fa59 	bl	8001ef8 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	f640 0211 	movw	r2, #2065	@ 0x811
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d001      	beq.n	8001a66 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e075      	b.n	8001b52 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001a66:	2202      	movs	r2, #2
 8001a68:	2103      	movs	r1, #3
 8001a6a:	2082      	movs	r0, #130	@ 0x82
 8001a6c:	f000 f9f4 	bl	8001e58 <I2C3_Write>
    HAL_Delay(5);
 8001a70:	2005      	movs	r0, #5
 8001a72:	f000 fc6b 	bl	800234c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2103      	movs	r1, #3
 8001a7a:	2082      	movs	r0, #130	@ 0x82
 8001a7c:	f000 f9ec 	bl	8001e58 <I2C3_Write>
    HAL_Delay(2);
 8001a80:	2002      	movs	r0, #2
 8001a82:	f000 fc63 	bl	800234c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001a86:	2004      	movs	r0, #4
 8001a88:	f000 f867 	bl	8001b5a <STMPE811_Read>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8001a90:	797b      	ldrb	r3, [r7, #5]
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001a98:	797b      	ldrb	r3, [r7, #5]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	2082      	movs	r0, #130	@ 0x82
 8001aa0:	f000 f9da 	bl	8001e58 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f000 f858 	bl	8001b5a <STMPE811_Read>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8001aae:	797b      	ldrb	r3, [r7, #5]
 8001ab0:	f023 0302 	bic.w	r3, r3, #2
 8001ab4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001ab6:	797b      	ldrb	r3, [r7, #5]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2104      	movs	r1, #4
 8001abc:	2082      	movs	r0, #130	@ 0x82
 8001abe:	f000 f9cb 	bl	8001e58 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8001ac2:	2249      	movs	r2, #73	@ 0x49
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	2082      	movs	r0, #130	@ 0x82
 8001ac8:	f000 f9c6 	bl	8001e58 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8001acc:	2002      	movs	r0, #2
 8001ace:	f000 fc3d 	bl	800234c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2121      	movs	r1, #33	@ 0x21
 8001ad6:	2082      	movs	r0, #130	@ 0x82
 8001ad8:	f000 f9be 	bl	8001e58 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8001adc:	2017      	movs	r0, #23
 8001ade:	f000 f83c 	bl	8001b5a <STMPE811_Read>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8001ae6:	797b      	ldrb	r3, [r7, #5]
 8001ae8:	f043 031e 	orr.w	r3, r3, #30
 8001aec:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	461a      	mov	r2, r3
 8001af2:	2117      	movs	r1, #23
 8001af4:	2082      	movs	r0, #130	@ 0x82
 8001af6:	f000 f9af 	bl	8001e58 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8001afa:	229a      	movs	r2, #154	@ 0x9a
 8001afc:	2141      	movs	r1, #65	@ 0x41
 8001afe:	2082      	movs	r0, #130	@ 0x82
 8001b00:	f000 f9aa 	bl	8001e58 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8001b04:	2201      	movs	r2, #1
 8001b06:	214a      	movs	r1, #74	@ 0x4a
 8001b08:	2082      	movs	r0, #130	@ 0x82
 8001b0a:	f000 f9a5 	bl	8001e58 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	214b      	movs	r1, #75	@ 0x4b
 8001b12:	2082      	movs	r0, #130	@ 0x82
 8001b14:	f000 f9a0 	bl	8001e58 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	214b      	movs	r1, #75	@ 0x4b
 8001b1c:	2082      	movs	r0, #130	@ 0x82
 8001b1e:	f000 f99b 	bl	8001e58 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8001b22:	2201      	movs	r2, #1
 8001b24:	2156      	movs	r1, #86	@ 0x56
 8001b26:	2082      	movs	r0, #130	@ 0x82
 8001b28:	f000 f996 	bl	8001e58 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2158      	movs	r1, #88	@ 0x58
 8001b30:	2082      	movs	r0, #130	@ 0x82
 8001b32:	f000 f991 	bl	8001e58 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8001b36:	2203      	movs	r2, #3
 8001b38:	2140      	movs	r1, #64	@ 0x40
 8001b3a:	2082      	movs	r0, #130	@ 0x82
 8001b3c:	f000 f98c 	bl	8001e58 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001b40:	22ff      	movs	r2, #255	@ 0xff
 8001b42:	210b      	movs	r1, #11
 8001b44:	2082      	movs	r0, #130	@ 0x82
 8001b46:	f000 f987 	bl	8001e58 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8001b4a:	20c8      	movs	r0, #200	@ 0xc8
 8001b4c:	f000 fbfe 	bl	800234c <HAL_Delay>

    return STMPE811_State_Ok;
 8001b50:	2302      	movs	r3, #2

}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8001b64:	f107 020f 	add.w	r2, r7, #15
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	2082      	movs	r0, #130	@ 0x82
 8001b6e:	f000 f99d 	bl	8001eac <I2C3_Read>

    return readData;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	791a      	ldrb	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8001b8c:	2040      	movs	r0, #64	@ 0x40
 8001b8e:	f7ff ffe4 	bl	8001b5a <STMPE811_Read>
 8001b92:	4603      	mov	r3, r0
 8001b94:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0e      	blt.n	8001bbc <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	214b      	movs	r1, #75	@ 0x4b
 8001ba8:	2082      	movs	r0, #130	@ 0x82
 8001baa:	f000 f955 	bl	8001e58 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	214b      	movs	r1, #75	@ 0x4b
 8001bb2:	2082      	movs	r0, #130	@ 0x82
 8001bb4:	f000 f950 	bl	8001e58 <I2C3_Write>

        return STMPE811_State_Released;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0a7      	b.n	8001d0c <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	799b      	ldrb	r3, [r3, #6]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d117      	bne.n	8001bf4 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f9b7 	bl	8001f3c <TM_STMPE811_ReadX>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	885b      	ldrh	r3, [r3, #2]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fa0a 	bl	8001ff8 <TM_STMPE811_ReadY>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001bea:	3301      	adds	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	805a      	strh	r2, [r3, #2]
 8001bf2:	e048      	b.n	8001c86 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	799b      	ldrb	r3, [r3, #6]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d112      	bne.n	8001c22 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f99b 	bl	8001f3c <TM_STMPE811_ReadX>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	885b      	ldrh	r3, [r3, #2]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f9f0 	bl	8001ff8 <TM_STMPE811_ReadY>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	805a      	strh	r2, [r3, #2]
 8001c20:	e031      	b.n	8001c86 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	799b      	ldrb	r3, [r3, #6]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d115      	bne.n	8001c56 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	885b      	ldrh	r3, [r3, #2]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f984 	bl	8001f3c <TM_STMPE811_ReadX>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 f9d9 	bl	8001ff8 <TM_STMPE811_ReadY>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	e017      	b.n	8001c86 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	799b      	ldrb	r3, [r3, #6]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d113      	bne.n	8001c86 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f96a 	bl	8001f3c <TM_STMPE811_ReadX>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f9bd 	bl	8001ff8 <TM_STMPE811_ReadY>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001c86:	2201      	movs	r2, #1
 8001c88:	214b      	movs	r1, #75	@ 0x4b
 8001c8a:	2082      	movs	r0, #130	@ 0x82
 8001c8c:	f000 f8e4 	bl	8001e58 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001c90:	2200      	movs	r2, #0
 8001c92:	214b      	movs	r1, #75	@ 0x4b
 8001c94:	2082      	movs	r0, #130	@ 0x82
 8001c96:	f000 f8df 	bl	8001e58 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	799b      	ldrb	r3, [r3, #6]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <STMPE811_ReadTouch+0x12e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	799b      	ldrb	r3, [r3, #6]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d115      	bne.n	8001cd6 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d027      	beq.n	8001d02 <STMPE811_ReadTouch+0x186>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	2bee      	cmp	r3, #238	@ 0xee
 8001cb8:	d823      	bhi.n	8001d02 <STMPE811_ReadTouch+0x186>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	885b      	ldrh	r3, [r3, #2]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d01f      	beq.n	8001d02 <STMPE811_ReadTouch+0x186>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	885b      	ldrh	r3, [r3, #2]
 8001cc6:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001cca:	d81a      	bhi.n	8001d02 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e01a      	b.n	8001d0c <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d012      	beq.n	8001d04 <STMPE811_ReadTouch+0x188>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001ce6:	d80d      	bhi.n	8001d04 <STMPE811_ReadTouch+0x188>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	885b      	ldrh	r3, [r3, #2]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <STMPE811_ReadTouch+0x188>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	885b      	ldrh	r3, [r3, #2]
 8001cf4:	2bee      	cmp	r3, #238	@ 0xee
 8001cf6:	d805      	bhi.n	8001d04 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e004      	b.n	8001d0c <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8001d02:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20025a28 	.word	0x20025a28

08001d34 <I2C3_Init>:

static void I2C3_Init()
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4b18      	ldr	r3, [pc, #96]	@ (8001da0 <I2C3_Init+0x6c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	4a17      	ldr	r2, [pc, #92]	@ (8001da0 <I2C3_Init+0x6c>)
 8001d44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <I2C3_Init+0x6c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8001d56:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <I2C3_Init+0x70>)
 8001d58:	4a13      	ldr	r2, [pc, #76]	@ (8001da8 <I2C3_Init+0x74>)
 8001d5a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <I2C3_Init+0x70>)
 8001d5e:	4a13      	ldr	r2, [pc, #76]	@ (8001dac <I2C3_Init+0x78>)
 8001d60:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <I2C3_Init+0x70>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8001d68:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <I2C3_Init+0x70>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <I2C3_Init+0x70>)
 8001d70:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d74:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <I2C3_Init+0x70>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <I2C3_Init+0x70>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8001d82:	4808      	ldr	r0, [pc, #32]	@ (8001da4 <I2C3_Init+0x70>)
 8001d84:	f000 febe 	bl	8002b04 <HAL_I2C_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8001d92:	bf00      	nop
 8001d94:	e7fd      	b.n	8001d92 <I2C3_Init+0x5e>
    }
    return;
 8001d96:	bf00      	nop
}
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	200259d4 	.word	0x200259d4
 8001da8:	40005c00 	.word	0x40005c00
 8001dac:	000186a0 	.word	0x000186a0

08001db0 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <I2C3_MspInit+0x9c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a1f      	ldr	r2, [pc, #124]	@ (8001e4c <I2C3_MspInit+0x9c>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <I2C3_MspInit+0x9c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <I2C3_MspInit+0x9c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a18      	ldr	r2, [pc, #96]	@ (8001e4c <I2C3_MspInit+0x9c>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <I2C3_MspInit+0x9c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001dfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e04:	2312      	movs	r3, #18
 8001e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e10:	2304      	movs	r3, #4
 8001e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <I2C3_MspInit+0xa0>)
 8001e1c:	f000 fba0 	bl	8002560 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001e20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e26:	2312      	movs	r3, #18
 8001e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e32:	2304      	movs	r3, #4
 8001e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <I2C3_MspInit+0xa4>)
 8001e3e:	f000 fb8f 	bl	8002560 <HAL_GPIO_Init>
    
}
 8001e42:	bf00      	nop
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020000 	.word	0x40020000

08001e58 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af04      	add	r7, sp, #16
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
 8001e62:	460b      	mov	r3, r1
 8001e64:	717b      	strb	r3, [r7, #5]
 8001e66:	4613      	mov	r3, r2
 8001e68:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8001e6a:	793b      	ldrb	r3, [r7, #4]
 8001e6c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8001e6e:	797b      	ldrb	r3, [r7, #5]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	88f9      	ldrh	r1, [r7, #6]
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <I2C3_Write+0x48>)
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	2301      	movs	r3, #1
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	f107 030f 	add.w	r3, r7, #15
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2301      	movs	r3, #1
 8001e84:	4807      	ldr	r0, [pc, #28]	@ (8001ea4 <I2C3_Write+0x4c>)
 8001e86:	f000 ff81 	bl	8002d8c <HAL_I2C_Mem_Write>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <I2C3_Write+0x50>)
 8001e90:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8001e92:	f7ff ff3f 	bl	8001d14 <verifyHAL_I2C_IS_OKAY>
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	0003d090 	.word	0x0003d090
 8001ea4:	200259d4 	.word	0x200259d4
 8001ea8:	20025a28 	.word	0x20025a28

08001eac <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af04      	add	r7, sp, #16
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	603a      	str	r2, [r7, #0]
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	b299      	uxth	r1, r3
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <I2C3_Read+0x40>)
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	4807      	ldr	r0, [pc, #28]	@ (8001ef0 <I2C3_Read+0x44>)
 8001ed4:	f001 f854 	bl	8002f80 <HAL_I2C_Mem_Read>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <I2C3_Read+0x48>)
 8001ede:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8001ee0:	f7ff ff18 	bl	8001d14 <verifyHAL_I2C_IS_OKAY>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	0003d090 	.word	0x0003d090
 8001ef0:	200259d4 	.word	0x200259d4
 8001ef4:	20025a28 	.word	0x20025a28

08001ef8 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af04      	add	r7, sp, #16
 8001efe:	603a      	str	r2, [r7, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
 8001f06:	460b      	mov	r3, r1
 8001f08:	71bb      	strb	r3, [r7, #6]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	b299      	uxth	r1, r3
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <I2C3_MulitByteRead+0x3c>)
 8001f18:	9302      	str	r3, [sp, #8]
 8001f1a:	88bb      	ldrh	r3, [r7, #4]
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2301      	movs	r3, #1
 8001f24:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <I2C3_MulitByteRead+0x40>)
 8001f26:	f001 f82b 	bl	8002f80 <HAL_I2C_Mem_Read>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	0003d090 	.word	0x0003d090
 8001f38:	200259d4 	.word	0x200259d4

08001f3c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8001f46:	204d      	movs	r0, #77	@ 0x4d
 8001f48:	f7ff fe07 	bl	8001b5a <STMPE811_Read>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8001f50:	204e      	movs	r0, #78	@ 0x4e
 8001f52:	f7ff fe02 	bl	8001b5a <STMPE811_Read>
 8001f56:	4603      	mov	r3, r0
 8001f58:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8001f5a:	7a7b      	ldrb	r3, [r7, #9]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	b21a      	sxth	r2, r3
 8001f60:	7a3b      	ldrb	r3, [r7, #8]
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	4313      	orrs	r3, r2
 8001f66:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8001f68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f6c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001f70:	4293      	cmp	r3, r2
 8001f72:	dc06      	bgt.n	8001f82 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8001f74:	89fb      	ldrh	r3, [r7, #14]
 8001f76:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8001f7a:	330c      	adds	r3, #12
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	81fb      	strh	r3, [r7, #14]
 8001f80:	e005      	b.n	8001f8e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8001f82:	89fb      	ldrh	r3, [r7, #14]
 8001f84:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8001f88:	3308      	adds	r3, #8
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8001f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f92:	4a18      	ldr	r2, [pc, #96]	@ (8001ff4 <TM_STMPE811_ReadX+0xb8>)
 8001f94:	fb82 1203 	smull	r1, r2, r2, r3
 8001f98:	441a      	add	r2, r3
 8001f9a:	10d2      	asrs	r2, r2, #3
 8001f9c:	17db      	asrs	r3, r3, #31
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8001fa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fa6:	2bef      	cmp	r3, #239	@ 0xef
 8001fa8:	dd02      	ble.n	8001fb0 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8001faa:	23ef      	movs	r3, #239	@ 0xef
 8001fac:	81fb      	strh	r3, [r7, #14]
 8001fae:	e005      	b.n	8001fbc <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8001fb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da01      	bge.n	8001fbc <TM_STMPE811_ReadX+0x80>
        val = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8001fbc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	dd05      	ble.n	8001fd2 <TM_STMPE811_ReadX+0x96>
 8001fc6:	89fa      	ldrh	r2, [r7, #14]
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	e004      	b.n	8001fdc <TM_STMPE811_ReadX+0xa0>
 8001fd2:	89fb      	ldrh	r3, [r7, #14]
 8001fd4:	88fa      	ldrh	r2, [r7, #6]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8001fde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	dd01      	ble.n	8001fea <TM_STMPE811_ReadX+0xae>
        return val;
 8001fe6:	89fb      	ldrh	r3, [r7, #14]
 8001fe8:	e000      	b.n	8001fec <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8001fea:	88fb      	ldrh	r3, [r7, #6]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	88888889 	.word	0x88888889

08001ff8 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002002:	204f      	movs	r0, #79	@ 0x4f
 8002004:	f7ff fda9 	bl	8001b5a <STMPE811_Read>
 8002008:	4603      	mov	r3, r0
 800200a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 800200c:	2050      	movs	r0, #80	@ 0x50
 800200e:	f7ff fda4 	bl	8001b5a <STMPE811_Read>
 8002012:	4603      	mov	r3, r0
 8002014:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002016:	7a7b      	ldrb	r3, [r7, #9]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	b21a      	sxth	r2, r3
 800201c:	7a3b      	ldrb	r3, [r7, #8]
 800201e:	b21b      	sxth	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002024:	89fb      	ldrh	r3, [r7, #14]
 8002026:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800202a:	b29b      	uxth	r3, r3
 800202c:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800202e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002032:	4a19      	ldr	r2, [pc, #100]	@ (8002098 <TM_STMPE811_ReadY+0xa0>)
 8002034:	fb82 1203 	smull	r1, r2, r2, r3
 8002038:	1052      	asrs	r2, r2, #1
 800203a:	17db      	asrs	r3, r3, #31
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002040:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002044:	2b00      	cmp	r3, #0
 8002046:	dc02      	bgt.n	800204e <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	81fb      	strh	r3, [r7, #14]
 800204c:	e007      	b.n	800205e <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800204e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002052:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002056:	db02      	blt.n	800205e <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002058:	f240 133f 	movw	r3, #319	@ 0x13f
 800205c:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800205e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	429a      	cmp	r2, r3
 8002066:	dd05      	ble.n	8002074 <TM_STMPE811_ReadY+0x7c>
 8002068:	89fa      	ldrh	r2, [r7, #14]
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	b29b      	uxth	r3, r3
 8002070:	b21b      	sxth	r3, r3
 8002072:	e004      	b.n	800207e <TM_STMPE811_ReadY+0x86>
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	b29b      	uxth	r3, r3
 800207c:	b21b      	sxth	r3, r3
 800207e:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002080:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002084:	2b04      	cmp	r3, #4
 8002086:	dd01      	ble.n	800208c <TM_STMPE811_ReadY+0x94>
        return val;
 8002088:	89fb      	ldrh	r3, [r7, #14]
 800208a:	e000      	b.n	800208e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 800208c:	88fb      	ldrh	r3, [r7, #6]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2e8ba2e9 	.word	0x2e8ba2e9

0800209c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e00a      	b.n	80020d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020bc:	f3af 8000 	nop.w
 80020c0:	4601      	mov	r1, r0
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	60ba      	str	r2, [r7, #8]
 80020c8:	b2ca      	uxtb	r2, r1
 80020ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3301      	adds	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	dbf0      	blt.n	80020bc <_read+0x12>
  }

  return len;
 80020da:	687b      	ldr	r3, [r7, #4]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e009      	b.n	800210a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	60ba      	str	r2, [r7, #8]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3301      	adds	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	429a      	cmp	r2, r3
 8002110:	dbf1      	blt.n	80020f6 <_write+0x12>
  }
  return len;
 8002112:	687b      	ldr	r3, [r7, #4]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_close>:

int _close(int file)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002144:	605a      	str	r2, [r3, #4]
  return 0;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_isatty>:

int _isatty(int file)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800215c:	2301      	movs	r3, #1
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800218c:	4a14      	ldr	r2, [pc, #80]	@ (80021e0 <_sbrk+0x5c>)
 800218e:	4b15      	ldr	r3, [pc, #84]	@ (80021e4 <_sbrk+0x60>)
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002198:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a0:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <_sbrk+0x64>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	@ (80021ec <_sbrk+0x68>)
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a6:	4b10      	ldr	r3, [pc, #64]	@ (80021e8 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d207      	bcs.n	80021c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b4:	f003 faec 	bl	8005790 <__errno>
 80021b8:	4603      	mov	r3, r0
 80021ba:	220c      	movs	r2, #12
 80021bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021c2:	e009      	b.n	80021d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c4:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ca:	4b07      	ldr	r3, [pc, #28]	@ (80021e8 <_sbrk+0x64>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	4a05      	ldr	r2, [pc, #20]	@ (80021e8 <_sbrk+0x64>)
 80021d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d6:	68fb      	ldr	r3, [r7, #12]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20030000 	.word	0x20030000
 80021e4:	00000400 	.word	0x00000400
 80021e8:	20025a2c 	.word	0x20025a2c
 80021ec:	20025b80 	.word	0x20025b80

080021f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <SystemInit+0x20>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <SystemInit+0x20>)
 80021fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002200:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002214:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800224c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002218:	f7ff ffea 	bl	80021f0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800221c:	480c      	ldr	r0, [pc, #48]	@ (8002250 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800221e:	490d      	ldr	r1, [pc, #52]	@ (8002254 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002220:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002224:	e002      	b.n	800222c <LoopCopyDataInit>

08002226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222a:	3304      	adds	r3, #4

0800222c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800222c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002230:	d3f9      	bcc.n	8002226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002234:	4c0a      	ldr	r4, [pc, #40]	@ (8002260 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002238:	e001      	b.n	800223e <LoopFillZerobss>

0800223a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800223c:	3204      	adds	r2, #4

0800223e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002240:	d3fb      	bcc.n	800223a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002242:	f003 faab 	bl	800579c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002246:	f7ff f932 	bl	80014ae <main>
  bx  lr    
 800224a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800224c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002254:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002258:	08007464 	.word	0x08007464
  ldr r2, =_sbss
 800225c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002260:	20025b80 	.word	0x20025b80

08002264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC_IRQHandler>
	...

08002268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800226c:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0d      	ldr	r2, [pc, #52]	@ (80022a8 <HAL_Init+0x40>)
 8002272:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0a      	ldr	r2, [pc, #40]	@ (80022a8 <HAL_Init+0x40>)
 800227e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002284:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a07      	ldr	r2, [pc, #28]	@ (80022a8 <HAL_Init+0x40>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002290:	2003      	movs	r0, #3
 8002292:	f000 f931 	bl	80024f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002296:	2000      	movs	r0, #0
 8002298:	f000 f808 	bl	80022ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800229c:	f7ff f960 	bl	8001560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023c00 	.word	0x40023c00

080022ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b4:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_InitTick+0x54>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <HAL_InitTick+0x58>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f93b 	bl	8002546 <HAL_SYSTICK_Config>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00e      	b.n	80022f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b0f      	cmp	r3, #15
 80022de:	d80a      	bhi.n	80022f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e0:	2200      	movs	r2, #0
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022e8:	f000 f911 	bl	800250e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ec:	4a06      	ldr	r2, [pc, #24]	@ (8002308 <HAL_InitTick+0x5c>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000010 	.word	0x20000010
 8002304:	20000018 	.word	0x20000018
 8002308:	20000014 	.word	0x20000014

0800230c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002310:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_IncTick+0x20>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_IncTick+0x24>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4413      	add	r3, r2
 800231c:	4a04      	ldr	r2, [pc, #16]	@ (8002330 <HAL_IncTick+0x24>)
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000018 	.word	0x20000018
 8002330:	20025a30 	.word	0x20025a30

08002334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return uwTick;
 8002338:	4b03      	ldr	r3, [pc, #12]	@ (8002348 <HAL_GetTick+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20025a30 	.word	0x20025a30

0800234c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002354:	f7ff ffee 	bl	8002334 <HAL_GetTick>
 8002358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002364:	d005      	beq.n	8002372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <HAL_Delay+0x44>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002372:	bf00      	nop
 8002374:	f7ff ffde 	bl	8002334 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	429a      	cmp	r2, r3
 8002382:	d8f7      	bhi.n	8002374 <HAL_Delay+0x28>
  {
  }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000018 	.word	0x20000018

08002394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a4:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023b0:	4013      	ands	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c6:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	60d3      	str	r3, [r2, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e0:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <__NVIC_GetPriorityGrouping+0x18>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	f003 0307 	and.w	r3, r3, #7
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	@ (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	@ (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	@ 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002494:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43d9      	mvns	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	4313      	orrs	r3, r2
         );
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	@ 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024c4:	d301      	bcc.n	80024ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00f      	b.n	80024ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ca:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <SysTick_Config+0x40>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d2:	210f      	movs	r1, #15
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024d8:	f7ff ff8e 	bl	80023f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024dc:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <SysTick_Config+0x40>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e2:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <SysTick_Config+0x40>)
 80024e4:	2207      	movs	r2, #7
 80024e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	e000e010 	.word	0xe000e010

080024f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff47 	bl	8002394 <__NVIC_SetPriorityGrouping>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002520:	f7ff ff5c 	bl	80023dc <__NVIC_GetPriorityGrouping>
 8002524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f7ff ff8e 	bl	800244c <NVIC_EncodePriority>
 8002530:	4602      	mov	r2, r0
 8002532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff5d 	bl	80023f8 <__NVIC_SetPriority>
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff ffb0 	bl	80024b4 <SysTick_Config>
 8002554:	4603      	mov	r3, r0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	@ 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	e177      	b.n	800286c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800257c:	2201      	movs	r2, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	429a      	cmp	r2, r3
 8002596:	f040 8166 	bne.w	8002866 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d005      	beq.n	80025b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d130      	bne.n	8002614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 0201 	and.w	r2, r3, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b03      	cmp	r3, #3
 800261e:	d017      	beq.n	8002650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d123      	bne.n	80026a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	08da      	lsrs	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3208      	adds	r2, #8
 8002664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	220f      	movs	r2, #15
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	08da      	lsrs	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3208      	adds	r2, #8
 800269e:	69b9      	ldr	r1, [r7, #24]
 80026a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0203 	and.w	r2, r3, #3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80c0 	beq.w	8002866 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b66      	ldr	r3, [pc, #408]	@ (8002884 <HAL_GPIO_Init+0x324>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	4a65      	ldr	r2, [pc, #404]	@ (8002884 <HAL_GPIO_Init+0x324>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f6:	4b63      	ldr	r3, [pc, #396]	@ (8002884 <HAL_GPIO_Init+0x324>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002702:	4a61      	ldr	r2, [pc, #388]	@ (8002888 <HAL_GPIO_Init+0x328>)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a58      	ldr	r2, [pc, #352]	@ (800288c <HAL_GPIO_Init+0x32c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d037      	beq.n	800279e <HAL_GPIO_Init+0x23e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a57      	ldr	r2, [pc, #348]	@ (8002890 <HAL_GPIO_Init+0x330>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d031      	beq.n	800279a <HAL_GPIO_Init+0x23a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a56      	ldr	r2, [pc, #344]	@ (8002894 <HAL_GPIO_Init+0x334>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d02b      	beq.n	8002796 <HAL_GPIO_Init+0x236>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a55      	ldr	r2, [pc, #340]	@ (8002898 <HAL_GPIO_Init+0x338>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d025      	beq.n	8002792 <HAL_GPIO_Init+0x232>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a54      	ldr	r2, [pc, #336]	@ (800289c <HAL_GPIO_Init+0x33c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01f      	beq.n	800278e <HAL_GPIO_Init+0x22e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a53      	ldr	r2, [pc, #332]	@ (80028a0 <HAL_GPIO_Init+0x340>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0x22a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a52      	ldr	r2, [pc, #328]	@ (80028a4 <HAL_GPIO_Init+0x344>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0x226>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a51      	ldr	r2, [pc, #324]	@ (80028a8 <HAL_GPIO_Init+0x348>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00d      	beq.n	8002782 <HAL_GPIO_Init+0x222>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a50      	ldr	r2, [pc, #320]	@ (80028ac <HAL_GPIO_Init+0x34c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x21e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4f      	ldr	r2, [pc, #316]	@ (80028b0 <HAL_GPIO_Init+0x350>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_GPIO_Init+0x21a>
 8002776:	2309      	movs	r3, #9
 8002778:	e012      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800277a:	230a      	movs	r3, #10
 800277c:	e010      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800277e:	2308      	movs	r3, #8
 8002780:	e00e      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002782:	2307      	movs	r3, #7
 8002784:	e00c      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002786:	2306      	movs	r3, #6
 8002788:	e00a      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800278a:	2305      	movs	r3, #5
 800278c:	e008      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800278e:	2304      	movs	r3, #4
 8002790:	e006      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002792:	2303      	movs	r3, #3
 8002794:	e004      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002796:	2302      	movs	r3, #2
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800279e:	2300      	movs	r3, #0
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	f002 0203 	and.w	r2, r2, #3
 80027a6:	0092      	lsls	r2, r2, #2
 80027a8:	4093      	lsls	r3, r2
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b0:	4935      	ldr	r1, [pc, #212]	@ (8002888 <HAL_GPIO_Init+0x328>)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027be:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027e2:	4a34      	ldr	r2, [pc, #208]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e8:	4b32      	ldr	r3, [pc, #200]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800280c:	4a29      	ldr	r2, [pc, #164]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002812:	4b28      	ldr	r3, [pc, #160]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002836:	4a1f      	ldr	r2, [pc, #124]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800283c:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002860:	4a14      	ldr	r2, [pc, #80]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3301      	adds	r3, #1
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	f67f ae84 	bls.w	800257c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3724      	adds	r7, #36	@ 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	40013800 	.word	0x40013800
 800288c:	40020000 	.word	0x40020000
 8002890:	40020400 	.word	0x40020400
 8002894:	40020800 	.word	0x40020800
 8002898:	40020c00 	.word	0x40020c00
 800289c:	40021000 	.word	0x40021000
 80028a0:	40021400 	.word	0x40021400
 80028a4:	40021800 	.word	0x40021800
 80028a8:	40021c00 	.word	0x40021c00
 80028ac:	40022000 	.word	0x40022000
 80028b0:	40022400 	.word	0x40022400
 80028b4:	40013c00 	.word	0x40013c00

080028b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e0d9      	b.n	8002a88 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028d4:	2201      	movs	r2, #1
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	f040 80c9 	bne.w	8002a82 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80028f0:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa0 <HAL_GPIO_DeInit+0x1e8>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a63      	ldr	r2, [pc, #396]	@ (8002aa4 <HAL_GPIO_DeInit+0x1ec>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d037      	beq.n	800298a <HAL_GPIO_DeInit+0xd2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a62      	ldr	r2, [pc, #392]	@ (8002aa8 <HAL_GPIO_DeInit+0x1f0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d031      	beq.n	8002986 <HAL_GPIO_DeInit+0xce>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a61      	ldr	r2, [pc, #388]	@ (8002aac <HAL_GPIO_DeInit+0x1f4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d02b      	beq.n	8002982 <HAL_GPIO_DeInit+0xca>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a60      	ldr	r2, [pc, #384]	@ (8002ab0 <HAL_GPIO_DeInit+0x1f8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d025      	beq.n	800297e <HAL_GPIO_DeInit+0xc6>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a5f      	ldr	r2, [pc, #380]	@ (8002ab4 <HAL_GPIO_DeInit+0x1fc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01f      	beq.n	800297a <HAL_GPIO_DeInit+0xc2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a5e      	ldr	r2, [pc, #376]	@ (8002ab8 <HAL_GPIO_DeInit+0x200>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d019      	beq.n	8002976 <HAL_GPIO_DeInit+0xbe>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a5d      	ldr	r2, [pc, #372]	@ (8002abc <HAL_GPIO_DeInit+0x204>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_GPIO_DeInit+0xba>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ac0 <HAL_GPIO_DeInit+0x208>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00d      	beq.n	800296e <HAL_GPIO_DeInit+0xb6>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a5b      	ldr	r2, [pc, #364]	@ (8002ac4 <HAL_GPIO_DeInit+0x20c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d007      	beq.n	800296a <HAL_GPIO_DeInit+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ac8 <HAL_GPIO_DeInit+0x210>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_GPIO_DeInit+0xae>
 8002962:	2309      	movs	r3, #9
 8002964:	e012      	b.n	800298c <HAL_GPIO_DeInit+0xd4>
 8002966:	230a      	movs	r3, #10
 8002968:	e010      	b.n	800298c <HAL_GPIO_DeInit+0xd4>
 800296a:	2308      	movs	r3, #8
 800296c:	e00e      	b.n	800298c <HAL_GPIO_DeInit+0xd4>
 800296e:	2307      	movs	r3, #7
 8002970:	e00c      	b.n	800298c <HAL_GPIO_DeInit+0xd4>
 8002972:	2306      	movs	r3, #6
 8002974:	e00a      	b.n	800298c <HAL_GPIO_DeInit+0xd4>
 8002976:	2305      	movs	r3, #5
 8002978:	e008      	b.n	800298c <HAL_GPIO_DeInit+0xd4>
 800297a:	2304      	movs	r3, #4
 800297c:	e006      	b.n	800298c <HAL_GPIO_DeInit+0xd4>
 800297e:	2303      	movs	r3, #3
 8002980:	e004      	b.n	800298c <HAL_GPIO_DeInit+0xd4>
 8002982:	2302      	movs	r3, #2
 8002984:	e002      	b.n	800298c <HAL_GPIO_DeInit+0xd4>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_GPIO_DeInit+0xd4>
 800298a:	2300      	movs	r3, #0
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	f002 0203 	and.w	r2, r2, #3
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	4093      	lsls	r3, r2
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	d132      	bne.n	8002a02 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800299c:	4b4b      	ldr	r3, [pc, #300]	@ (8002acc <HAL_GPIO_DeInit+0x214>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	4949      	ldr	r1, [pc, #292]	@ (8002acc <HAL_GPIO_DeInit+0x214>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80029aa:	4b48      	ldr	r3, [pc, #288]	@ (8002acc <HAL_GPIO_DeInit+0x214>)
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	4946      	ldr	r1, [pc, #280]	@ (8002acc <HAL_GPIO_DeInit+0x214>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80029b8:	4b44      	ldr	r3, [pc, #272]	@ (8002acc <HAL_GPIO_DeInit+0x214>)
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	43db      	mvns	r3, r3
 80029c0:	4942      	ldr	r1, [pc, #264]	@ (8002acc <HAL_GPIO_DeInit+0x214>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80029c6:	4b41      	ldr	r3, [pc, #260]	@ (8002acc <HAL_GPIO_DeInit+0x214>)
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	493f      	ldr	r1, [pc, #252]	@ (8002acc <HAL_GPIO_DeInit+0x214>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	220f      	movs	r2, #15
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80029e4:	4a2e      	ldr	r2, [pc, #184]	@ (8002aa0 <HAL_GPIO_DeInit+0x1e8>)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	3302      	adds	r3, #2
 80029ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	43da      	mvns	r2, r3
 80029f4:	482a      	ldr	r0, [pc, #168]	@ (8002aa0 <HAL_GPIO_DeInit+0x1e8>)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	400a      	ands	r2, r1
 80029fc:	3302      	adds	r3, #2
 80029fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2103      	movs	r1, #3
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	401a      	ands	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	08da      	lsrs	r2, r3, #3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3208      	adds	r2, #8
 8002a20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	08d2      	lsrs	r2, r2, #3
 8002a38:	4019      	ands	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2103      	movs	r1, #3
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	401a      	ands	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	401a      	ands	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2103      	movs	r1, #3
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3301      	adds	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f af22 	bls.w	80028d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40021400 	.word	0x40021400
 8002abc:	40021800 	.word	0x40021800
 8002ac0:	40021c00 	.word	0x40021c00
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	40022400 	.word	0x40022400
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aec:	e003      	b.n	8002af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e12b      	b.n	8002d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe fd40 	bl	80015b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2224      	movs	r2, #36	@ 0x24
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b68:	f001 ff06 	bl	8004978 <HAL_RCC_GetPCLK1Freq>
 8002b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a81      	ldr	r2, [pc, #516]	@ (8002d78 <HAL_I2C_Init+0x274>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d807      	bhi.n	8002b88 <HAL_I2C_Init+0x84>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a80      	ldr	r2, [pc, #512]	@ (8002d7c <HAL_I2C_Init+0x278>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	bf94      	ite	ls
 8002b80:	2301      	movls	r3, #1
 8002b82:	2300      	movhi	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e006      	b.n	8002b96 <HAL_I2C_Init+0x92>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d80 <HAL_I2C_Init+0x27c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	bf94      	ite	ls
 8002b90:	2301      	movls	r3, #1
 8002b92:	2300      	movhi	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0e7      	b.n	8002d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a78      	ldr	r2, [pc, #480]	@ (8002d84 <HAL_I2C_Init+0x280>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	0c9b      	lsrs	r3, r3, #18
 8002ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a6a      	ldr	r2, [pc, #424]	@ (8002d78 <HAL_I2C_Init+0x274>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d802      	bhi.n	8002bd8 <HAL_I2C_Init+0xd4>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	e009      	b.n	8002bec <HAL_I2C_Init+0xe8>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	4a69      	ldr	r2, [pc, #420]	@ (8002d88 <HAL_I2C_Init+0x284>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	3301      	adds	r3, #1
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	495c      	ldr	r1, [pc, #368]	@ (8002d78 <HAL_I2C_Init+0x274>)
 8002c08:	428b      	cmp	r3, r1
 8002c0a:	d819      	bhi.n	8002c40 <HAL_I2C_Init+0x13c>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e59      	subs	r1, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c1a:	1c59      	adds	r1, r3, #1
 8002c1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c20:	400b      	ands	r3, r1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_I2C_Init+0x138>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1e59      	subs	r1, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3a:	e051      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	e04f      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d111      	bne.n	8002c6c <HAL_I2C_Init+0x168>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1e58      	subs	r0, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	440b      	add	r3, r1
 8002c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e012      	b.n	8002c92 <HAL_I2C_Init+0x18e>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e58      	subs	r0, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	0099      	lsls	r1, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Init+0x196>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e022      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_I2C_Init+0x1bc>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1e58      	subs	r0, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	440b      	add	r3, r1
 8002cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cbe:	e00f      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1e58      	subs	r0, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	0099      	lsls	r1, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	6809      	ldr	r1, [r1, #0]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6911      	ldr	r1, [r2, #16]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68d2      	ldr	r2, [r2, #12]
 8002d1a:	4311      	orrs	r1, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	000186a0 	.word	0x000186a0
 8002d7c:	001e847f 	.word	0x001e847f
 8002d80:	003d08ff 	.word	0x003d08ff
 8002d84:	431bde83 	.word	0x431bde83
 8002d88:	10624dd3 	.word	0x10624dd3

08002d8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	813b      	strh	r3, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002da6:	f7ff fac5 	bl	8002334 <HAL_GetTick>
 8002daa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	f040 80d9 	bne.w	8002f6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2319      	movs	r3, #25
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	496d      	ldr	r1, [pc, #436]	@ (8002f78 <HAL_I2C_Mem_Write+0x1ec>)
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fc8b 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0cc      	b.n	8002f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2C_Mem_Write+0x56>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e0c5      	b.n	8002f6e <HAL_I2C_Mem_Write+0x1e2>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d007      	beq.n	8002e08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2221      	movs	r2, #33	@ 0x21
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2240      	movs	r2, #64	@ 0x40
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a3a      	ldr	r2, [r7, #32]
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a4d      	ldr	r2, [pc, #308]	@ (8002f7c <HAL_I2C_Mem_Write+0x1f0>)
 8002e48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e4a:	88f8      	ldrh	r0, [r7, #6]
 8002e4c:	893a      	ldrh	r2, [r7, #8]
 8002e4e:	8979      	ldrh	r1, [r7, #10]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	4603      	mov	r3, r0
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fac2 	bl	80033e4 <I2C_RequestMemoryWrite>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d052      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e081      	b.n	8002f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fd50 	bl	8003914 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00d      	beq.n	8002e96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d107      	bne.n	8002e92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e06b      	b.n	8002f6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d11b      	bne.n	8002f0c <HAL_I2C_Mem_Write+0x180>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d017      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1aa      	bne.n	8002e6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fd43 	bl	80039a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d107      	bne.n	8002f3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e016      	b.n	8002f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e000      	b.n	8002f6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
  }
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	00100002 	.word	0x00100002
 8002f7c:	ffff0000 	.word	0xffff0000

08002f80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08c      	sub	sp, #48	@ 0x30
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	4608      	mov	r0, r1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	817b      	strh	r3, [r7, #10]
 8002f92:	460b      	mov	r3, r1
 8002f94:	813b      	strh	r3, [r7, #8]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f9a:	f7ff f9cb 	bl	8002334 <HAL_GetTick>
 8002f9e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	f040 8214 	bne.w	80033d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2319      	movs	r3, #25
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	497b      	ldr	r1, [pc, #492]	@ (80031a4 <HAL_I2C_Mem_Read+0x224>)
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fb91 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e207      	b.n	80033d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_I2C_Mem_Read+0x56>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e200      	b.n	80033d8 <HAL_I2C_Mem_Read+0x458>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d007      	beq.n	8002ffc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2222      	movs	r2, #34	@ 0x22
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800302c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a5b      	ldr	r2, [pc, #364]	@ (80031a8 <HAL_I2C_Mem_Read+0x228>)
 800303c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800303e:	88f8      	ldrh	r0, [r7, #6]
 8003040:	893a      	ldrh	r2, [r7, #8]
 8003042:	8979      	ldrh	r1, [r7, #10]
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	4603      	mov	r3, r0
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fa5e 	bl	8003510 <I2C_RequestMemoryRead>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e1bc      	b.n	80033d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	d113      	bne.n	800308e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	623b      	str	r3, [r7, #32]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	623b      	str	r3, [r7, #32]
 800307a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e190      	b.n	80033b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003092:	2b01      	cmp	r3, #1
 8003094:	d11b      	bne.n	80030ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	e170      	b.n	80033b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d11b      	bne.n	800310e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	e150      	b.n	80033b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003124:	e144      	b.n	80033b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	2b03      	cmp	r3, #3
 800312c:	f200 80f1 	bhi.w	8003312 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003134:	2b01      	cmp	r3, #1
 8003136:	d123      	bne.n	8003180 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 fc79 	bl	8003a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e145      	b.n	80033d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800317e:	e117      	b.n	80033b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003184:	2b02      	cmp	r3, #2
 8003186:	d14e      	bne.n	8003226 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318e:	2200      	movs	r2, #0
 8003190:	4906      	ldr	r1, [pc, #24]	@ (80031ac <HAL_I2C_Mem_Read+0x22c>)
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 faa4 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e11a      	b.n	80033d8 <HAL_I2C_Mem_Read+0x458>
 80031a2:	bf00      	nop
 80031a4:	00100002 	.word	0x00100002
 80031a8:	ffff0000 	.word	0xffff0000
 80031ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003224:	e0c4      	b.n	80033b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322c:	2200      	movs	r2, #0
 800322e:	496c      	ldr	r1, [pc, #432]	@ (80033e0 <HAL_I2C_Mem_Read+0x460>)
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 fa55 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0cb      	b.n	80033d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800324e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003288:	2200      	movs	r2, #0
 800328a:	4955      	ldr	r1, [pc, #340]	@ (80033e0 <HAL_I2C_Mem_Read+0x460>)
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fa27 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e09d      	b.n	80033d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003310:	e04e      	b.n	80033b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003314:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fb8c 	bl	8003a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e058      	b.n	80033d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d124      	bne.n	80033b0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336a:	2b03      	cmp	r3, #3
 800336c:	d107      	bne.n	800337e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800337c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f47f aeb6 	bne.w	8003126 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3728      	adds	r7, #40	@ 0x28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	00010004 	.word	0x00010004

080033e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	817b      	strh	r3, [r7, #10]
 80033f6:	460b      	mov	r3, r1
 80033f8:	813b      	strh	r3, [r7, #8]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800340c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	2200      	movs	r2, #0
 8003416:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f960 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003434:	d103      	bne.n	800343e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800343c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e05f      	b.n	8003502 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003450:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	6a3a      	ldr	r2, [r7, #32]
 8003456:	492d      	ldr	r1, [pc, #180]	@ (800350c <I2C_RequestMemoryWrite+0x128>)
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f9bb 	bl	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e04c      	b.n	8003502 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003480:	6a39      	ldr	r1, [r7, #32]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fa46 	bl	8003914 <I2C_WaitOnTXEFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	2b04      	cmp	r3, #4
 8003494:	d107      	bne.n	80034a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e02b      	b.n	8003502 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034b0:	893b      	ldrh	r3, [r7, #8]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	611a      	str	r2, [r3, #16]
 80034ba:	e021      	b.n	8003500 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034bc:	893b      	ldrh	r3, [r7, #8]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034cc:	6a39      	ldr	r1, [r7, #32]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fa20 	bl	8003914 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00d      	beq.n	80034f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d107      	bne.n	80034f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e005      	b.n	8003502 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f6:	893b      	ldrh	r3, [r7, #8]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	00010002 	.word	0x00010002

08003510 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	461a      	mov	r2, r3
 800351e:	4603      	mov	r3, r0
 8003520:	817b      	strh	r3, [r7, #10]
 8003522:	460b      	mov	r3, r1
 8003524:	813b      	strh	r3, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003538:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003548:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	2200      	movs	r2, #0
 8003552:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8c2 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003570:	d103      	bne.n	800357a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003578:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e0aa      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800358c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	4952      	ldr	r1, [pc, #328]	@ (80036dc <I2C_RequestMemoryRead+0x1cc>)
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f91d 	bl	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e097      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f9a8 	bl	8003914 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d107      	bne.n	80035e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e076      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d105      	bne.n	80035f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035ec:	893b      	ldrh	r3, [r7, #8]
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	611a      	str	r2, [r3, #16]
 80035f6:	e021      	b.n	800363c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035f8:	893b      	ldrh	r3, [r7, #8]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003608:	6a39      	ldr	r1, [r7, #32]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f982 	bl	8003914 <I2C_WaitOnTXEFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	2b04      	cmp	r3, #4
 800361c:	d107      	bne.n	800362e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e050      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003632:	893b      	ldrh	r3, [r7, #8]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800363c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363e:	6a39      	ldr	r1, [r7, #32]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f967 	bl	8003914 <I2C_WaitOnTXEFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	2b04      	cmp	r3, #4
 8003652:	d107      	bne.n	8003664 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003662:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e035      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003676:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	2200      	movs	r2, #0
 8003680:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f82b 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800369e:	d103      	bne.n	80036a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e013      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036ac:	897b      	ldrh	r3, [r7, #10]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036be:	6a3a      	ldr	r2, [r7, #32]
 80036c0:	4906      	ldr	r1, [pc, #24]	@ (80036dc <I2C_RequestMemoryRead+0x1cc>)
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f886 	bl	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	00010002 	.word	0x00010002

080036e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f0:	e048      	b.n	8003784 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036f8:	d044      	beq.n	8003784 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fa:	f7fe fe1b 	bl	8002334 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d139      	bne.n	8003784 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d10d      	bne.n	8003736 <I2C_WaitOnFlagUntilTimeout+0x56>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	e00c      	b.n	8003750 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	43da      	mvns	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	429a      	cmp	r2, r3
 8003754:	d116      	bne.n	8003784 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e023      	b.n	80037cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d10d      	bne.n	80037aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	43da      	mvns	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4013      	ands	r3, r2
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	e00c      	b.n	80037c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	43da      	mvns	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4013      	ands	r3, r2
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d093      	beq.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037e2:	e071      	b.n	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f2:	d123      	bne.n	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003802:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800380c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003828:	f043 0204 	orr.w	r2, r3, #4
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e067      	b.n	800390c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003842:	d041      	beq.n	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003844:	f7fe fd76 	bl	8002334 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d302      	bcc.n	800385a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d136      	bne.n	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d10c      	bne.n	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	43da      	mvns	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4013      	ands	r3, r2
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	e00b      	b.n	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	43da      	mvns	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4013      	ands	r3, r2
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf14      	ite	ne
 8003890:	2301      	movne	r3, #1
 8003892:	2300      	moveq	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d016      	beq.n	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	f043 0220 	orr.w	r2, r3, #32
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e021      	b.n	800390c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	0c1b      	lsrs	r3, r3, #16
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d10c      	bne.n	80038ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	43da      	mvns	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4013      	ands	r3, r2
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	e00b      	b.n	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	43da      	mvns	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4013      	ands	r3, r2
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bf14      	ite	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	2300      	moveq	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	f47f af6d 	bne.w	80037e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003920:	e034      	b.n	800398c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f8e3 	bl	8003aee <I2C_IsAcknowledgeFailed>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e034      	b.n	800399c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003938:	d028      	beq.n	800398c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393a:	f7fe fcfb 	bl	8002334 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11d      	bne.n	800398c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395a:	2b80      	cmp	r3, #128	@ 0x80
 800395c:	d016      	beq.n	800398c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e007      	b.n	800399c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003996:	2b80      	cmp	r3, #128	@ 0x80
 8003998:	d1c3      	bne.n	8003922 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039b0:	e034      	b.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f89b 	bl	8003aee <I2C_IsAcknowledgeFailed>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e034      	b.n	8003a2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039c8:	d028      	beq.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fe fcb3 	bl	8002334 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11d      	bne.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d016      	beq.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e007      	b.n	8003a2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d1c3      	bne.n	80039b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a40:	e049      	b.n	8003ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d119      	bne.n	8003a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0210 	mvn.w	r2, #16
 8003a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e030      	b.n	8003ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fe fc56 	bl	8002334 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11d      	bne.n	8003ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa4:	2b40      	cmp	r3, #64	@ 0x40
 8003aa6:	d016      	beq.n	8003ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e007      	b.n	8003ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae0:	2b40      	cmp	r3, #64	@ 0x40
 8003ae2:	d1ae      	bne.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b04:	d11b      	bne.n	8003b3e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	f043 0204 	orr.w	r2, r3, #4
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0bf      	b.n	8003cde <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fd86 	bl	8001684 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003b8e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6999      	ldr	r1, [r3, #24]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ba4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6899      	ldr	r1, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce8 <HAL_LTDC_Init+0x19c>)
 8003bc0:	400b      	ands	r3, r1
 8003bc2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	041b      	lsls	r3, r3, #16
 8003bca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6899      	ldr	r1, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68d9      	ldr	r1, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce8 <HAL_LTDC_Init+0x19c>)
 8003bee:	400b      	ands	r3, r1
 8003bf0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68d9      	ldr	r1, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6919      	ldr	r1, [r3, #16]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b33      	ldr	r3, [pc, #204]	@ (8003ce8 <HAL_LTDC_Init+0x19c>)
 8003c1c:	400b      	ands	r3, r1
 8003c1e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	041b      	lsls	r3, r3, #16
 8003c26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6919      	ldr	r1, [r3, #16]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6959      	ldr	r1, [r3, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b27      	ldr	r3, [pc, #156]	@ (8003ce8 <HAL_LTDC_Init+0x19c>)
 8003c4a:	400b      	ands	r3, r1
 8003c4c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6959      	ldr	r1, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0206 	orr.w	r2, r2, #6
 8003cba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	f000f800 	.word	0xf000f800

08003cec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003cec:	b5b0      	push	{r4, r5, r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_LTDC_ConfigLayer+0x1a>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e02c      	b.n	8003d60 <HAL_LTDC_ConfigLayer+0x74>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2202      	movs	r2, #2
 8003d12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2134      	movs	r1, #52	@ 0x34
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4614      	mov	r4, r2
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f811 	bl	8003d68 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bdb0      	pop	{r4, r5, r7, pc}

08003d68 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	@ 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d84:	4413      	add	r3, r2
 8003d86:	041b      	lsls	r3, r3, #16
 8003d88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	01db      	lsls	r3, r3, #7
 8003d94:	4413      	add	r3, r2
 8003d96:	3384      	adds	r3, #132	@ 0x84
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	01d2      	lsls	r2, r2, #7
 8003da4:	440a      	add	r2, r1
 8003da6:	3284      	adds	r2, #132	@ 0x84
 8003da8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003dac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dbe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dc0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	01db      	lsls	r3, r3, #7
 8003dcc:	440b      	add	r3, r1
 8003dce:	3384      	adds	r3, #132	@ 0x84
 8003dd0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dd6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003de6:	4413      	add	r3, r2
 8003de8:	041b      	lsls	r3, r3, #16
 8003dea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	01db      	lsls	r3, r3, #7
 8003df6:	4413      	add	r3, r2
 8003df8:	3384      	adds	r3, #132	@ 0x84
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	4611      	mov	r1, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	01d2      	lsls	r2, r2, #7
 8003e06:	440a      	add	r2, r1
 8003e08:	3284      	adds	r2, #132	@ 0x84
 8003e0a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003e0e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e1e:	4413      	add	r3, r2
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4619      	mov	r1, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	01db      	lsls	r3, r3, #7
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3384      	adds	r3, #132	@ 0x84
 8003e30:	4619      	mov	r1, r3
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	01db      	lsls	r3, r3, #7
 8003e42:	4413      	add	r3, r2
 8003e44:	3384      	adds	r3, #132	@ 0x84
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	01d2      	lsls	r2, r2, #7
 8003e52:	440a      	add	r2, r1
 8003e54:	3284      	adds	r2, #132	@ 0x84
 8003e56:	f023 0307 	bic.w	r3, r3, #7
 8003e5a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	01db      	lsls	r3, r3, #7
 8003e66:	4413      	add	r3, r2
 8003e68:	3384      	adds	r3, #132	@ 0x84
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003e82:	041b      	lsls	r3, r3, #16
 8003e84:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	061b      	lsls	r3, r3, #24
 8003e8c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	01db      	lsls	r3, r3, #7
 8003e98:	4413      	add	r3, r2
 8003e9a:	3384      	adds	r3, #132	@ 0x84
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	01db      	lsls	r3, r3, #7
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3384      	adds	r3, #132	@ 0x84
 8003eac:	461a      	mov	r2, r3
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003eb8:	461a      	mov	r2, r3
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	01db      	lsls	r3, r3, #7
 8003ecc:	440b      	add	r3, r1
 8003ece:	3384      	adds	r3, #132	@ 0x84
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	01db      	lsls	r3, r3, #7
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3384      	adds	r3, #132	@ 0x84
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	4611      	mov	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	01d2      	lsls	r2, r2, #7
 8003ef2:	440a      	add	r2, r1
 8003ef4:	3284      	adds	r2, #132	@ 0x84
 8003ef6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003efa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	01db      	lsls	r3, r3, #7
 8003f06:	4413      	add	r3, r2
 8003f08:	3384      	adds	r3, #132	@ 0x84
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	01db      	lsls	r3, r3, #7
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3384      	adds	r3, #132	@ 0x84
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	4611      	mov	r1, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	01d2      	lsls	r2, r2, #7
 8003f2c:	440a      	add	r2, r1
 8003f2e:	3284      	adds	r2, #132	@ 0x84
 8003f30:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f34:	f023 0307 	bic.w	r3, r3, #7
 8003f38:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	6809      	ldr	r1, [r1, #0]
 8003f46:	4608      	mov	r0, r1
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	01c9      	lsls	r1, r1, #7
 8003f4c:	4401      	add	r1, r0
 8003f4e:	3184      	adds	r1, #132	@ 0x84
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	01db      	lsls	r3, r3, #7
 8003f5e:	4413      	add	r3, r2
 8003f60:	3384      	adds	r3, #132	@ 0x84
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	01db      	lsls	r3, r3, #7
 8003f6e:	4413      	add	r3, r2
 8003f70:	3384      	adds	r3, #132	@ 0x84
 8003f72:	461a      	mov	r2, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	01db      	lsls	r3, r3, #7
 8003f82:	4413      	add	r3, r2
 8003f84:	3384      	adds	r3, #132	@ 0x84
 8003f86:	461a      	mov	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003f96:	2304      	movs	r3, #4
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	e01b      	b.n	8003fd4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d102      	bne.n	8003faa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	e014      	b.n	8003fd4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d00b      	beq.n	8003fca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d007      	beq.n	8003fca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d003      	beq.n	8003fca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003fc6:	2b07      	cmp	r3, #7
 8003fc8:	d102      	bne.n	8003fd0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e001      	b.n	8003fd4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	01db      	lsls	r3, r3, #7
 8003fde:	4413      	add	r3, r2
 8003fe0:	3384      	adds	r3, #132	@ 0x84
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	4611      	mov	r1, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	01d2      	lsls	r2, r2, #7
 8003fee:	440a      	add	r2, r1
 8003ff0:	3284      	adds	r2, #132	@ 0x84
 8003ff2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	1acb      	subs	r3, r1, r3
 800400e:	69f9      	ldr	r1, [r7, #28]
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004016:	68f9      	ldr	r1, [r7, #12]
 8004018:	6809      	ldr	r1, [r1, #0]
 800401a:	4608      	mov	r0, r1
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	01c9      	lsls	r1, r1, #7
 8004020:	4401      	add	r1, r0
 8004022:	3184      	adds	r1, #132	@ 0x84
 8004024:	4313      	orrs	r3, r2
 8004026:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	01db      	lsls	r3, r3, #7
 8004032:	4413      	add	r3, r2
 8004034:	3384      	adds	r3, #132	@ 0x84
 8004036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	4611      	mov	r1, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	01d2      	lsls	r2, r2, #7
 8004042:	440a      	add	r2, r1
 8004044:	3284      	adds	r2, #132	@ 0x84
 8004046:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800404a:	f023 0307 	bic.w	r3, r3, #7
 800404e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	01db      	lsls	r3, r3, #7
 800405a:	4413      	add	r3, r2
 800405c:	3384      	adds	r3, #132	@ 0x84
 800405e:	461a      	mov	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	01db      	lsls	r3, r3, #7
 8004070:	4413      	add	r3, r2
 8004072:	3384      	adds	r3, #132	@ 0x84
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	4611      	mov	r1, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	01d2      	lsls	r2, r2, #7
 8004080:	440a      	add	r2, r1
 8004082:	3284      	adds	r2, #132	@ 0x84
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6013      	str	r3, [r2, #0]
}
 800408a:	bf00      	nop
 800408c:	3724      	adds	r7, #36	@ 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e267      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d075      	beq.n	80041a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040b6:	4b88      	ldr	r3, [pc, #544]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d00c      	beq.n	80040dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c2:	4b85      	ldr	r3, [pc, #532]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d112      	bne.n	80040f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ce:	4b82      	ldr	r3, [pc, #520]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040da:	d10b      	bne.n	80040f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040dc:	4b7e      	ldr	r3, [pc, #504]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d05b      	beq.n	80041a0 <HAL_RCC_OscConfig+0x108>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d157      	bne.n	80041a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e242      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040fc:	d106      	bne.n	800410c <HAL_RCC_OscConfig+0x74>
 80040fe:	4b76      	ldr	r3, [pc, #472]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a75      	ldr	r2, [pc, #468]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e01d      	b.n	8004148 <HAL_RCC_OscConfig+0xb0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004114:	d10c      	bne.n	8004130 <HAL_RCC_OscConfig+0x98>
 8004116:	4b70      	ldr	r3, [pc, #448]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6f      	ldr	r2, [pc, #444]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 800411c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	4b6d      	ldr	r3, [pc, #436]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a6c      	ldr	r2, [pc, #432]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e00b      	b.n	8004148 <HAL_RCC_OscConfig+0xb0>
 8004130:	4b69      	ldr	r3, [pc, #420]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a68      	ldr	r2, [pc, #416]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	4b66      	ldr	r3, [pc, #408]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a65      	ldr	r2, [pc, #404]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe f8f0 	bl	8002334 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004158:	f7fe f8ec 	bl	8002334 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	@ 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e207      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b5b      	ldr	r3, [pc, #364]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0xc0>
 8004176:	e014      	b.n	80041a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fe f8dc 	bl	8002334 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004180:	f7fe f8d8 	bl	8002334 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	@ 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e1f3      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	4b51      	ldr	r3, [pc, #324]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0xe8>
 800419e:	e000      	b.n	80041a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d063      	beq.n	8004276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041ae:	4b4a      	ldr	r3, [pc, #296]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ba:	4b47      	ldr	r3, [pc, #284]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d11c      	bne.n	8004200 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c6:	4b44      	ldr	r3, [pc, #272]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d116      	bne.n	8004200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d2:	4b41      	ldr	r3, [pc, #260]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_RCC_OscConfig+0x152>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e1c7      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ea:	4b3b      	ldr	r3, [pc, #236]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4937      	ldr	r1, [pc, #220]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fe:	e03a      	b.n	8004276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004208:	4b34      	ldr	r3, [pc, #208]	@ (80042dc <HAL_RCC_OscConfig+0x244>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420e:	f7fe f891 	bl	8002334 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004216:	f7fe f88d 	bl	8002334 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e1a8      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004228:	4b2b      	ldr	r3, [pc, #172]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004234:	4b28      	ldr	r3, [pc, #160]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4925      	ldr	r1, [pc, #148]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004244:	4313      	orrs	r3, r2
 8004246:	600b      	str	r3, [r1, #0]
 8004248:	e015      	b.n	8004276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800424a:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <HAL_RCC_OscConfig+0x244>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fe f870 	bl	8002334 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004258:	f7fe f86c 	bl	8002334 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e187      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426a:	4b1b      	ldr	r3, [pc, #108]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d036      	beq.n	80042f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d016      	beq.n	80042b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428a:	4b15      	ldr	r3, [pc, #84]	@ (80042e0 <HAL_RCC_OscConfig+0x248>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fe f850 	bl	8002334 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004298:	f7fe f84c 	bl	8002334 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e167      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042aa:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <HAL_RCC_OscConfig+0x240>)
 80042ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x200>
 80042b6:	e01b      	b.n	80042f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b8:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <HAL_RCC_OscConfig+0x248>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042be:	f7fe f839 	bl	8002334 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c4:	e00e      	b.n	80042e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c6:	f7fe f835 	bl	8002334 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d907      	bls.n	80042e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e150      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
 80042d8:	40023800 	.word	0x40023800
 80042dc:	42470000 	.word	0x42470000
 80042e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e4:	4b88      	ldr	r3, [pc, #544]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 80042e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1ea      	bne.n	80042c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8097 	beq.w	800442c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004302:	4b81      	ldr	r3, [pc, #516]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10f      	bne.n	800432e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	4b7d      	ldr	r3, [pc, #500]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	4a7c      	ldr	r2, [pc, #496]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 8004318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800431c:	6413      	str	r3, [r2, #64]	@ 0x40
 800431e:	4b7a      	ldr	r3, [pc, #488]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800432a:	2301      	movs	r3, #1
 800432c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432e:	4b77      	ldr	r3, [pc, #476]	@ (800450c <HAL_RCC_OscConfig+0x474>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d118      	bne.n	800436c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800433a:	4b74      	ldr	r3, [pc, #464]	@ (800450c <HAL_RCC_OscConfig+0x474>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a73      	ldr	r2, [pc, #460]	@ (800450c <HAL_RCC_OscConfig+0x474>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004346:	f7fd fff5 	bl	8002334 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434e:	f7fd fff1 	bl	8002334 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e10c      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004360:	4b6a      	ldr	r3, [pc, #424]	@ (800450c <HAL_RCC_OscConfig+0x474>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d106      	bne.n	8004382 <HAL_RCC_OscConfig+0x2ea>
 8004374:	4b64      	ldr	r3, [pc, #400]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004378:	4a63      	ldr	r2, [pc, #396]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004380:	e01c      	b.n	80043bc <HAL_RCC_OscConfig+0x324>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b05      	cmp	r3, #5
 8004388:	d10c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x30c>
 800438a:	4b5f      	ldr	r3, [pc, #380]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	4a5e      	ldr	r2, [pc, #376]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 8004390:	f043 0304 	orr.w	r3, r3, #4
 8004394:	6713      	str	r3, [r2, #112]	@ 0x70
 8004396:	4b5c      	ldr	r3, [pc, #368]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	4a5b      	ldr	r2, [pc, #364]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a2:	e00b      	b.n	80043bc <HAL_RCC_OscConfig+0x324>
 80043a4:	4b58      	ldr	r3, [pc, #352]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a8:	4a57      	ldr	r2, [pc, #348]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b0:	4b55      	ldr	r3, [pc, #340]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b4:	4a54      	ldr	r2, [pc, #336]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 80043b6:	f023 0304 	bic.w	r3, r3, #4
 80043ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d015      	beq.n	80043f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fd ffb6 	bl	8002334 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043cc:	f7fd ffb2 	bl	8002334 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e0cb      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e2:	4b49      	ldr	r3, [pc, #292]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0ee      	beq.n	80043cc <HAL_RCC_OscConfig+0x334>
 80043ee:	e014      	b.n	800441a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f0:	f7fd ffa0 	bl	8002334 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f6:	e00a      	b.n	800440e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f8:	f7fd ff9c 	bl	8002334 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e0b5      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440e:	4b3e      	ldr	r3, [pc, #248]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1ee      	bne.n	80043f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d105      	bne.n	800442c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004420:	4b39      	ldr	r3, [pc, #228]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	4a38      	ldr	r2, [pc, #224]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 8004426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800442a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80a1 	beq.w	8004578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004436:	4b34      	ldr	r3, [pc, #208]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b08      	cmp	r3, #8
 8004440:	d05c      	beq.n	80044fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d141      	bne.n	80044ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b31      	ldr	r3, [pc, #196]	@ (8004510 <HAL_RCC_OscConfig+0x478>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fd ff70 	bl	8002334 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004458:	f7fd ff6c 	bl	8002334 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e087      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	4b27      	ldr	r3, [pc, #156]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	019b      	lsls	r3, r3, #6
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	3b01      	subs	r3, #1
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	491b      	ldr	r1, [pc, #108]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004510 <HAL_RCC_OscConfig+0x478>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fd ff45 	bl	8002334 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ae:	f7fd ff41 	bl	8002334 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e05c      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c0:	4b11      	ldr	r3, [pc, #68]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0x416>
 80044cc:	e054      	b.n	8004578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ce:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <HAL_RCC_OscConfig+0x478>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fd ff2e 	bl	8002334 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fd ff2a 	bl	8002334 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e045      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <HAL_RCC_OscConfig+0x470>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x444>
 80044fa:	e03d      	b.n	8004578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d107      	bne.n	8004514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e038      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
 8004508:	40023800 	.word	0x40023800
 800450c:	40007000 	.word	0x40007000
 8004510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004514:	4b1b      	ldr	r3, [pc, #108]	@ (8004584 <HAL_RCC_OscConfig+0x4ec>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d028      	beq.n	8004574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452c:	429a      	cmp	r2, r3
 800452e:	d121      	bne.n	8004574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d11a      	bne.n	8004574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004544:	4013      	ands	r3, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800454a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800454c:	4293      	cmp	r3, r2
 800454e:	d111      	bne.n	8004574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	3b01      	subs	r3, #1
 800455e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d107      	bne.n	8004574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800

08004588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0cc      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800459c:	4b68      	ldr	r3, [pc, #416]	@ (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d90c      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	4b65      	ldr	r3, [pc, #404]	@ (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b63      	ldr	r3, [pc, #396]	@ (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0b8      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045dc:	4b59      	ldr	r3, [pc, #356]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a58      	ldr	r2, [pc, #352]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045f4:	4b53      	ldr	r3, [pc, #332]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4a52      	ldr	r2, [pc, #328]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004600:	4b50      	ldr	r3, [pc, #320]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	494d      	ldr	r1, [pc, #308]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d044      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b47      	ldr	r3, [pc, #284]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d119      	bne.n	8004666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e07f      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d003      	beq.n	8004646 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004642:	2b03      	cmp	r3, #3
 8004644:	d107      	bne.n	8004656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004646:	4b3f      	ldr	r3, [pc, #252]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e06f      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004656:	4b3b      	ldr	r3, [pc, #236]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e067      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004666:	4b37      	ldr	r3, [pc, #220]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f023 0203 	bic.w	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4934      	ldr	r1, [pc, #208]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	4313      	orrs	r3, r2
 8004676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004678:	f7fd fe5c 	bl	8002334 <HAL_GetTick>
 800467c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	e00a      	b.n	8004696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004680:	f7fd fe58 	bl	8002334 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e04f      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	4b2b      	ldr	r3, [pc, #172]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 020c 	and.w	r2, r3, #12
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d1eb      	bne.n	8004680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046a8:	4b25      	ldr	r3, [pc, #148]	@ (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d20c      	bcs.n	80046d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b6:	4b22      	ldr	r3, [pc, #136]	@ (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046be:	4b20      	ldr	r3, [pc, #128]	@ (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e032      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046dc:	4b19      	ldr	r3, [pc, #100]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4916      	ldr	r1, [pc, #88]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046fa:	4b12      	ldr	r3, [pc, #72]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	490e      	ldr	r1, [pc, #56]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800470e:	f000 f821 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8004712:	4602      	mov	r2, r0
 8004714:	4b0b      	ldr	r3, [pc, #44]	@ (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	490a      	ldr	r1, [pc, #40]	@ (8004748 <HAL_RCC_ClockConfig+0x1c0>)
 8004720:	5ccb      	ldrb	r3, [r1, r3]
 8004722:	fa22 f303 	lsr.w	r3, r2, r3
 8004726:	4a09      	ldr	r2, [pc, #36]	@ (800474c <HAL_RCC_ClockConfig+0x1c4>)
 8004728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800472a:	4b09      	ldr	r3, [pc, #36]	@ (8004750 <HAL_RCC_ClockConfig+0x1c8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd fdbc 	bl	80022ac <HAL_InitTick>

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40023c00 	.word	0x40023c00
 8004744:	40023800 	.word	0x40023800
 8004748:	08007408 	.word	0x08007408
 800474c:	20000010 	.word	0x20000010
 8004750:	20000014 	.word	0x20000014

08004754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004758:	b094      	sub	sp, #80	@ 0x50
 800475a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800476c:	4b79      	ldr	r3, [pc, #484]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x200>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b08      	cmp	r3, #8
 8004776:	d00d      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x40>
 8004778:	2b08      	cmp	r3, #8
 800477a:	f200 80e1 	bhi.w	8004940 <HAL_RCC_GetSysClockFreq+0x1ec>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x34>
 8004782:	2b04      	cmp	r3, #4
 8004784:	d003      	beq.n	800478e <HAL_RCC_GetSysClockFreq+0x3a>
 8004786:	e0db      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004788:	4b73      	ldr	r3, [pc, #460]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x204>)
 800478a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800478c:	e0db      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800478e:	4b73      	ldr	r3, [pc, #460]	@ (800495c <HAL_RCC_GetSysClockFreq+0x208>)
 8004790:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004792:	e0d8      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004794:	4b6f      	ldr	r3, [pc, #444]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x200>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800479c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800479e:	4b6d      	ldr	r3, [pc, #436]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d063      	beq.n	8004872 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	099b      	lsrs	r3, r3, #6
 80047b0:	2200      	movs	r2, #0
 80047b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80047be:	2300      	movs	r3, #0
 80047c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047c6:	4622      	mov	r2, r4
 80047c8:	462b      	mov	r3, r5
 80047ca:	f04f 0000 	mov.w	r0, #0
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	0159      	lsls	r1, r3, #5
 80047d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d8:	0150      	lsls	r0, r2, #5
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4621      	mov	r1, r4
 80047e0:	1a51      	subs	r1, r2, r1
 80047e2:	6139      	str	r1, [r7, #16]
 80047e4:	4629      	mov	r1, r5
 80047e6:	eb63 0301 	sbc.w	r3, r3, r1
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047f8:	4659      	mov	r1, fp
 80047fa:	018b      	lsls	r3, r1, #6
 80047fc:	4651      	mov	r1, sl
 80047fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004802:	4651      	mov	r1, sl
 8004804:	018a      	lsls	r2, r1, #6
 8004806:	4651      	mov	r1, sl
 8004808:	ebb2 0801 	subs.w	r8, r2, r1
 800480c:	4659      	mov	r1, fp
 800480e:	eb63 0901 	sbc.w	r9, r3, r1
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800481e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004826:	4690      	mov	r8, r2
 8004828:	4699      	mov	r9, r3
 800482a:	4623      	mov	r3, r4
 800482c:	eb18 0303 	adds.w	r3, r8, r3
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	462b      	mov	r3, r5
 8004834:	eb49 0303 	adc.w	r3, r9, r3
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004846:	4629      	mov	r1, r5
 8004848:	024b      	lsls	r3, r1, #9
 800484a:	4621      	mov	r1, r4
 800484c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004850:	4621      	mov	r1, r4
 8004852:	024a      	lsls	r2, r1, #9
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800485a:	2200      	movs	r2, #0
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800485e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004860:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004864:	f7fb fd14 	bl	8000290 <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4613      	mov	r3, r2
 800486e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004870:	e058      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004872:	4b38      	ldr	r3, [pc, #224]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x200>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	2200      	movs	r2, #0
 800487a:	4618      	mov	r0, r3
 800487c:	4611      	mov	r1, r2
 800487e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004882:	623b      	str	r3, [r7, #32]
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
 8004888:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800488c:	4642      	mov	r2, r8
 800488e:	464b      	mov	r3, r9
 8004890:	f04f 0000 	mov.w	r0, #0
 8004894:	f04f 0100 	mov.w	r1, #0
 8004898:	0159      	lsls	r1, r3, #5
 800489a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800489e:	0150      	lsls	r0, r2, #5
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4641      	mov	r1, r8
 80048a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80048aa:	4649      	mov	r1, r9
 80048ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048c4:	ebb2 040a 	subs.w	r4, r2, sl
 80048c8:	eb63 050b 	sbc.w	r5, r3, fp
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	00eb      	lsls	r3, r5, #3
 80048d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048da:	00e2      	lsls	r2, r4, #3
 80048dc:	4614      	mov	r4, r2
 80048de:	461d      	mov	r5, r3
 80048e0:	4643      	mov	r3, r8
 80048e2:	18e3      	adds	r3, r4, r3
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	464b      	mov	r3, r9
 80048e8:	eb45 0303 	adc.w	r3, r5, r3
 80048ec:	607b      	str	r3, [r7, #4]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048fa:	4629      	mov	r1, r5
 80048fc:	028b      	lsls	r3, r1, #10
 80048fe:	4621      	mov	r1, r4
 8004900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004904:	4621      	mov	r1, r4
 8004906:	028a      	lsls	r2, r1, #10
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800490e:	2200      	movs	r2, #0
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	61fa      	str	r2, [r7, #28]
 8004914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004918:	f7fb fcba 	bl	8000290 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4613      	mov	r3, r2
 8004922:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x200>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	3301      	adds	r3, #1
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004934:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800493e:	e002      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004940:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x204>)
 8004942:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004948:	4618      	mov	r0, r3
 800494a:	3750      	adds	r7, #80	@ 0x50
 800494c:	46bd      	mov	sp, r7
 800494e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	00f42400 	.word	0x00f42400
 800495c:	007a1200 	.word	0x007a1200

08004960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004964:	4b03      	ldr	r3, [pc, #12]	@ (8004974 <HAL_RCC_GetHCLKFreq+0x14>)
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	4618      	mov	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000010 	.word	0x20000010

08004978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800497c:	f7ff fff0 	bl	8004960 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0a9b      	lsrs	r3, r3, #10
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4903      	ldr	r1, [pc, #12]	@ (800499c <HAL_RCC_GetPCLK1Freq+0x24>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40023800 	.word	0x40023800
 800499c:	08007418 	.word	0x08007418

080049a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d075      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049d4:	4b91      	ldr	r3, [pc, #580]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049da:	f7fd fcab 	bl	8002334 <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049e2:	f7fd fca7 	bl	8002334 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e189      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f0      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	019a      	lsls	r2, r3, #6
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	071b      	lsls	r3, r3, #28
 8004a18:	4981      	ldr	r1, [pc, #516]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01f      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a2c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a32:	0f1b      	lsrs	r3, r3, #28
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	019a      	lsls	r2, r3, #6
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	061b      	lsls	r3, r3, #24
 8004a46:	431a      	orrs	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	071b      	lsls	r3, r3, #28
 8004a4c:	4974      	ldr	r1, [pc, #464]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a54:	4b72      	ldr	r3, [pc, #456]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a5a:	f023 021f 	bic.w	r2, r3, #31
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	496e      	ldr	r1, [pc, #440]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00d      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	019a      	lsls	r2, r3, #6
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	061b      	lsls	r3, r3, #24
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	071b      	lsls	r3, r3, #28
 8004a8c:	4964      	ldr	r1, [pc, #400]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a94:	4b61      	ldr	r3, [pc, #388]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9a:	f7fd fc4b 	bl	8002334 <HAL_GetTick>
 8004a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aa2:	f7fd fc47 	bl	8002334 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e129      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d105      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d079      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ad8:	4b52      	ldr	r3, [pc, #328]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ade:	f7fd fc29 	bl	8002334 <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ae6:	f7fd fc25 	bl	8002334 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e107      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004af8:	4b49      	ldr	r3, [pc, #292]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b04:	d0ef      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d020      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b12:	4b43      	ldr	r3, [pc, #268]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b18:	0f1b      	lsrs	r3, r3, #28
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	019a      	lsls	r2, r3, #6
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	061b      	lsls	r3, r3, #24
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	071b      	lsls	r3, r3, #28
 8004b32:	493b      	ldr	r1, [pc, #236]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b3a:	4b39      	ldr	r3, [pc, #228]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	4934      	ldr	r1, [pc, #208]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01e      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b60:	4b2f      	ldr	r3, [pc, #188]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b66:	0e1b      	lsrs	r3, r3, #24
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	019a      	lsls	r2, r3, #6
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	071b      	lsls	r3, r3, #28
 8004b80:	4927      	ldr	r1, [pc, #156]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b88:	4b25      	ldr	r3, [pc, #148]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	4922      	ldr	r1, [pc, #136]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b9e:	4b21      	ldr	r3, [pc, #132]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ba4:	f7fd fbc6 	bl	8002334 <HAL_GetTick>
 8004ba8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bac:	f7fd fbc2 	bl	8002334 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e0a4      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bbe:	4b18      	ldr	r3, [pc, #96]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bca:	d1ef      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 808b 	beq.w	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bea:	4b0d      	ldr	r3, [pc, #52]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c02:	f7fd fb97 	bl	8002334 <HAL_GetTick>
 8004c06:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c08:	e010      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c0a:	f7fd fb93 	bl	8002334 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d909      	bls.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e075      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004c1c:	42470068 	.word	0x42470068
 8004c20:	40023800 	.word	0x40023800
 8004c24:	42470070 	.word	0x42470070
 8004c28:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c2c:	4b38      	ldr	r3, [pc, #224]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0e8      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c38:	4b36      	ldr	r3, [pc, #216]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c40:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d02f      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d028      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c56:	4b2f      	ldr	r3, [pc, #188]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c60:	4b2d      	ldr	r3, [pc, #180]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c66:	4b2c      	ldr	r3, [pc, #176]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c6c:	4a29      	ldr	r2, [pc, #164]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c72:	4b28      	ldr	r3, [pc, #160]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d114      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c7e:	f7fd fb59 	bl	8002334 <HAL_GetTick>
 8004c82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c84:	e00a      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c86:	f7fd fb55 	bl	8002334 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e035      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0ee      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cb4:	d10d      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004cb6:	4b17      	ldr	r3, [pc, #92]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cca:	4912      	ldr	r1, [pc, #72]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	608b      	str	r3, [r1, #8]
 8004cd0:	e005      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004cd2:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cd8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004cdc:	6093      	str	r3, [r2, #8]
 8004cde:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ce0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cea:	490a      	ldr	r1, [pc, #40]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004d02:	4b06      	ldr	r3, [pc, #24]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d04:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40007000 	.word	0x40007000
 8004d14:	40023800 	.word	0x40023800
 8004d18:	42470e40 	.word	0x42470e40
 8004d1c:	424711e0 	.word	0x424711e0

08004d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e07b      	b.n	8004e2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d108      	bne.n	8004d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d42:	d009      	beq.n	8004d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	61da      	str	r2, [r3, #28]
 8004d4a:	e005      	b.n	8004d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fc fdae 	bl	80018d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ddc:	ea42 0103 	orr.w	r1, r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	f003 0104 	and.w	r1, r3, #4
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	f003 0210 	and.w	r2, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e01a      	b.n	8004e7a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e5a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fc fd81 	bl	8001964 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b088      	sub	sp, #32
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e92:	f7fd fa4f 	bl	8002334 <HAL_GetTick>
 8004e96:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d001      	beq.n	8004eac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e12a      	b.n	8005102 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_SPI_Transmit+0x36>
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e122      	b.n	8005102 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_SPI_Transmit+0x48>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e11b      	b.n	8005102 <HAL_SPI_Transmit+0x280>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	88fa      	ldrh	r2, [r7, #6]
 8004ef0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f18:	d10f      	bne.n	8004f3a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f44:	2b40      	cmp	r3, #64	@ 0x40
 8004f46:	d007      	beq.n	8004f58 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f60:	d152      	bne.n	8005008 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_SPI_Transmit+0xee>
 8004f6a:	8b7b      	ldrh	r3, [r7, #26]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d145      	bne.n	8004ffc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f74:	881a      	ldrh	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	1c9a      	adds	r2, r3, #2
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f94:	e032      	b.n	8004ffc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d112      	bne.n	8004fca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	881a      	ldrh	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	1c9a      	adds	r2, r3, #2
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fc8:	e018      	b.n	8004ffc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fca:	f7fd f9b3 	bl	8002334 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d803      	bhi.n	8004fe2 <HAL_SPI_Transmit+0x160>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe0:	d102      	bne.n	8004fe8 <HAL_SPI_Transmit+0x166>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d109      	bne.n	8004ffc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e082      	b.n	8005102 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1c7      	bne.n	8004f96 <HAL_SPI_Transmit+0x114>
 8005006:	e053      	b.n	80050b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_SPI_Transmit+0x194>
 8005010:	8b7b      	ldrh	r3, [r7, #26]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d147      	bne.n	80050a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	7812      	ldrb	r2, [r2, #0]
 8005022:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800503c:	e033      	b.n	80050a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d113      	bne.n	8005074 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	7812      	ldrb	r2, [r2, #0]
 8005058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005072:	e018      	b.n	80050a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005074:	f7fd f95e 	bl	8002334 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d803      	bhi.n	800508c <HAL_SPI_Transmit+0x20a>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800508a:	d102      	bne.n	8005092 <HAL_SPI_Transmit+0x210>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e02d      	b.n	8005102 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1c6      	bne.n	800503e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	6839      	ldr	r1, [r7, #0]
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f8bf 	bl	8005238 <SPI_EndRxTxTransaction>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005100:	2300      	movs	r3, #0
  }
}
 8005102:	4618      	mov	r0, r3
 8005104:	3720      	adds	r7, #32
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005118:	b2db      	uxtb	r3, r3
}
 800511a:	4618      	mov	r0, r3
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	4613      	mov	r3, r2
 8005136:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005138:	f7fd f8fc 	bl	8002334 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	1a9b      	subs	r3, r3, r2
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	4413      	add	r3, r2
 8005146:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005148:	f7fd f8f4 	bl	8002334 <HAL_GetTick>
 800514c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800514e:	4b39      	ldr	r3, [pc, #228]	@ (8005234 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	015b      	lsls	r3, r3, #5
 8005154:	0d1b      	lsrs	r3, r3, #20
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	fb02 f303 	mul.w	r3, r2, r3
 800515c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800515e:	e054      	b.n	800520a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005166:	d050      	beq.n	800520a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005168:	f7fd f8e4 	bl	8002334 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	429a      	cmp	r2, r3
 8005176:	d902      	bls.n	800517e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d13d      	bne.n	80051fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800518c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005196:	d111      	bne.n	80051bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a0:	d004      	beq.n	80051ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051aa:	d107      	bne.n	80051bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c4:	d10f      	bne.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e017      	b.n	800522a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	3b01      	subs	r3, #1
 8005208:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	429a      	cmp	r2, r3
 8005226:	d19b      	bne.n	8005160 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000010 	.word	0x20000010

08005238 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2201      	movs	r2, #1
 800524c:	2102      	movs	r1, #2
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff ff6a 	bl	8005128 <SPI_WaitFlagStateUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525e:	f043 0220 	orr.w	r2, r3, #32
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e032      	b.n	80052d0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800526a:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <SPI_EndRxTxTransaction+0xa0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1b      	ldr	r2, [pc, #108]	@ (80052dc <SPI_EndRxTxTransaction+0xa4>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	0d5b      	lsrs	r3, r3, #21
 8005276:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800527a:	fb02 f303 	mul.w	r3, r2, r3
 800527e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005288:	d112      	bne.n	80052b0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2200      	movs	r2, #0
 8005292:	2180      	movs	r1, #128	@ 0x80
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff ff47 	bl	8005128 <SPI_WaitFlagStateUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d016      	beq.n	80052ce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e00f      	b.n	80052d0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c6:	2b80      	cmp	r3, #128	@ 0x80
 80052c8:	d0f2      	beq.n	80052b0 <SPI_EndRxTxTransaction+0x78>
 80052ca:	e000      	b.n	80052ce <SPI_EndRxTxTransaction+0x96>
        break;
 80052cc:	bf00      	nop
  }

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000010 	.word	0x20000010
 80052dc:	165e9f81 	.word	0x165e9f81

080052e0 <std>:
 80052e0:	2300      	movs	r3, #0
 80052e2:	b510      	push	{r4, lr}
 80052e4:	4604      	mov	r4, r0
 80052e6:	e9c0 3300 	strd	r3, r3, [r0]
 80052ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ee:	6083      	str	r3, [r0, #8]
 80052f0:	8181      	strh	r1, [r0, #12]
 80052f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80052f4:	81c2      	strh	r2, [r0, #14]
 80052f6:	6183      	str	r3, [r0, #24]
 80052f8:	4619      	mov	r1, r3
 80052fa:	2208      	movs	r2, #8
 80052fc:	305c      	adds	r0, #92	@ 0x5c
 80052fe:	f000 f9f9 	bl	80056f4 <memset>
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <std+0x58>)
 8005304:	6263      	str	r3, [r4, #36]	@ 0x24
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <std+0x5c>)
 8005308:	62a3      	str	r3, [r4, #40]	@ 0x28
 800530a:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <std+0x60>)
 800530c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800530e:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <std+0x64>)
 8005310:	6323      	str	r3, [r4, #48]	@ 0x30
 8005312:	4b0d      	ldr	r3, [pc, #52]	@ (8005348 <std+0x68>)
 8005314:	6224      	str	r4, [r4, #32]
 8005316:	429c      	cmp	r4, r3
 8005318:	d006      	beq.n	8005328 <std+0x48>
 800531a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800531e:	4294      	cmp	r4, r2
 8005320:	d002      	beq.n	8005328 <std+0x48>
 8005322:	33d0      	adds	r3, #208	@ 0xd0
 8005324:	429c      	cmp	r4, r3
 8005326:	d105      	bne.n	8005334 <std+0x54>
 8005328:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800532c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005330:	f000 ba58 	b.w	80057e4 <__retarget_lock_init_recursive>
 8005334:	bd10      	pop	{r4, pc}
 8005336:	bf00      	nop
 8005338:	08005545 	.word	0x08005545
 800533c:	08005567 	.word	0x08005567
 8005340:	0800559f 	.word	0x0800559f
 8005344:	080055c3 	.word	0x080055c3
 8005348:	20025a34 	.word	0x20025a34

0800534c <stdio_exit_handler>:
 800534c:	4a02      	ldr	r2, [pc, #8]	@ (8005358 <stdio_exit_handler+0xc>)
 800534e:	4903      	ldr	r1, [pc, #12]	@ (800535c <stdio_exit_handler+0x10>)
 8005350:	4803      	ldr	r0, [pc, #12]	@ (8005360 <stdio_exit_handler+0x14>)
 8005352:	f000 b869 	b.w	8005428 <_fwalk_sglue>
 8005356:	bf00      	nop
 8005358:	2000001c 	.word	0x2000001c
 800535c:	08006085 	.word	0x08006085
 8005360:	2000002c 	.word	0x2000002c

08005364 <cleanup_stdio>:
 8005364:	6841      	ldr	r1, [r0, #4]
 8005366:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <cleanup_stdio+0x34>)
 8005368:	4299      	cmp	r1, r3
 800536a:	b510      	push	{r4, lr}
 800536c:	4604      	mov	r4, r0
 800536e:	d001      	beq.n	8005374 <cleanup_stdio+0x10>
 8005370:	f000 fe88 	bl	8006084 <_fflush_r>
 8005374:	68a1      	ldr	r1, [r4, #8]
 8005376:	4b09      	ldr	r3, [pc, #36]	@ (800539c <cleanup_stdio+0x38>)
 8005378:	4299      	cmp	r1, r3
 800537a:	d002      	beq.n	8005382 <cleanup_stdio+0x1e>
 800537c:	4620      	mov	r0, r4
 800537e:	f000 fe81 	bl	8006084 <_fflush_r>
 8005382:	68e1      	ldr	r1, [r4, #12]
 8005384:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <cleanup_stdio+0x3c>)
 8005386:	4299      	cmp	r1, r3
 8005388:	d004      	beq.n	8005394 <cleanup_stdio+0x30>
 800538a:	4620      	mov	r0, r4
 800538c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005390:	f000 be78 	b.w	8006084 <_fflush_r>
 8005394:	bd10      	pop	{r4, pc}
 8005396:	bf00      	nop
 8005398:	20025a34 	.word	0x20025a34
 800539c:	20025a9c 	.word	0x20025a9c
 80053a0:	20025b04 	.word	0x20025b04

080053a4 <global_stdio_init.part.0>:
 80053a4:	b510      	push	{r4, lr}
 80053a6:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <global_stdio_init.part.0+0x30>)
 80053a8:	4c0b      	ldr	r4, [pc, #44]	@ (80053d8 <global_stdio_init.part.0+0x34>)
 80053aa:	4a0c      	ldr	r2, [pc, #48]	@ (80053dc <global_stdio_init.part.0+0x38>)
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	4620      	mov	r0, r4
 80053b0:	2200      	movs	r2, #0
 80053b2:	2104      	movs	r1, #4
 80053b4:	f7ff ff94 	bl	80052e0 <std>
 80053b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053bc:	2201      	movs	r2, #1
 80053be:	2109      	movs	r1, #9
 80053c0:	f7ff ff8e 	bl	80052e0 <std>
 80053c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053c8:	2202      	movs	r2, #2
 80053ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ce:	2112      	movs	r1, #18
 80053d0:	f7ff bf86 	b.w	80052e0 <std>
 80053d4:	20025b6c 	.word	0x20025b6c
 80053d8:	20025a34 	.word	0x20025a34
 80053dc:	0800534d 	.word	0x0800534d

080053e0 <__sfp_lock_acquire>:
 80053e0:	4801      	ldr	r0, [pc, #4]	@ (80053e8 <__sfp_lock_acquire+0x8>)
 80053e2:	f000 ba00 	b.w	80057e6 <__retarget_lock_acquire_recursive>
 80053e6:	bf00      	nop
 80053e8:	20025b75 	.word	0x20025b75

080053ec <__sfp_lock_release>:
 80053ec:	4801      	ldr	r0, [pc, #4]	@ (80053f4 <__sfp_lock_release+0x8>)
 80053ee:	f000 b9fb 	b.w	80057e8 <__retarget_lock_release_recursive>
 80053f2:	bf00      	nop
 80053f4:	20025b75 	.word	0x20025b75

080053f8 <__sinit>:
 80053f8:	b510      	push	{r4, lr}
 80053fa:	4604      	mov	r4, r0
 80053fc:	f7ff fff0 	bl	80053e0 <__sfp_lock_acquire>
 8005400:	6a23      	ldr	r3, [r4, #32]
 8005402:	b11b      	cbz	r3, 800540c <__sinit+0x14>
 8005404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005408:	f7ff bff0 	b.w	80053ec <__sfp_lock_release>
 800540c:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <__sinit+0x28>)
 800540e:	6223      	str	r3, [r4, #32]
 8005410:	4b04      	ldr	r3, [pc, #16]	@ (8005424 <__sinit+0x2c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f5      	bne.n	8005404 <__sinit+0xc>
 8005418:	f7ff ffc4 	bl	80053a4 <global_stdio_init.part.0>
 800541c:	e7f2      	b.n	8005404 <__sinit+0xc>
 800541e:	bf00      	nop
 8005420:	08005365 	.word	0x08005365
 8005424:	20025b6c 	.word	0x20025b6c

08005428 <_fwalk_sglue>:
 8005428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800542c:	4607      	mov	r7, r0
 800542e:	4688      	mov	r8, r1
 8005430:	4614      	mov	r4, r2
 8005432:	2600      	movs	r6, #0
 8005434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005438:	f1b9 0901 	subs.w	r9, r9, #1
 800543c:	d505      	bpl.n	800544a <_fwalk_sglue+0x22>
 800543e:	6824      	ldr	r4, [r4, #0]
 8005440:	2c00      	cmp	r4, #0
 8005442:	d1f7      	bne.n	8005434 <_fwalk_sglue+0xc>
 8005444:	4630      	mov	r0, r6
 8005446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544a:	89ab      	ldrh	r3, [r5, #12]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d907      	bls.n	8005460 <_fwalk_sglue+0x38>
 8005450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005454:	3301      	adds	r3, #1
 8005456:	d003      	beq.n	8005460 <_fwalk_sglue+0x38>
 8005458:	4629      	mov	r1, r5
 800545a:	4638      	mov	r0, r7
 800545c:	47c0      	blx	r8
 800545e:	4306      	orrs	r6, r0
 8005460:	3568      	adds	r5, #104	@ 0x68
 8005462:	e7e9      	b.n	8005438 <_fwalk_sglue+0x10>

08005464 <iprintf>:
 8005464:	b40f      	push	{r0, r1, r2, r3}
 8005466:	b507      	push	{r0, r1, r2, lr}
 8005468:	4906      	ldr	r1, [pc, #24]	@ (8005484 <iprintf+0x20>)
 800546a:	ab04      	add	r3, sp, #16
 800546c:	6808      	ldr	r0, [r1, #0]
 800546e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005472:	6881      	ldr	r1, [r0, #8]
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	f000 fadb 	bl	8005a30 <_vfiprintf_r>
 800547a:	b003      	add	sp, #12
 800547c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005480:	b004      	add	sp, #16
 8005482:	4770      	bx	lr
 8005484:	20000028 	.word	0x20000028

08005488 <_puts_r>:
 8005488:	6a03      	ldr	r3, [r0, #32]
 800548a:	b570      	push	{r4, r5, r6, lr}
 800548c:	6884      	ldr	r4, [r0, #8]
 800548e:	4605      	mov	r5, r0
 8005490:	460e      	mov	r6, r1
 8005492:	b90b      	cbnz	r3, 8005498 <_puts_r+0x10>
 8005494:	f7ff ffb0 	bl	80053f8 <__sinit>
 8005498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800549a:	07db      	lsls	r3, r3, #31
 800549c:	d405      	bmi.n	80054aa <_puts_r+0x22>
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	0598      	lsls	r0, r3, #22
 80054a2:	d402      	bmi.n	80054aa <_puts_r+0x22>
 80054a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054a6:	f000 f99e 	bl	80057e6 <__retarget_lock_acquire_recursive>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	0719      	lsls	r1, r3, #28
 80054ae:	d502      	bpl.n	80054b6 <_puts_r+0x2e>
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d135      	bne.n	8005522 <_puts_r+0x9a>
 80054b6:	4621      	mov	r1, r4
 80054b8:	4628      	mov	r0, r5
 80054ba:	f000 f8c5 	bl	8005648 <__swsetup_r>
 80054be:	b380      	cbz	r0, 8005522 <_puts_r+0x9a>
 80054c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80054c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054c6:	07da      	lsls	r2, r3, #31
 80054c8:	d405      	bmi.n	80054d6 <_puts_r+0x4e>
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	059b      	lsls	r3, r3, #22
 80054ce:	d402      	bmi.n	80054d6 <_puts_r+0x4e>
 80054d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054d2:	f000 f989 	bl	80057e8 <__retarget_lock_release_recursive>
 80054d6:	4628      	mov	r0, r5
 80054d8:	bd70      	pop	{r4, r5, r6, pc}
 80054da:	2b00      	cmp	r3, #0
 80054dc:	da04      	bge.n	80054e8 <_puts_r+0x60>
 80054de:	69a2      	ldr	r2, [r4, #24]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	dc17      	bgt.n	8005514 <_puts_r+0x8c>
 80054e4:	290a      	cmp	r1, #10
 80054e6:	d015      	beq.n	8005514 <_puts_r+0x8c>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	6022      	str	r2, [r4, #0]
 80054ee:	7019      	strb	r1, [r3, #0]
 80054f0:	68a3      	ldr	r3, [r4, #8]
 80054f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054f6:	3b01      	subs	r3, #1
 80054f8:	60a3      	str	r3, [r4, #8]
 80054fa:	2900      	cmp	r1, #0
 80054fc:	d1ed      	bne.n	80054da <_puts_r+0x52>
 80054fe:	2b00      	cmp	r3, #0
 8005500:	da11      	bge.n	8005526 <_puts_r+0x9e>
 8005502:	4622      	mov	r2, r4
 8005504:	210a      	movs	r1, #10
 8005506:	4628      	mov	r0, r5
 8005508:	f000 f85f 	bl	80055ca <__swbuf_r>
 800550c:	3001      	adds	r0, #1
 800550e:	d0d7      	beq.n	80054c0 <_puts_r+0x38>
 8005510:	250a      	movs	r5, #10
 8005512:	e7d7      	b.n	80054c4 <_puts_r+0x3c>
 8005514:	4622      	mov	r2, r4
 8005516:	4628      	mov	r0, r5
 8005518:	f000 f857 	bl	80055ca <__swbuf_r>
 800551c:	3001      	adds	r0, #1
 800551e:	d1e7      	bne.n	80054f0 <_puts_r+0x68>
 8005520:	e7ce      	b.n	80054c0 <_puts_r+0x38>
 8005522:	3e01      	subs	r6, #1
 8005524:	e7e4      	b.n	80054f0 <_puts_r+0x68>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	6022      	str	r2, [r4, #0]
 800552c:	220a      	movs	r2, #10
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	e7ee      	b.n	8005510 <_puts_r+0x88>
	...

08005534 <puts>:
 8005534:	4b02      	ldr	r3, [pc, #8]	@ (8005540 <puts+0xc>)
 8005536:	4601      	mov	r1, r0
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	f7ff bfa5 	b.w	8005488 <_puts_r>
 800553e:	bf00      	nop
 8005540:	20000028 	.word	0x20000028

08005544 <__sread>:
 8005544:	b510      	push	{r4, lr}
 8005546:	460c      	mov	r4, r1
 8005548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800554c:	f000 f8fc 	bl	8005748 <_read_r>
 8005550:	2800      	cmp	r0, #0
 8005552:	bfab      	itete	ge
 8005554:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005556:	89a3      	ldrhlt	r3, [r4, #12]
 8005558:	181b      	addge	r3, r3, r0
 800555a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800555e:	bfac      	ite	ge
 8005560:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005562:	81a3      	strhlt	r3, [r4, #12]
 8005564:	bd10      	pop	{r4, pc}

08005566 <__swrite>:
 8005566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800556a:	461f      	mov	r7, r3
 800556c:	898b      	ldrh	r3, [r1, #12]
 800556e:	05db      	lsls	r3, r3, #23
 8005570:	4605      	mov	r5, r0
 8005572:	460c      	mov	r4, r1
 8005574:	4616      	mov	r6, r2
 8005576:	d505      	bpl.n	8005584 <__swrite+0x1e>
 8005578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800557c:	2302      	movs	r3, #2
 800557e:	2200      	movs	r2, #0
 8005580:	f000 f8d0 	bl	8005724 <_lseek_r>
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800558a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800558e:	81a3      	strh	r3, [r4, #12]
 8005590:	4632      	mov	r2, r6
 8005592:	463b      	mov	r3, r7
 8005594:	4628      	mov	r0, r5
 8005596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800559a:	f000 b8e7 	b.w	800576c <_write_r>

0800559e <__sseek>:
 800559e:	b510      	push	{r4, lr}
 80055a0:	460c      	mov	r4, r1
 80055a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a6:	f000 f8bd 	bl	8005724 <_lseek_r>
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	bf15      	itete	ne
 80055b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055ba:	81a3      	strheq	r3, [r4, #12]
 80055bc:	bf18      	it	ne
 80055be:	81a3      	strhne	r3, [r4, #12]
 80055c0:	bd10      	pop	{r4, pc}

080055c2 <__sclose>:
 80055c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c6:	f000 b89d 	b.w	8005704 <_close_r>

080055ca <__swbuf_r>:
 80055ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055cc:	460e      	mov	r6, r1
 80055ce:	4614      	mov	r4, r2
 80055d0:	4605      	mov	r5, r0
 80055d2:	b118      	cbz	r0, 80055dc <__swbuf_r+0x12>
 80055d4:	6a03      	ldr	r3, [r0, #32]
 80055d6:	b90b      	cbnz	r3, 80055dc <__swbuf_r+0x12>
 80055d8:	f7ff ff0e 	bl	80053f8 <__sinit>
 80055dc:	69a3      	ldr	r3, [r4, #24]
 80055de:	60a3      	str	r3, [r4, #8]
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	071a      	lsls	r2, r3, #28
 80055e4:	d501      	bpl.n	80055ea <__swbuf_r+0x20>
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	b943      	cbnz	r3, 80055fc <__swbuf_r+0x32>
 80055ea:	4621      	mov	r1, r4
 80055ec:	4628      	mov	r0, r5
 80055ee:	f000 f82b 	bl	8005648 <__swsetup_r>
 80055f2:	b118      	cbz	r0, 80055fc <__swbuf_r+0x32>
 80055f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80055f8:	4638      	mov	r0, r7
 80055fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	6922      	ldr	r2, [r4, #16]
 8005600:	1a98      	subs	r0, r3, r2
 8005602:	6963      	ldr	r3, [r4, #20]
 8005604:	b2f6      	uxtb	r6, r6
 8005606:	4283      	cmp	r3, r0
 8005608:	4637      	mov	r7, r6
 800560a:	dc05      	bgt.n	8005618 <__swbuf_r+0x4e>
 800560c:	4621      	mov	r1, r4
 800560e:	4628      	mov	r0, r5
 8005610:	f000 fd38 	bl	8006084 <_fflush_r>
 8005614:	2800      	cmp	r0, #0
 8005616:	d1ed      	bne.n	80055f4 <__swbuf_r+0x2a>
 8005618:	68a3      	ldr	r3, [r4, #8]
 800561a:	3b01      	subs	r3, #1
 800561c:	60a3      	str	r3, [r4, #8]
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	6022      	str	r2, [r4, #0]
 8005624:	701e      	strb	r6, [r3, #0]
 8005626:	6962      	ldr	r2, [r4, #20]
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	429a      	cmp	r2, r3
 800562c:	d004      	beq.n	8005638 <__swbuf_r+0x6e>
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	07db      	lsls	r3, r3, #31
 8005632:	d5e1      	bpl.n	80055f8 <__swbuf_r+0x2e>
 8005634:	2e0a      	cmp	r6, #10
 8005636:	d1df      	bne.n	80055f8 <__swbuf_r+0x2e>
 8005638:	4621      	mov	r1, r4
 800563a:	4628      	mov	r0, r5
 800563c:	f000 fd22 	bl	8006084 <_fflush_r>
 8005640:	2800      	cmp	r0, #0
 8005642:	d0d9      	beq.n	80055f8 <__swbuf_r+0x2e>
 8005644:	e7d6      	b.n	80055f4 <__swbuf_r+0x2a>
	...

08005648 <__swsetup_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4b29      	ldr	r3, [pc, #164]	@ (80056f0 <__swsetup_r+0xa8>)
 800564c:	4605      	mov	r5, r0
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	460c      	mov	r4, r1
 8005652:	b118      	cbz	r0, 800565c <__swsetup_r+0x14>
 8005654:	6a03      	ldr	r3, [r0, #32]
 8005656:	b90b      	cbnz	r3, 800565c <__swsetup_r+0x14>
 8005658:	f7ff fece 	bl	80053f8 <__sinit>
 800565c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005660:	0719      	lsls	r1, r3, #28
 8005662:	d422      	bmi.n	80056aa <__swsetup_r+0x62>
 8005664:	06da      	lsls	r2, r3, #27
 8005666:	d407      	bmi.n	8005678 <__swsetup_r+0x30>
 8005668:	2209      	movs	r2, #9
 800566a:	602a      	str	r2, [r5, #0]
 800566c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005670:	81a3      	strh	r3, [r4, #12]
 8005672:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005676:	e033      	b.n	80056e0 <__swsetup_r+0x98>
 8005678:	0758      	lsls	r0, r3, #29
 800567a:	d512      	bpl.n	80056a2 <__swsetup_r+0x5a>
 800567c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800567e:	b141      	cbz	r1, 8005692 <__swsetup_r+0x4a>
 8005680:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005684:	4299      	cmp	r1, r3
 8005686:	d002      	beq.n	800568e <__swsetup_r+0x46>
 8005688:	4628      	mov	r0, r5
 800568a:	f000 f8af 	bl	80057ec <_free_r>
 800568e:	2300      	movs	r3, #0
 8005690:	6363      	str	r3, [r4, #52]	@ 0x34
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	2300      	movs	r3, #0
 800569c:	6063      	str	r3, [r4, #4]
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	f043 0308 	orr.w	r3, r3, #8
 80056a8:	81a3      	strh	r3, [r4, #12]
 80056aa:	6923      	ldr	r3, [r4, #16]
 80056ac:	b94b      	cbnz	r3, 80056c2 <__swsetup_r+0x7a>
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80056b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056b8:	d003      	beq.n	80056c2 <__swsetup_r+0x7a>
 80056ba:	4621      	mov	r1, r4
 80056bc:	4628      	mov	r0, r5
 80056be:	f000 fd2f 	bl	8006120 <__smakebuf_r>
 80056c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c6:	f013 0201 	ands.w	r2, r3, #1
 80056ca:	d00a      	beq.n	80056e2 <__swsetup_r+0x9a>
 80056cc:	2200      	movs	r2, #0
 80056ce:	60a2      	str	r2, [r4, #8]
 80056d0:	6962      	ldr	r2, [r4, #20]
 80056d2:	4252      	negs	r2, r2
 80056d4:	61a2      	str	r2, [r4, #24]
 80056d6:	6922      	ldr	r2, [r4, #16]
 80056d8:	b942      	cbnz	r2, 80056ec <__swsetup_r+0xa4>
 80056da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80056de:	d1c5      	bne.n	800566c <__swsetup_r+0x24>
 80056e0:	bd38      	pop	{r3, r4, r5, pc}
 80056e2:	0799      	lsls	r1, r3, #30
 80056e4:	bf58      	it	pl
 80056e6:	6962      	ldrpl	r2, [r4, #20]
 80056e8:	60a2      	str	r2, [r4, #8]
 80056ea:	e7f4      	b.n	80056d6 <__swsetup_r+0x8e>
 80056ec:	2000      	movs	r0, #0
 80056ee:	e7f7      	b.n	80056e0 <__swsetup_r+0x98>
 80056f0:	20000028 	.word	0x20000028

080056f4 <memset>:
 80056f4:	4402      	add	r2, r0
 80056f6:	4603      	mov	r3, r0
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d100      	bne.n	80056fe <memset+0xa>
 80056fc:	4770      	bx	lr
 80056fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005702:	e7f9      	b.n	80056f8 <memset+0x4>

08005704 <_close_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4d06      	ldr	r5, [pc, #24]	@ (8005720 <_close_r+0x1c>)
 8005708:	2300      	movs	r3, #0
 800570a:	4604      	mov	r4, r0
 800570c:	4608      	mov	r0, r1
 800570e:	602b      	str	r3, [r5, #0]
 8005710:	f7fc fd04 	bl	800211c <_close>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d102      	bne.n	800571e <_close_r+0x1a>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	b103      	cbz	r3, 800571e <_close_r+0x1a>
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	20025b70 	.word	0x20025b70

08005724 <_lseek_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d07      	ldr	r5, [pc, #28]	@ (8005744 <_lseek_r+0x20>)
 8005728:	4604      	mov	r4, r0
 800572a:	4608      	mov	r0, r1
 800572c:	4611      	mov	r1, r2
 800572e:	2200      	movs	r2, #0
 8005730:	602a      	str	r2, [r5, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	f7fc fd19 	bl	800216a <_lseek>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_lseek_r+0x1e>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_lseek_r+0x1e>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	20025b70 	.word	0x20025b70

08005748 <_read_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4d07      	ldr	r5, [pc, #28]	@ (8005768 <_read_r+0x20>)
 800574c:	4604      	mov	r4, r0
 800574e:	4608      	mov	r0, r1
 8005750:	4611      	mov	r1, r2
 8005752:	2200      	movs	r2, #0
 8005754:	602a      	str	r2, [r5, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	f7fc fca7 	bl	80020aa <_read>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_read_r+0x1e>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b103      	cbz	r3, 8005766 <_read_r+0x1e>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	20025b70 	.word	0x20025b70

0800576c <_write_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4d07      	ldr	r5, [pc, #28]	@ (800578c <_write_r+0x20>)
 8005770:	4604      	mov	r4, r0
 8005772:	4608      	mov	r0, r1
 8005774:	4611      	mov	r1, r2
 8005776:	2200      	movs	r2, #0
 8005778:	602a      	str	r2, [r5, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	f7fc fcb2 	bl	80020e4 <_write>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_write_r+0x1e>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_write_r+0x1e>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	20025b70 	.word	0x20025b70

08005790 <__errno>:
 8005790:	4b01      	ldr	r3, [pc, #4]	@ (8005798 <__errno+0x8>)
 8005792:	6818      	ldr	r0, [r3, #0]
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	20000028 	.word	0x20000028

0800579c <__libc_init_array>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	4d0d      	ldr	r5, [pc, #52]	@ (80057d4 <__libc_init_array+0x38>)
 80057a0:	4c0d      	ldr	r4, [pc, #52]	@ (80057d8 <__libc_init_array+0x3c>)
 80057a2:	1b64      	subs	r4, r4, r5
 80057a4:	10a4      	asrs	r4, r4, #2
 80057a6:	2600      	movs	r6, #0
 80057a8:	42a6      	cmp	r6, r4
 80057aa:	d109      	bne.n	80057c0 <__libc_init_array+0x24>
 80057ac:	4d0b      	ldr	r5, [pc, #44]	@ (80057dc <__libc_init_array+0x40>)
 80057ae:	4c0c      	ldr	r4, [pc, #48]	@ (80057e0 <__libc_init_array+0x44>)
 80057b0:	f000 fd24 	bl	80061fc <_init>
 80057b4:	1b64      	subs	r4, r4, r5
 80057b6:	10a4      	asrs	r4, r4, #2
 80057b8:	2600      	movs	r6, #0
 80057ba:	42a6      	cmp	r6, r4
 80057bc:	d105      	bne.n	80057ca <__libc_init_array+0x2e>
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c4:	4798      	blx	r3
 80057c6:	3601      	adds	r6, #1
 80057c8:	e7ee      	b.n	80057a8 <__libc_init_array+0xc>
 80057ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ce:	4798      	blx	r3
 80057d0:	3601      	adds	r6, #1
 80057d2:	e7f2      	b.n	80057ba <__libc_init_array+0x1e>
 80057d4:	0800745c 	.word	0x0800745c
 80057d8:	0800745c 	.word	0x0800745c
 80057dc:	0800745c 	.word	0x0800745c
 80057e0:	08007460 	.word	0x08007460

080057e4 <__retarget_lock_init_recursive>:
 80057e4:	4770      	bx	lr

080057e6 <__retarget_lock_acquire_recursive>:
 80057e6:	4770      	bx	lr

080057e8 <__retarget_lock_release_recursive>:
 80057e8:	4770      	bx	lr
	...

080057ec <_free_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4605      	mov	r5, r0
 80057f0:	2900      	cmp	r1, #0
 80057f2:	d041      	beq.n	8005878 <_free_r+0x8c>
 80057f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f8:	1f0c      	subs	r4, r1, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bfb8      	it	lt
 80057fe:	18e4      	addlt	r4, r4, r3
 8005800:	f000 f8e0 	bl	80059c4 <__malloc_lock>
 8005804:	4a1d      	ldr	r2, [pc, #116]	@ (800587c <_free_r+0x90>)
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	b933      	cbnz	r3, 8005818 <_free_r+0x2c>
 800580a:	6063      	str	r3, [r4, #4]
 800580c:	6014      	str	r4, [r2, #0]
 800580e:	4628      	mov	r0, r5
 8005810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005814:	f000 b8dc 	b.w	80059d0 <__malloc_unlock>
 8005818:	42a3      	cmp	r3, r4
 800581a:	d908      	bls.n	800582e <_free_r+0x42>
 800581c:	6820      	ldr	r0, [r4, #0]
 800581e:	1821      	adds	r1, r4, r0
 8005820:	428b      	cmp	r3, r1
 8005822:	bf01      	itttt	eq
 8005824:	6819      	ldreq	r1, [r3, #0]
 8005826:	685b      	ldreq	r3, [r3, #4]
 8005828:	1809      	addeq	r1, r1, r0
 800582a:	6021      	streq	r1, [r4, #0]
 800582c:	e7ed      	b.n	800580a <_free_r+0x1e>
 800582e:	461a      	mov	r2, r3
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	b10b      	cbz	r3, 8005838 <_free_r+0x4c>
 8005834:	42a3      	cmp	r3, r4
 8005836:	d9fa      	bls.n	800582e <_free_r+0x42>
 8005838:	6811      	ldr	r1, [r2, #0]
 800583a:	1850      	adds	r0, r2, r1
 800583c:	42a0      	cmp	r0, r4
 800583e:	d10b      	bne.n	8005858 <_free_r+0x6c>
 8005840:	6820      	ldr	r0, [r4, #0]
 8005842:	4401      	add	r1, r0
 8005844:	1850      	adds	r0, r2, r1
 8005846:	4283      	cmp	r3, r0
 8005848:	6011      	str	r1, [r2, #0]
 800584a:	d1e0      	bne.n	800580e <_free_r+0x22>
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	6053      	str	r3, [r2, #4]
 8005852:	4408      	add	r0, r1
 8005854:	6010      	str	r0, [r2, #0]
 8005856:	e7da      	b.n	800580e <_free_r+0x22>
 8005858:	d902      	bls.n	8005860 <_free_r+0x74>
 800585a:	230c      	movs	r3, #12
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	e7d6      	b.n	800580e <_free_r+0x22>
 8005860:	6820      	ldr	r0, [r4, #0]
 8005862:	1821      	adds	r1, r4, r0
 8005864:	428b      	cmp	r3, r1
 8005866:	bf04      	itt	eq
 8005868:	6819      	ldreq	r1, [r3, #0]
 800586a:	685b      	ldreq	r3, [r3, #4]
 800586c:	6063      	str	r3, [r4, #4]
 800586e:	bf04      	itt	eq
 8005870:	1809      	addeq	r1, r1, r0
 8005872:	6021      	streq	r1, [r4, #0]
 8005874:	6054      	str	r4, [r2, #4]
 8005876:	e7ca      	b.n	800580e <_free_r+0x22>
 8005878:	bd38      	pop	{r3, r4, r5, pc}
 800587a:	bf00      	nop
 800587c:	20025b7c 	.word	0x20025b7c

08005880 <sbrk_aligned>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4e0f      	ldr	r6, [pc, #60]	@ (80058c0 <sbrk_aligned+0x40>)
 8005884:	460c      	mov	r4, r1
 8005886:	6831      	ldr	r1, [r6, #0]
 8005888:	4605      	mov	r5, r0
 800588a:	b911      	cbnz	r1, 8005892 <sbrk_aligned+0x12>
 800588c:	f000 fca6 	bl	80061dc <_sbrk_r>
 8005890:	6030      	str	r0, [r6, #0]
 8005892:	4621      	mov	r1, r4
 8005894:	4628      	mov	r0, r5
 8005896:	f000 fca1 	bl	80061dc <_sbrk_r>
 800589a:	1c43      	adds	r3, r0, #1
 800589c:	d103      	bne.n	80058a6 <sbrk_aligned+0x26>
 800589e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80058a2:	4620      	mov	r0, r4
 80058a4:	bd70      	pop	{r4, r5, r6, pc}
 80058a6:	1cc4      	adds	r4, r0, #3
 80058a8:	f024 0403 	bic.w	r4, r4, #3
 80058ac:	42a0      	cmp	r0, r4
 80058ae:	d0f8      	beq.n	80058a2 <sbrk_aligned+0x22>
 80058b0:	1a21      	subs	r1, r4, r0
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 fc92 	bl	80061dc <_sbrk_r>
 80058b8:	3001      	adds	r0, #1
 80058ba:	d1f2      	bne.n	80058a2 <sbrk_aligned+0x22>
 80058bc:	e7ef      	b.n	800589e <sbrk_aligned+0x1e>
 80058be:	bf00      	nop
 80058c0:	20025b78 	.word	0x20025b78

080058c4 <_malloc_r>:
 80058c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c8:	1ccd      	adds	r5, r1, #3
 80058ca:	f025 0503 	bic.w	r5, r5, #3
 80058ce:	3508      	adds	r5, #8
 80058d0:	2d0c      	cmp	r5, #12
 80058d2:	bf38      	it	cc
 80058d4:	250c      	movcc	r5, #12
 80058d6:	2d00      	cmp	r5, #0
 80058d8:	4606      	mov	r6, r0
 80058da:	db01      	blt.n	80058e0 <_malloc_r+0x1c>
 80058dc:	42a9      	cmp	r1, r5
 80058de:	d904      	bls.n	80058ea <_malloc_r+0x26>
 80058e0:	230c      	movs	r3, #12
 80058e2:	6033      	str	r3, [r6, #0]
 80058e4:	2000      	movs	r0, #0
 80058e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059c0 <_malloc_r+0xfc>
 80058ee:	f000 f869 	bl	80059c4 <__malloc_lock>
 80058f2:	f8d8 3000 	ldr.w	r3, [r8]
 80058f6:	461c      	mov	r4, r3
 80058f8:	bb44      	cbnz	r4, 800594c <_malloc_r+0x88>
 80058fa:	4629      	mov	r1, r5
 80058fc:	4630      	mov	r0, r6
 80058fe:	f7ff ffbf 	bl	8005880 <sbrk_aligned>
 8005902:	1c43      	adds	r3, r0, #1
 8005904:	4604      	mov	r4, r0
 8005906:	d158      	bne.n	80059ba <_malloc_r+0xf6>
 8005908:	f8d8 4000 	ldr.w	r4, [r8]
 800590c:	4627      	mov	r7, r4
 800590e:	2f00      	cmp	r7, #0
 8005910:	d143      	bne.n	800599a <_malloc_r+0xd6>
 8005912:	2c00      	cmp	r4, #0
 8005914:	d04b      	beq.n	80059ae <_malloc_r+0xea>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	4639      	mov	r1, r7
 800591a:	4630      	mov	r0, r6
 800591c:	eb04 0903 	add.w	r9, r4, r3
 8005920:	f000 fc5c 	bl	80061dc <_sbrk_r>
 8005924:	4581      	cmp	r9, r0
 8005926:	d142      	bne.n	80059ae <_malloc_r+0xea>
 8005928:	6821      	ldr	r1, [r4, #0]
 800592a:	1a6d      	subs	r5, r5, r1
 800592c:	4629      	mov	r1, r5
 800592e:	4630      	mov	r0, r6
 8005930:	f7ff ffa6 	bl	8005880 <sbrk_aligned>
 8005934:	3001      	adds	r0, #1
 8005936:	d03a      	beq.n	80059ae <_malloc_r+0xea>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	442b      	add	r3, r5
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	f8d8 3000 	ldr.w	r3, [r8]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	bb62      	cbnz	r2, 80059a0 <_malloc_r+0xdc>
 8005946:	f8c8 7000 	str.w	r7, [r8]
 800594a:	e00f      	b.n	800596c <_malloc_r+0xa8>
 800594c:	6822      	ldr	r2, [r4, #0]
 800594e:	1b52      	subs	r2, r2, r5
 8005950:	d420      	bmi.n	8005994 <_malloc_r+0xd0>
 8005952:	2a0b      	cmp	r2, #11
 8005954:	d917      	bls.n	8005986 <_malloc_r+0xc2>
 8005956:	1961      	adds	r1, r4, r5
 8005958:	42a3      	cmp	r3, r4
 800595a:	6025      	str	r5, [r4, #0]
 800595c:	bf18      	it	ne
 800595e:	6059      	strne	r1, [r3, #4]
 8005960:	6863      	ldr	r3, [r4, #4]
 8005962:	bf08      	it	eq
 8005964:	f8c8 1000 	streq.w	r1, [r8]
 8005968:	5162      	str	r2, [r4, r5]
 800596a:	604b      	str	r3, [r1, #4]
 800596c:	4630      	mov	r0, r6
 800596e:	f000 f82f 	bl	80059d0 <__malloc_unlock>
 8005972:	f104 000b 	add.w	r0, r4, #11
 8005976:	1d23      	adds	r3, r4, #4
 8005978:	f020 0007 	bic.w	r0, r0, #7
 800597c:	1ac2      	subs	r2, r0, r3
 800597e:	bf1c      	itt	ne
 8005980:	1a1b      	subne	r3, r3, r0
 8005982:	50a3      	strne	r3, [r4, r2]
 8005984:	e7af      	b.n	80058e6 <_malloc_r+0x22>
 8005986:	6862      	ldr	r2, [r4, #4]
 8005988:	42a3      	cmp	r3, r4
 800598a:	bf0c      	ite	eq
 800598c:	f8c8 2000 	streq.w	r2, [r8]
 8005990:	605a      	strne	r2, [r3, #4]
 8005992:	e7eb      	b.n	800596c <_malloc_r+0xa8>
 8005994:	4623      	mov	r3, r4
 8005996:	6864      	ldr	r4, [r4, #4]
 8005998:	e7ae      	b.n	80058f8 <_malloc_r+0x34>
 800599a:	463c      	mov	r4, r7
 800599c:	687f      	ldr	r7, [r7, #4]
 800599e:	e7b6      	b.n	800590e <_malloc_r+0x4a>
 80059a0:	461a      	mov	r2, r3
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	42a3      	cmp	r3, r4
 80059a6:	d1fb      	bne.n	80059a0 <_malloc_r+0xdc>
 80059a8:	2300      	movs	r3, #0
 80059aa:	6053      	str	r3, [r2, #4]
 80059ac:	e7de      	b.n	800596c <_malloc_r+0xa8>
 80059ae:	230c      	movs	r3, #12
 80059b0:	6033      	str	r3, [r6, #0]
 80059b2:	4630      	mov	r0, r6
 80059b4:	f000 f80c 	bl	80059d0 <__malloc_unlock>
 80059b8:	e794      	b.n	80058e4 <_malloc_r+0x20>
 80059ba:	6005      	str	r5, [r0, #0]
 80059bc:	e7d6      	b.n	800596c <_malloc_r+0xa8>
 80059be:	bf00      	nop
 80059c0:	20025b7c 	.word	0x20025b7c

080059c4 <__malloc_lock>:
 80059c4:	4801      	ldr	r0, [pc, #4]	@ (80059cc <__malloc_lock+0x8>)
 80059c6:	f7ff bf0e 	b.w	80057e6 <__retarget_lock_acquire_recursive>
 80059ca:	bf00      	nop
 80059cc:	20025b74 	.word	0x20025b74

080059d0 <__malloc_unlock>:
 80059d0:	4801      	ldr	r0, [pc, #4]	@ (80059d8 <__malloc_unlock+0x8>)
 80059d2:	f7ff bf09 	b.w	80057e8 <__retarget_lock_release_recursive>
 80059d6:	bf00      	nop
 80059d8:	20025b74 	.word	0x20025b74

080059dc <__sfputc_r>:
 80059dc:	6893      	ldr	r3, [r2, #8]
 80059de:	3b01      	subs	r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	b410      	push	{r4}
 80059e4:	6093      	str	r3, [r2, #8]
 80059e6:	da08      	bge.n	80059fa <__sfputc_r+0x1e>
 80059e8:	6994      	ldr	r4, [r2, #24]
 80059ea:	42a3      	cmp	r3, r4
 80059ec:	db01      	blt.n	80059f2 <__sfputc_r+0x16>
 80059ee:	290a      	cmp	r1, #10
 80059f0:	d103      	bne.n	80059fa <__sfputc_r+0x1e>
 80059f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f6:	f7ff bde8 	b.w	80055ca <__swbuf_r>
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	1c58      	adds	r0, r3, #1
 80059fe:	6010      	str	r0, [r2, #0]
 8005a00:	7019      	strb	r1, [r3, #0]
 8005a02:	4608      	mov	r0, r1
 8005a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <__sfputs_r>:
 8005a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	460f      	mov	r7, r1
 8005a10:	4614      	mov	r4, r2
 8005a12:	18d5      	adds	r5, r2, r3
 8005a14:	42ac      	cmp	r4, r5
 8005a16:	d101      	bne.n	8005a1c <__sfputs_r+0x12>
 8005a18:	2000      	movs	r0, #0
 8005a1a:	e007      	b.n	8005a2c <__sfputs_r+0x22>
 8005a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a20:	463a      	mov	r2, r7
 8005a22:	4630      	mov	r0, r6
 8005a24:	f7ff ffda 	bl	80059dc <__sfputc_r>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d1f3      	bne.n	8005a14 <__sfputs_r+0xa>
 8005a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a30 <_vfiprintf_r>:
 8005a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a34:	460d      	mov	r5, r1
 8005a36:	b09d      	sub	sp, #116	@ 0x74
 8005a38:	4614      	mov	r4, r2
 8005a3a:	4698      	mov	r8, r3
 8005a3c:	4606      	mov	r6, r0
 8005a3e:	b118      	cbz	r0, 8005a48 <_vfiprintf_r+0x18>
 8005a40:	6a03      	ldr	r3, [r0, #32]
 8005a42:	b90b      	cbnz	r3, 8005a48 <_vfiprintf_r+0x18>
 8005a44:	f7ff fcd8 	bl	80053f8 <__sinit>
 8005a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a4a:	07d9      	lsls	r1, r3, #31
 8005a4c:	d405      	bmi.n	8005a5a <_vfiprintf_r+0x2a>
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	059a      	lsls	r2, r3, #22
 8005a52:	d402      	bmi.n	8005a5a <_vfiprintf_r+0x2a>
 8005a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a56:	f7ff fec6 	bl	80057e6 <__retarget_lock_acquire_recursive>
 8005a5a:	89ab      	ldrh	r3, [r5, #12]
 8005a5c:	071b      	lsls	r3, r3, #28
 8005a5e:	d501      	bpl.n	8005a64 <_vfiprintf_r+0x34>
 8005a60:	692b      	ldr	r3, [r5, #16]
 8005a62:	b99b      	cbnz	r3, 8005a8c <_vfiprintf_r+0x5c>
 8005a64:	4629      	mov	r1, r5
 8005a66:	4630      	mov	r0, r6
 8005a68:	f7ff fdee 	bl	8005648 <__swsetup_r>
 8005a6c:	b170      	cbz	r0, 8005a8c <_vfiprintf_r+0x5c>
 8005a6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a70:	07dc      	lsls	r4, r3, #31
 8005a72:	d504      	bpl.n	8005a7e <_vfiprintf_r+0x4e>
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a78:	b01d      	add	sp, #116	@ 0x74
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7e:	89ab      	ldrh	r3, [r5, #12]
 8005a80:	0598      	lsls	r0, r3, #22
 8005a82:	d4f7      	bmi.n	8005a74 <_vfiprintf_r+0x44>
 8005a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a86:	f7ff feaf 	bl	80057e8 <__retarget_lock_release_recursive>
 8005a8a:	e7f3      	b.n	8005a74 <_vfiprintf_r+0x44>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a90:	2320      	movs	r3, #32
 8005a92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a9a:	2330      	movs	r3, #48	@ 0x30
 8005a9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c4c <_vfiprintf_r+0x21c>
 8005aa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005aa4:	f04f 0901 	mov.w	r9, #1
 8005aa8:	4623      	mov	r3, r4
 8005aaa:	469a      	mov	sl, r3
 8005aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ab0:	b10a      	cbz	r2, 8005ab6 <_vfiprintf_r+0x86>
 8005ab2:	2a25      	cmp	r2, #37	@ 0x25
 8005ab4:	d1f9      	bne.n	8005aaa <_vfiprintf_r+0x7a>
 8005ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8005aba:	d00b      	beq.n	8005ad4 <_vfiprintf_r+0xa4>
 8005abc:	465b      	mov	r3, fp
 8005abe:	4622      	mov	r2, r4
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f7ff ffa1 	bl	8005a0a <__sfputs_r>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	f000 80a7 	beq.w	8005c1c <_vfiprintf_r+0x1ec>
 8005ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ad0:	445a      	add	r2, fp
 8005ad2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 809f 	beq.w	8005c1c <_vfiprintf_r+0x1ec>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ae8:	f10a 0a01 	add.w	sl, sl, #1
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	9307      	str	r3, [sp, #28]
 8005af0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005af4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005af6:	4654      	mov	r4, sl
 8005af8:	2205      	movs	r2, #5
 8005afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afe:	4853      	ldr	r0, [pc, #332]	@ (8005c4c <_vfiprintf_r+0x21c>)
 8005b00:	f7fa fb76 	bl	80001f0 <memchr>
 8005b04:	9a04      	ldr	r2, [sp, #16]
 8005b06:	b9d8      	cbnz	r0, 8005b40 <_vfiprintf_r+0x110>
 8005b08:	06d1      	lsls	r1, r2, #27
 8005b0a:	bf44      	itt	mi
 8005b0c:	2320      	movmi	r3, #32
 8005b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b12:	0713      	lsls	r3, r2, #28
 8005b14:	bf44      	itt	mi
 8005b16:	232b      	movmi	r3, #43	@ 0x2b
 8005b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b22:	d015      	beq.n	8005b50 <_vfiprintf_r+0x120>
 8005b24:	9a07      	ldr	r2, [sp, #28]
 8005b26:	4654      	mov	r4, sl
 8005b28:	2000      	movs	r0, #0
 8005b2a:	f04f 0c0a 	mov.w	ip, #10
 8005b2e:	4621      	mov	r1, r4
 8005b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b34:	3b30      	subs	r3, #48	@ 0x30
 8005b36:	2b09      	cmp	r3, #9
 8005b38:	d94b      	bls.n	8005bd2 <_vfiprintf_r+0x1a2>
 8005b3a:	b1b0      	cbz	r0, 8005b6a <_vfiprintf_r+0x13a>
 8005b3c:	9207      	str	r2, [sp, #28]
 8005b3e:	e014      	b.n	8005b6a <_vfiprintf_r+0x13a>
 8005b40:	eba0 0308 	sub.w	r3, r0, r8
 8005b44:	fa09 f303 	lsl.w	r3, r9, r3
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	46a2      	mov	sl, r4
 8005b4e:	e7d2      	b.n	8005af6 <_vfiprintf_r+0xc6>
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	1d19      	adds	r1, r3, #4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	9103      	str	r1, [sp, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bfbb      	ittet	lt
 8005b5c:	425b      	neglt	r3, r3
 8005b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b62:	9307      	strge	r3, [sp, #28]
 8005b64:	9307      	strlt	r3, [sp, #28]
 8005b66:	bfb8      	it	lt
 8005b68:	9204      	strlt	r2, [sp, #16]
 8005b6a:	7823      	ldrb	r3, [r4, #0]
 8005b6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b6e:	d10a      	bne.n	8005b86 <_vfiprintf_r+0x156>
 8005b70:	7863      	ldrb	r3, [r4, #1]
 8005b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b74:	d132      	bne.n	8005bdc <_vfiprintf_r+0x1ac>
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	1d1a      	adds	r2, r3, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	9203      	str	r2, [sp, #12]
 8005b7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b82:	3402      	adds	r4, #2
 8005b84:	9305      	str	r3, [sp, #20]
 8005b86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c5c <_vfiprintf_r+0x22c>
 8005b8a:	7821      	ldrb	r1, [r4, #0]
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	4650      	mov	r0, sl
 8005b90:	f7fa fb2e 	bl	80001f0 <memchr>
 8005b94:	b138      	cbz	r0, 8005ba6 <_vfiprintf_r+0x176>
 8005b96:	9b04      	ldr	r3, [sp, #16]
 8005b98:	eba0 000a 	sub.w	r0, r0, sl
 8005b9c:	2240      	movs	r2, #64	@ 0x40
 8005b9e:	4082      	lsls	r2, r0
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	3401      	adds	r4, #1
 8005ba4:	9304      	str	r3, [sp, #16]
 8005ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005baa:	4829      	ldr	r0, [pc, #164]	@ (8005c50 <_vfiprintf_r+0x220>)
 8005bac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bb0:	2206      	movs	r2, #6
 8005bb2:	f7fa fb1d 	bl	80001f0 <memchr>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d03f      	beq.n	8005c3a <_vfiprintf_r+0x20a>
 8005bba:	4b26      	ldr	r3, [pc, #152]	@ (8005c54 <_vfiprintf_r+0x224>)
 8005bbc:	bb1b      	cbnz	r3, 8005c06 <_vfiprintf_r+0x1d6>
 8005bbe:	9b03      	ldr	r3, [sp, #12]
 8005bc0:	3307      	adds	r3, #7
 8005bc2:	f023 0307 	bic.w	r3, r3, #7
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	9303      	str	r3, [sp, #12]
 8005bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bcc:	443b      	add	r3, r7
 8005bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bd0:	e76a      	b.n	8005aa8 <_vfiprintf_r+0x78>
 8005bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	2001      	movs	r0, #1
 8005bda:	e7a8      	b.n	8005b2e <_vfiprintf_r+0xfe>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	3401      	adds	r4, #1
 8005be0:	9305      	str	r3, [sp, #20]
 8005be2:	4619      	mov	r1, r3
 8005be4:	f04f 0c0a 	mov.w	ip, #10
 8005be8:	4620      	mov	r0, r4
 8005bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bee:	3a30      	subs	r2, #48	@ 0x30
 8005bf0:	2a09      	cmp	r2, #9
 8005bf2:	d903      	bls.n	8005bfc <_vfiprintf_r+0x1cc>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0c6      	beq.n	8005b86 <_vfiprintf_r+0x156>
 8005bf8:	9105      	str	r1, [sp, #20]
 8005bfa:	e7c4      	b.n	8005b86 <_vfiprintf_r+0x156>
 8005bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c00:	4604      	mov	r4, r0
 8005c02:	2301      	movs	r3, #1
 8005c04:	e7f0      	b.n	8005be8 <_vfiprintf_r+0x1b8>
 8005c06:	ab03      	add	r3, sp, #12
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	462a      	mov	r2, r5
 8005c0c:	4b12      	ldr	r3, [pc, #72]	@ (8005c58 <_vfiprintf_r+0x228>)
 8005c0e:	a904      	add	r1, sp, #16
 8005c10:	4630      	mov	r0, r6
 8005c12:	f3af 8000 	nop.w
 8005c16:	4607      	mov	r7, r0
 8005c18:	1c78      	adds	r0, r7, #1
 8005c1a:	d1d6      	bne.n	8005bca <_vfiprintf_r+0x19a>
 8005c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c1e:	07d9      	lsls	r1, r3, #31
 8005c20:	d405      	bmi.n	8005c2e <_vfiprintf_r+0x1fe>
 8005c22:	89ab      	ldrh	r3, [r5, #12]
 8005c24:	059a      	lsls	r2, r3, #22
 8005c26:	d402      	bmi.n	8005c2e <_vfiprintf_r+0x1fe>
 8005c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c2a:	f7ff fddd 	bl	80057e8 <__retarget_lock_release_recursive>
 8005c2e:	89ab      	ldrh	r3, [r5, #12]
 8005c30:	065b      	lsls	r3, r3, #25
 8005c32:	f53f af1f 	bmi.w	8005a74 <_vfiprintf_r+0x44>
 8005c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c38:	e71e      	b.n	8005a78 <_vfiprintf_r+0x48>
 8005c3a:	ab03      	add	r3, sp, #12
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	462a      	mov	r2, r5
 8005c40:	4b05      	ldr	r3, [pc, #20]	@ (8005c58 <_vfiprintf_r+0x228>)
 8005c42:	a904      	add	r1, sp, #16
 8005c44:	4630      	mov	r0, r6
 8005c46:	f000 f879 	bl	8005d3c <_printf_i>
 8005c4a:	e7e4      	b.n	8005c16 <_vfiprintf_r+0x1e6>
 8005c4c:	08007420 	.word	0x08007420
 8005c50:	0800742a 	.word	0x0800742a
 8005c54:	00000000 	.word	0x00000000
 8005c58:	08005a0b 	.word	0x08005a0b
 8005c5c:	08007426 	.word	0x08007426

08005c60 <_printf_common>:
 8005c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c64:	4616      	mov	r6, r2
 8005c66:	4698      	mov	r8, r3
 8005c68:	688a      	ldr	r2, [r1, #8]
 8005c6a:	690b      	ldr	r3, [r1, #16]
 8005c6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c70:	4293      	cmp	r3, r2
 8005c72:	bfb8      	it	lt
 8005c74:	4613      	movlt	r3, r2
 8005c76:	6033      	str	r3, [r6, #0]
 8005c78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	b10a      	cbz	r2, 8005c86 <_printf_common+0x26>
 8005c82:	3301      	adds	r3, #1
 8005c84:	6033      	str	r3, [r6, #0]
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	0699      	lsls	r1, r3, #26
 8005c8a:	bf42      	ittt	mi
 8005c8c:	6833      	ldrmi	r3, [r6, #0]
 8005c8e:	3302      	addmi	r3, #2
 8005c90:	6033      	strmi	r3, [r6, #0]
 8005c92:	6825      	ldr	r5, [r4, #0]
 8005c94:	f015 0506 	ands.w	r5, r5, #6
 8005c98:	d106      	bne.n	8005ca8 <_printf_common+0x48>
 8005c9a:	f104 0a19 	add.w	sl, r4, #25
 8005c9e:	68e3      	ldr	r3, [r4, #12]
 8005ca0:	6832      	ldr	r2, [r6, #0]
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	42ab      	cmp	r3, r5
 8005ca6:	dc26      	bgt.n	8005cf6 <_printf_common+0x96>
 8005ca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	3b00      	subs	r3, #0
 8005cb0:	bf18      	it	ne
 8005cb2:	2301      	movne	r3, #1
 8005cb4:	0692      	lsls	r2, r2, #26
 8005cb6:	d42b      	bmi.n	8005d10 <_printf_common+0xb0>
 8005cb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	47c8      	blx	r9
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d01e      	beq.n	8005d04 <_printf_common+0xa4>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	6922      	ldr	r2, [r4, #16]
 8005cca:	f003 0306 	and.w	r3, r3, #6
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	bf02      	ittt	eq
 8005cd2:	68e5      	ldreq	r5, [r4, #12]
 8005cd4:	6833      	ldreq	r3, [r6, #0]
 8005cd6:	1aed      	subeq	r5, r5, r3
 8005cd8:	68a3      	ldr	r3, [r4, #8]
 8005cda:	bf0c      	ite	eq
 8005cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce0:	2500      	movne	r5, #0
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	bfc4      	itt	gt
 8005ce6:	1a9b      	subgt	r3, r3, r2
 8005ce8:	18ed      	addgt	r5, r5, r3
 8005cea:	2600      	movs	r6, #0
 8005cec:	341a      	adds	r4, #26
 8005cee:	42b5      	cmp	r5, r6
 8005cf0:	d11a      	bne.n	8005d28 <_printf_common+0xc8>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e008      	b.n	8005d08 <_printf_common+0xa8>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4652      	mov	r2, sl
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	47c8      	blx	r9
 8005d00:	3001      	adds	r0, #1
 8005d02:	d103      	bne.n	8005d0c <_printf_common+0xac>
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0c:	3501      	adds	r5, #1
 8005d0e:	e7c6      	b.n	8005c9e <_printf_common+0x3e>
 8005d10:	18e1      	adds	r1, r4, r3
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	2030      	movs	r0, #48	@ 0x30
 8005d16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d1a:	4422      	add	r2, r4
 8005d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d24:	3302      	adds	r3, #2
 8005d26:	e7c7      	b.n	8005cb8 <_printf_common+0x58>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	4638      	mov	r0, r7
 8005d30:	47c8      	blx	r9
 8005d32:	3001      	adds	r0, #1
 8005d34:	d0e6      	beq.n	8005d04 <_printf_common+0xa4>
 8005d36:	3601      	adds	r6, #1
 8005d38:	e7d9      	b.n	8005cee <_printf_common+0x8e>
	...

08005d3c <_printf_i>:
 8005d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	7e0f      	ldrb	r7, [r1, #24]
 8005d42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d44:	2f78      	cmp	r7, #120	@ 0x78
 8005d46:	4691      	mov	r9, r2
 8005d48:	4680      	mov	r8, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	469a      	mov	sl, r3
 8005d4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d52:	d807      	bhi.n	8005d64 <_printf_i+0x28>
 8005d54:	2f62      	cmp	r7, #98	@ 0x62
 8005d56:	d80a      	bhi.n	8005d6e <_printf_i+0x32>
 8005d58:	2f00      	cmp	r7, #0
 8005d5a:	f000 80d2 	beq.w	8005f02 <_printf_i+0x1c6>
 8005d5e:	2f58      	cmp	r7, #88	@ 0x58
 8005d60:	f000 80b9 	beq.w	8005ed6 <_printf_i+0x19a>
 8005d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d6c:	e03a      	b.n	8005de4 <_printf_i+0xa8>
 8005d6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d72:	2b15      	cmp	r3, #21
 8005d74:	d8f6      	bhi.n	8005d64 <_printf_i+0x28>
 8005d76:	a101      	add	r1, pc, #4	@ (adr r1, 8005d7c <_printf_i+0x40>)
 8005d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d7c:	08005dd5 	.word	0x08005dd5
 8005d80:	08005de9 	.word	0x08005de9
 8005d84:	08005d65 	.word	0x08005d65
 8005d88:	08005d65 	.word	0x08005d65
 8005d8c:	08005d65 	.word	0x08005d65
 8005d90:	08005d65 	.word	0x08005d65
 8005d94:	08005de9 	.word	0x08005de9
 8005d98:	08005d65 	.word	0x08005d65
 8005d9c:	08005d65 	.word	0x08005d65
 8005da0:	08005d65 	.word	0x08005d65
 8005da4:	08005d65 	.word	0x08005d65
 8005da8:	08005ee9 	.word	0x08005ee9
 8005dac:	08005e13 	.word	0x08005e13
 8005db0:	08005ea3 	.word	0x08005ea3
 8005db4:	08005d65 	.word	0x08005d65
 8005db8:	08005d65 	.word	0x08005d65
 8005dbc:	08005f0b 	.word	0x08005f0b
 8005dc0:	08005d65 	.word	0x08005d65
 8005dc4:	08005e13 	.word	0x08005e13
 8005dc8:	08005d65 	.word	0x08005d65
 8005dcc:	08005d65 	.word	0x08005d65
 8005dd0:	08005eab 	.word	0x08005eab
 8005dd4:	6833      	ldr	r3, [r6, #0]
 8005dd6:	1d1a      	adds	r2, r3, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6032      	str	r2, [r6, #0]
 8005ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005de0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005de4:	2301      	movs	r3, #1
 8005de6:	e09d      	b.n	8005f24 <_printf_i+0x1e8>
 8005de8:	6833      	ldr	r3, [r6, #0]
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	1d19      	adds	r1, r3, #4
 8005dee:	6031      	str	r1, [r6, #0]
 8005df0:	0606      	lsls	r6, r0, #24
 8005df2:	d501      	bpl.n	8005df8 <_printf_i+0xbc>
 8005df4:	681d      	ldr	r5, [r3, #0]
 8005df6:	e003      	b.n	8005e00 <_printf_i+0xc4>
 8005df8:	0645      	lsls	r5, r0, #25
 8005dfa:	d5fb      	bpl.n	8005df4 <_printf_i+0xb8>
 8005dfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	da03      	bge.n	8005e0c <_printf_i+0xd0>
 8005e04:	232d      	movs	r3, #45	@ 0x2d
 8005e06:	426d      	negs	r5, r5
 8005e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e0c:	4859      	ldr	r0, [pc, #356]	@ (8005f74 <_printf_i+0x238>)
 8005e0e:	230a      	movs	r3, #10
 8005e10:	e011      	b.n	8005e36 <_printf_i+0xfa>
 8005e12:	6821      	ldr	r1, [r4, #0]
 8005e14:	6833      	ldr	r3, [r6, #0]
 8005e16:	0608      	lsls	r0, r1, #24
 8005e18:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e1c:	d402      	bmi.n	8005e24 <_printf_i+0xe8>
 8005e1e:	0649      	lsls	r1, r1, #25
 8005e20:	bf48      	it	mi
 8005e22:	b2ad      	uxthmi	r5, r5
 8005e24:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e26:	4853      	ldr	r0, [pc, #332]	@ (8005f74 <_printf_i+0x238>)
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	bf14      	ite	ne
 8005e2c:	230a      	movne	r3, #10
 8005e2e:	2308      	moveq	r3, #8
 8005e30:	2100      	movs	r1, #0
 8005e32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e36:	6866      	ldr	r6, [r4, #4]
 8005e38:	60a6      	str	r6, [r4, #8]
 8005e3a:	2e00      	cmp	r6, #0
 8005e3c:	bfa2      	ittt	ge
 8005e3e:	6821      	ldrge	r1, [r4, #0]
 8005e40:	f021 0104 	bicge.w	r1, r1, #4
 8005e44:	6021      	strge	r1, [r4, #0]
 8005e46:	b90d      	cbnz	r5, 8005e4c <_printf_i+0x110>
 8005e48:	2e00      	cmp	r6, #0
 8005e4a:	d04b      	beq.n	8005ee4 <_printf_i+0x1a8>
 8005e4c:	4616      	mov	r6, r2
 8005e4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e52:	fb03 5711 	mls	r7, r3, r1, r5
 8005e56:	5dc7      	ldrb	r7, [r0, r7]
 8005e58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e5c:	462f      	mov	r7, r5
 8005e5e:	42bb      	cmp	r3, r7
 8005e60:	460d      	mov	r5, r1
 8005e62:	d9f4      	bls.n	8005e4e <_printf_i+0x112>
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d10b      	bne.n	8005e80 <_printf_i+0x144>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	07df      	lsls	r7, r3, #31
 8005e6c:	d508      	bpl.n	8005e80 <_printf_i+0x144>
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	6861      	ldr	r1, [r4, #4]
 8005e72:	4299      	cmp	r1, r3
 8005e74:	bfde      	ittt	le
 8005e76:	2330      	movle	r3, #48	@ 0x30
 8005e78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e7c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005e80:	1b92      	subs	r2, r2, r6
 8005e82:	6122      	str	r2, [r4, #16]
 8005e84:	f8cd a000 	str.w	sl, [sp]
 8005e88:	464b      	mov	r3, r9
 8005e8a:	aa03      	add	r2, sp, #12
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4640      	mov	r0, r8
 8005e90:	f7ff fee6 	bl	8005c60 <_printf_common>
 8005e94:	3001      	adds	r0, #1
 8005e96:	d14a      	bne.n	8005f2e <_printf_i+0x1f2>
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e9c:	b004      	add	sp, #16
 8005e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	f043 0320 	orr.w	r3, r3, #32
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	4833      	ldr	r0, [pc, #204]	@ (8005f78 <_printf_i+0x23c>)
 8005eac:	2778      	movs	r7, #120	@ 0x78
 8005eae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	6831      	ldr	r1, [r6, #0]
 8005eb6:	061f      	lsls	r7, r3, #24
 8005eb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ebc:	d402      	bmi.n	8005ec4 <_printf_i+0x188>
 8005ebe:	065f      	lsls	r7, r3, #25
 8005ec0:	bf48      	it	mi
 8005ec2:	b2ad      	uxthmi	r5, r5
 8005ec4:	6031      	str	r1, [r6, #0]
 8005ec6:	07d9      	lsls	r1, r3, #31
 8005ec8:	bf44      	itt	mi
 8005eca:	f043 0320 	orrmi.w	r3, r3, #32
 8005ece:	6023      	strmi	r3, [r4, #0]
 8005ed0:	b11d      	cbz	r5, 8005eda <_printf_i+0x19e>
 8005ed2:	2310      	movs	r3, #16
 8005ed4:	e7ac      	b.n	8005e30 <_printf_i+0xf4>
 8005ed6:	4827      	ldr	r0, [pc, #156]	@ (8005f74 <_printf_i+0x238>)
 8005ed8:	e7e9      	b.n	8005eae <_printf_i+0x172>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	f023 0320 	bic.w	r3, r3, #32
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	e7f6      	b.n	8005ed2 <_printf_i+0x196>
 8005ee4:	4616      	mov	r6, r2
 8005ee6:	e7bd      	b.n	8005e64 <_printf_i+0x128>
 8005ee8:	6833      	ldr	r3, [r6, #0]
 8005eea:	6825      	ldr	r5, [r4, #0]
 8005eec:	6961      	ldr	r1, [r4, #20]
 8005eee:	1d18      	adds	r0, r3, #4
 8005ef0:	6030      	str	r0, [r6, #0]
 8005ef2:	062e      	lsls	r6, r5, #24
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	d501      	bpl.n	8005efc <_printf_i+0x1c0>
 8005ef8:	6019      	str	r1, [r3, #0]
 8005efa:	e002      	b.n	8005f02 <_printf_i+0x1c6>
 8005efc:	0668      	lsls	r0, r5, #25
 8005efe:	d5fb      	bpl.n	8005ef8 <_printf_i+0x1bc>
 8005f00:	8019      	strh	r1, [r3, #0]
 8005f02:	2300      	movs	r3, #0
 8005f04:	6123      	str	r3, [r4, #16]
 8005f06:	4616      	mov	r6, r2
 8005f08:	e7bc      	b.n	8005e84 <_printf_i+0x148>
 8005f0a:	6833      	ldr	r3, [r6, #0]
 8005f0c:	1d1a      	adds	r2, r3, #4
 8005f0e:	6032      	str	r2, [r6, #0]
 8005f10:	681e      	ldr	r6, [r3, #0]
 8005f12:	6862      	ldr	r2, [r4, #4]
 8005f14:	2100      	movs	r1, #0
 8005f16:	4630      	mov	r0, r6
 8005f18:	f7fa f96a 	bl	80001f0 <memchr>
 8005f1c:	b108      	cbz	r0, 8005f22 <_printf_i+0x1e6>
 8005f1e:	1b80      	subs	r0, r0, r6
 8005f20:	6060      	str	r0, [r4, #4]
 8005f22:	6863      	ldr	r3, [r4, #4]
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	2300      	movs	r3, #0
 8005f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f2c:	e7aa      	b.n	8005e84 <_printf_i+0x148>
 8005f2e:	6923      	ldr	r3, [r4, #16]
 8005f30:	4632      	mov	r2, r6
 8005f32:	4649      	mov	r1, r9
 8005f34:	4640      	mov	r0, r8
 8005f36:	47d0      	blx	sl
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d0ad      	beq.n	8005e98 <_printf_i+0x15c>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	079b      	lsls	r3, r3, #30
 8005f40:	d413      	bmi.n	8005f6a <_printf_i+0x22e>
 8005f42:	68e0      	ldr	r0, [r4, #12]
 8005f44:	9b03      	ldr	r3, [sp, #12]
 8005f46:	4298      	cmp	r0, r3
 8005f48:	bfb8      	it	lt
 8005f4a:	4618      	movlt	r0, r3
 8005f4c:	e7a6      	b.n	8005e9c <_printf_i+0x160>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4632      	mov	r2, r6
 8005f52:	4649      	mov	r1, r9
 8005f54:	4640      	mov	r0, r8
 8005f56:	47d0      	blx	sl
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d09d      	beq.n	8005e98 <_printf_i+0x15c>
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	68e3      	ldr	r3, [r4, #12]
 8005f60:	9903      	ldr	r1, [sp, #12]
 8005f62:	1a5b      	subs	r3, r3, r1
 8005f64:	42ab      	cmp	r3, r5
 8005f66:	dcf2      	bgt.n	8005f4e <_printf_i+0x212>
 8005f68:	e7eb      	b.n	8005f42 <_printf_i+0x206>
 8005f6a:	2500      	movs	r5, #0
 8005f6c:	f104 0619 	add.w	r6, r4, #25
 8005f70:	e7f5      	b.n	8005f5e <_printf_i+0x222>
 8005f72:	bf00      	nop
 8005f74:	08007431 	.word	0x08007431
 8005f78:	08007442 	.word	0x08007442

08005f7c <__sflush_r>:
 8005f7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f84:	0716      	lsls	r6, r2, #28
 8005f86:	4605      	mov	r5, r0
 8005f88:	460c      	mov	r4, r1
 8005f8a:	d454      	bmi.n	8006036 <__sflush_r+0xba>
 8005f8c:	684b      	ldr	r3, [r1, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	dc02      	bgt.n	8005f98 <__sflush_r+0x1c>
 8005f92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	dd48      	ble.n	800602a <__sflush_r+0xae>
 8005f98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f9a:	2e00      	cmp	r6, #0
 8005f9c:	d045      	beq.n	800602a <__sflush_r+0xae>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fa4:	682f      	ldr	r7, [r5, #0]
 8005fa6:	6a21      	ldr	r1, [r4, #32]
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	d030      	beq.n	800600e <__sflush_r+0x92>
 8005fac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	0759      	lsls	r1, r3, #29
 8005fb2:	d505      	bpl.n	8005fc0 <__sflush_r+0x44>
 8005fb4:	6863      	ldr	r3, [r4, #4]
 8005fb6:	1ad2      	subs	r2, r2, r3
 8005fb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fba:	b10b      	cbz	r3, 8005fc0 <__sflush_r+0x44>
 8005fbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fc4:	6a21      	ldr	r1, [r4, #32]
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	47b0      	blx	r6
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	d106      	bne.n	8005fde <__sflush_r+0x62>
 8005fd0:	6829      	ldr	r1, [r5, #0]
 8005fd2:	291d      	cmp	r1, #29
 8005fd4:	d82b      	bhi.n	800602e <__sflush_r+0xb2>
 8005fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8006080 <__sflush_r+0x104>)
 8005fd8:	410a      	asrs	r2, r1
 8005fda:	07d6      	lsls	r6, r2, #31
 8005fdc:	d427      	bmi.n	800602e <__sflush_r+0xb2>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	6062      	str	r2, [r4, #4]
 8005fe2:	04d9      	lsls	r1, r3, #19
 8005fe4:	6922      	ldr	r2, [r4, #16]
 8005fe6:	6022      	str	r2, [r4, #0]
 8005fe8:	d504      	bpl.n	8005ff4 <__sflush_r+0x78>
 8005fea:	1c42      	adds	r2, r0, #1
 8005fec:	d101      	bne.n	8005ff2 <__sflush_r+0x76>
 8005fee:	682b      	ldr	r3, [r5, #0]
 8005ff0:	b903      	cbnz	r3, 8005ff4 <__sflush_r+0x78>
 8005ff2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ff6:	602f      	str	r7, [r5, #0]
 8005ff8:	b1b9      	cbz	r1, 800602a <__sflush_r+0xae>
 8005ffa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ffe:	4299      	cmp	r1, r3
 8006000:	d002      	beq.n	8006008 <__sflush_r+0x8c>
 8006002:	4628      	mov	r0, r5
 8006004:	f7ff fbf2 	bl	80057ec <_free_r>
 8006008:	2300      	movs	r3, #0
 800600a:	6363      	str	r3, [r4, #52]	@ 0x34
 800600c:	e00d      	b.n	800602a <__sflush_r+0xae>
 800600e:	2301      	movs	r3, #1
 8006010:	4628      	mov	r0, r5
 8006012:	47b0      	blx	r6
 8006014:	4602      	mov	r2, r0
 8006016:	1c50      	adds	r0, r2, #1
 8006018:	d1c9      	bne.n	8005fae <__sflush_r+0x32>
 800601a:	682b      	ldr	r3, [r5, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0c6      	beq.n	8005fae <__sflush_r+0x32>
 8006020:	2b1d      	cmp	r3, #29
 8006022:	d001      	beq.n	8006028 <__sflush_r+0xac>
 8006024:	2b16      	cmp	r3, #22
 8006026:	d11e      	bne.n	8006066 <__sflush_r+0xea>
 8006028:	602f      	str	r7, [r5, #0]
 800602a:	2000      	movs	r0, #0
 800602c:	e022      	b.n	8006074 <__sflush_r+0xf8>
 800602e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006032:	b21b      	sxth	r3, r3
 8006034:	e01b      	b.n	800606e <__sflush_r+0xf2>
 8006036:	690f      	ldr	r7, [r1, #16]
 8006038:	2f00      	cmp	r7, #0
 800603a:	d0f6      	beq.n	800602a <__sflush_r+0xae>
 800603c:	0793      	lsls	r3, r2, #30
 800603e:	680e      	ldr	r6, [r1, #0]
 8006040:	bf08      	it	eq
 8006042:	694b      	ldreq	r3, [r1, #20]
 8006044:	600f      	str	r7, [r1, #0]
 8006046:	bf18      	it	ne
 8006048:	2300      	movne	r3, #0
 800604a:	eba6 0807 	sub.w	r8, r6, r7
 800604e:	608b      	str	r3, [r1, #8]
 8006050:	f1b8 0f00 	cmp.w	r8, #0
 8006054:	dde9      	ble.n	800602a <__sflush_r+0xae>
 8006056:	6a21      	ldr	r1, [r4, #32]
 8006058:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800605a:	4643      	mov	r3, r8
 800605c:	463a      	mov	r2, r7
 800605e:	4628      	mov	r0, r5
 8006060:	47b0      	blx	r6
 8006062:	2800      	cmp	r0, #0
 8006064:	dc08      	bgt.n	8006078 <__sflush_r+0xfc>
 8006066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800606a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006078:	4407      	add	r7, r0
 800607a:	eba8 0800 	sub.w	r8, r8, r0
 800607e:	e7e7      	b.n	8006050 <__sflush_r+0xd4>
 8006080:	dfbffffe 	.word	0xdfbffffe

08006084 <_fflush_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	690b      	ldr	r3, [r1, #16]
 8006088:	4605      	mov	r5, r0
 800608a:	460c      	mov	r4, r1
 800608c:	b913      	cbnz	r3, 8006094 <_fflush_r+0x10>
 800608e:	2500      	movs	r5, #0
 8006090:	4628      	mov	r0, r5
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	b118      	cbz	r0, 800609e <_fflush_r+0x1a>
 8006096:	6a03      	ldr	r3, [r0, #32]
 8006098:	b90b      	cbnz	r3, 800609e <_fflush_r+0x1a>
 800609a:	f7ff f9ad 	bl	80053f8 <__sinit>
 800609e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0f3      	beq.n	800608e <_fflush_r+0xa>
 80060a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060a8:	07d0      	lsls	r0, r2, #31
 80060aa:	d404      	bmi.n	80060b6 <_fflush_r+0x32>
 80060ac:	0599      	lsls	r1, r3, #22
 80060ae:	d402      	bmi.n	80060b6 <_fflush_r+0x32>
 80060b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060b2:	f7ff fb98 	bl	80057e6 <__retarget_lock_acquire_recursive>
 80060b6:	4628      	mov	r0, r5
 80060b8:	4621      	mov	r1, r4
 80060ba:	f7ff ff5f 	bl	8005f7c <__sflush_r>
 80060be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060c0:	07da      	lsls	r2, r3, #31
 80060c2:	4605      	mov	r5, r0
 80060c4:	d4e4      	bmi.n	8006090 <_fflush_r+0xc>
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	059b      	lsls	r3, r3, #22
 80060ca:	d4e1      	bmi.n	8006090 <_fflush_r+0xc>
 80060cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ce:	f7ff fb8b 	bl	80057e8 <__retarget_lock_release_recursive>
 80060d2:	e7dd      	b.n	8006090 <_fflush_r+0xc>

080060d4 <__swhatbuf_r>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	460c      	mov	r4, r1
 80060d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060dc:	2900      	cmp	r1, #0
 80060de:	b096      	sub	sp, #88	@ 0x58
 80060e0:	4615      	mov	r5, r2
 80060e2:	461e      	mov	r6, r3
 80060e4:	da0d      	bge.n	8006102 <__swhatbuf_r+0x2e>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80060ec:	f04f 0100 	mov.w	r1, #0
 80060f0:	bf14      	ite	ne
 80060f2:	2340      	movne	r3, #64	@ 0x40
 80060f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80060f8:	2000      	movs	r0, #0
 80060fa:	6031      	str	r1, [r6, #0]
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	b016      	add	sp, #88	@ 0x58
 8006100:	bd70      	pop	{r4, r5, r6, pc}
 8006102:	466a      	mov	r2, sp
 8006104:	f000 f848 	bl	8006198 <_fstat_r>
 8006108:	2800      	cmp	r0, #0
 800610a:	dbec      	blt.n	80060e6 <__swhatbuf_r+0x12>
 800610c:	9901      	ldr	r1, [sp, #4]
 800610e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006112:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006116:	4259      	negs	r1, r3
 8006118:	4159      	adcs	r1, r3
 800611a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800611e:	e7eb      	b.n	80060f8 <__swhatbuf_r+0x24>

08006120 <__smakebuf_r>:
 8006120:	898b      	ldrh	r3, [r1, #12]
 8006122:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006124:	079d      	lsls	r5, r3, #30
 8006126:	4606      	mov	r6, r0
 8006128:	460c      	mov	r4, r1
 800612a:	d507      	bpl.n	800613c <__smakebuf_r+0x1c>
 800612c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	2301      	movs	r3, #1
 8006136:	6163      	str	r3, [r4, #20]
 8006138:	b003      	add	sp, #12
 800613a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800613c:	ab01      	add	r3, sp, #4
 800613e:	466a      	mov	r2, sp
 8006140:	f7ff ffc8 	bl	80060d4 <__swhatbuf_r>
 8006144:	9f00      	ldr	r7, [sp, #0]
 8006146:	4605      	mov	r5, r0
 8006148:	4639      	mov	r1, r7
 800614a:	4630      	mov	r0, r6
 800614c:	f7ff fbba 	bl	80058c4 <_malloc_r>
 8006150:	b948      	cbnz	r0, 8006166 <__smakebuf_r+0x46>
 8006152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006156:	059a      	lsls	r2, r3, #22
 8006158:	d4ee      	bmi.n	8006138 <__smakebuf_r+0x18>
 800615a:	f023 0303 	bic.w	r3, r3, #3
 800615e:	f043 0302 	orr.w	r3, r3, #2
 8006162:	81a3      	strh	r3, [r4, #12]
 8006164:	e7e2      	b.n	800612c <__smakebuf_r+0xc>
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	6020      	str	r0, [r4, #0]
 800616a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800616e:	81a3      	strh	r3, [r4, #12]
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006176:	b15b      	cbz	r3, 8006190 <__smakebuf_r+0x70>
 8006178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800617c:	4630      	mov	r0, r6
 800617e:	f000 f81d 	bl	80061bc <_isatty_r>
 8006182:	b128      	cbz	r0, 8006190 <__smakebuf_r+0x70>
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	f023 0303 	bic.w	r3, r3, #3
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	431d      	orrs	r5, r3
 8006194:	81a5      	strh	r5, [r4, #12]
 8006196:	e7cf      	b.n	8006138 <__smakebuf_r+0x18>

08006198 <_fstat_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4d07      	ldr	r5, [pc, #28]	@ (80061b8 <_fstat_r+0x20>)
 800619c:	2300      	movs	r3, #0
 800619e:	4604      	mov	r4, r0
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	602b      	str	r3, [r5, #0]
 80061a6:	f7fb ffc5 	bl	8002134 <_fstat>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d102      	bne.n	80061b4 <_fstat_r+0x1c>
 80061ae:	682b      	ldr	r3, [r5, #0]
 80061b0:	b103      	cbz	r3, 80061b4 <_fstat_r+0x1c>
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	bd38      	pop	{r3, r4, r5, pc}
 80061b6:	bf00      	nop
 80061b8:	20025b70 	.word	0x20025b70

080061bc <_isatty_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d06      	ldr	r5, [pc, #24]	@ (80061d8 <_isatty_r+0x1c>)
 80061c0:	2300      	movs	r3, #0
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	f7fb ffc4 	bl	8002154 <_isatty>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_isatty_r+0x1a>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_isatty_r+0x1a>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	20025b70 	.word	0x20025b70

080061dc <_sbrk_r>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	4d06      	ldr	r5, [pc, #24]	@ (80061f8 <_sbrk_r+0x1c>)
 80061e0:	2300      	movs	r3, #0
 80061e2:	4604      	mov	r4, r0
 80061e4:	4608      	mov	r0, r1
 80061e6:	602b      	str	r3, [r5, #0]
 80061e8:	f7fb ffcc 	bl	8002184 <_sbrk>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_sbrk_r+0x1a>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_sbrk_r+0x1a>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	20025b70 	.word	0x20025b70

080061fc <_init>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	bf00      	nop
 8006200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006202:	bc08      	pop	{r3}
 8006204:	469e      	mov	lr, r3
 8006206:	4770      	bx	lr

08006208 <_fini>:
 8006208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620a:	bf00      	nop
 800620c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620e:	bc08      	pop	{r3}
 8006210:	469e      	mov	lr, r3
 8006212:	4770      	bx	lr
